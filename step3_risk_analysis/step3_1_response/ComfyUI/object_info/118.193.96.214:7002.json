{
  "KSampler": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The model used for denoising the input latent."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "The number of steps used in the denoising process."
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01,
            "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta"
          ],
          {
            "tooltip": "The scheduler controls how noise is gradually removed to form the image."
          }
        ],
        "positive": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to include in the image."
          }
        ],
        "negative": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to exclude from the image."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "The latent image to denoise."
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler",
    "display_name": "KSampler",
    "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false,
    "output_tooltips": [
      "The denoised latent."
    ]
  },
  "CheckpointLoaderSimple": {
    "input": {
      "required": {
        "ckpt_name": [
          [],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderSimple",
    "display_name": "Load Checkpoint",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "CLIPTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncode",
    "display_name": "CLIP Text Encode (Prompt)",
    "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "CLIPSetLastLayer": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "stop_at_clip_layer": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "stop_at_clip_layer"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPSetLastLayer",
    "display_name": "CLIP Set Last Layer",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "VAEDecode": {
    "input": {
      "required": {
        "samples": [
          "LATENT",
          {
            "tooltip": "The latent to be decoded."
          }
        ],
        "vae": [
          "VAE",
          {
            "tooltip": "The VAE model used for decoding the latent."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecode",
    "display_name": "VAE Decode",
    "description": "Decodes latent images back into pixel space images.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The decoded image."
    ]
  },
  "VAEEncode": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncode",
    "display_name": "VAE Encode",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "VAEEncodeForInpaint": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "grow_mask_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeForInpaint",
    "display_name": "VAE Encode (for Inpainting)",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "VAELoader": {
    "input": {
      "required": {
        "vae_name": [
          [
            "ae.safetensors",
            "ae.sft"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoader",
    "display_name": "Load VAE",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentImage",
    "display_name": "Empty Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "LatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscale",
    "display_name": "Upscale Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentUpscaleBy": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleBy",
    "display_name": "Upscale Latent By",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentFromBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFromBatch",
    "display_name": "Latent From Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "RepeatLatentBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RepeatLatentBatch",
    "display_name": "Repeat Latent Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "SaveImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImage",
    "display_name": "Save Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "PreviewImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewImage",
    "display_name": "Preview Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "LoadImage": {
    "input": {
      "required": {
        "image": [
          [],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImage",
    "display_name": "Load Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "LoadImageMask": {
    "input": {
      "required": {
        "image": [
          [],
          {
            "image_upload": true
          }
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "LoadImageMask",
    "display_name": "Load Image (as Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "mask",
    "output_node": false
  },
  "ImageScale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScale",
    "display_name": "Upscale Image",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageScaleBy": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleBy",
    "display_name": "Upscale Image By",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageInvert": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageInvert",
    "display_name": "Invert Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatch",
    "display_name": "Batch Images",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaint",
    "display_name": "Pad Image for Outpainting",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "EmptyImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "EmptyImage",
    "display_name": "EmptyImage",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ConditioningAverage": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ],
        "conditioning_to_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from",
        "conditioning_to_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningAverage",
    "display_name": "ConditioningAverage",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningCombine": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombine",
    "display_name": "Conditioning (Combine)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningConcat": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningConcat",
    "display_name": "Conditioning (Concat)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetArea": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetArea",
    "display_name": "Conditioning (Set Area)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaPercentage": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentage",
    "display_name": "Conditioning (Set Area with Percentage)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaStrength": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaStrength",
    "display_name": "ConditioningSetAreaStrength",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetMask": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "mask",
        "strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetMask",
    "display_name": "Conditioning (Set Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "KSamplerAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerAdvanced",
    "display_name": "KSampler (Advanced)",
    "description": "",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false
  },
  "SetLatentNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "SetLatentNoiseMask",
    "display_name": "Set Latent Noise Mask",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "LatentComposite": {
    "input": {
      "required": {
        "samples_to": [
          "LATENT"
        ],
        "samples_from": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feather": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples_to",
        "samples_from",
        "x",
        "y",
        "feather"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentComposite",
    "display_name": "Latent Composite",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentBlend": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "blend_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBlend",
    "display_name": "Latent Blend",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "LatentRotate": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "rotation": [
          [
            "none",
            "90 degrees",
            "180 degrees",
            "270 degrees"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "rotation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentRotate",
    "display_name": "Rotate Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentFlip": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "flip_method": [
          [
            "x-axis: vertically",
            "y-axis: horizontally"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "flip_method"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFlip",
    "display_name": "Flip Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentCrop": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCrop",
    "display_name": "Crop Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [
            "1990s_FLUXIPH_v0.safetensors",
            "1990s_FLUXIP_v0.safetensors",
            "1990s_FLUX_v0.safetensors",
            "3Drandering_FLUX_v0.safetensors",
            "3dPixar_FLUXIPH_v0.safetensors",
            "3dPixar_FLUX_v0.safetensors",
            "Americanstory_FLUXIPH_v0.safetensors",
            "Atmosphere_FLUXIPH_v0.safetensors",
            "FLUX-dev-lora-AntiBlur.safetensors",
            "FLUX-dev-lora-add_details.safetensors",
            "Graffiti_Splash_xl_1024_5p-step00000500.safetensors",
            "Hyper-FLUX.1-dev-16steps-lora.safetensors",
            "Hyper-FLUX.1-dev-8steps-lora.safetensors",
            "Ukiyoe_FLUX_v0.safetensors",
            "a_20241120_25.safetensors",
            "a_20241122_74.safetensors",
            "americanStory_FLUX_v0.safetensors",
            "americanStory_RVXLIPHP_v0.safetensors",
            "animateLogo_FLUXIPH_v0.safetensors",
            "animateLogo_V2.safetensors",
            "arcane_FLUXIPH_v0.safetensors",
            "arcane_Flux_v0.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43.safetensors",
            "balloons_FLUX_v0.safetensors",
            "boldEAsy1-3_FLUXIPH_v0-step00000500.safetensors",
            "boldEAsy1-3_FLUXIPH_v0.safetensors",
            "boldEAsy4-6_FLUXIPH_v0.safetensors",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000.safetensors",
            "camera_control_lora_scale_v6_rank32-step00001000.safetensors",
            "camera_control_lora_scale_v7_rank32_wide-step00002000.safetensors",
            "caricature_FLUXIPH_v0.safetensors",
            "cartoon_lilman.safetensors",
            "catgirl_FLUX_10p_v1-step00000500.safetensors",
            "characterSheet_Flux_v0.safetensors",
            "childrenIllustration_FLUXIPH_v0.safetensors",
            "childrenIllustration_FLUX_v0.safetensors",
            "colorfulFelt_FLUX_1024_v0.safetensors",
            "colorfulFelt_FLUX_v0.safetensors",
            "cowcat_flux_5p_v1-step00000500.safetensors",
            "crossHatch_FLUXIPH_v1.safetensors",
            "cuteIcon_FLUXIPH_v0.safetensors",
            "cuteIcon_FLUX_v0.safetensors",
            "dashedLine_FLUX_v0.safetensors",
            "diamondJewelry_FLUX_v0.safetensors",
            "disney_FLUX_v0.safetensors",
            "expandIcon_FLUXIPH_v0.safetensors",
            "expandIcon_FLUX_v0.safetensors",
            "faceToon_FLUXIPH_v0.safetensors",
            "faceToon_FLUX_v0.safetensors",
            "football_FLUX_768_head.safetensors",
            "fruitWater_FLUXIPH_v0.safetensors",
            "fruitWater_FLUX_v0.safetensors",
            "geometricStyle_FLUXIPH_v0.safetensors",
            "geometricStyle_FLUX_v0.safetensors",
            "ghibliStyle_FLUXIPH_v0.safetensors",
            "graffiti_FLUXIPH_v0.safetensors",
            "graffiti_FLUX_v0.safetensors",
            "gtaComic_FLUXIPH_v0.safetensors",
            "gtaMiamiFlux_v0.safetensors",
            "hyperbolicPortrait_FLUXIPH_v0.safetensors",
            "hyperbolicPortrait_FLUXIP_v0.safetensors",
            "hyperbolicPortrait_FLUX_v0.safetensors",
            "illustration_character.safetensors",
            "impasto_comics.safetensors",
            "jellycat_FLUXIPH_v0.safetensors",
            "jellycat_FLUX_v0.safetensors",
            "jojo_FLUXIPH_v0.safetensors",
            "jojo_FLUX_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v3.safetensors",
            "joyfulCartoon_FLUXIPH_v4.safetensors",
            "joyfulCartoon_FLUX_v0.safetensors",
            "koda_FLUX_v0.safetensors",
            "lega_FLUXIPH_v0.safetensors",
            "lega_FLUX_v0.safetensors",
            "lineIconAnimal_FLUX_v0.safetensors",
            "lineartAnimal_FLUXIPH_v0.safetensors",
            "lineartIcon_FLUXIPH_v0.safetensors",
            "lipboy-step00000500.safetensors",
            "liveBroadcast_FLUX_v0.safetensors",
            "loveIcon_FLUX_v0.safetensors",
            "movie_FLUX_v0.safetensors",
            "paperCutout_FLUX_v0.safetensors",
            "pastelDeli_FLUX_v0.safetensors",
            "puppet_FLUX_v0.safetensors",
            "realism_FLUX_v0.safetensors",
            "surrealismArt_FLUX_v0.safetensors",
            "tarotLine_FLUXIPH_v0.safetensors",
            "test_flux_lora11.12.safetensors",
            "test_pixelwave_v1.safetensors",
            "tiltshiftPhotography_FLUXIPH_v0.safetensors",
            "traincharacter_100045_1732184393884___43.safetensors",
            "traincharacter_100045_1732186691083___43.safetensors",
            "traincharacter_100050_1737359866820___43.safetensors",
            "traincharacter_137_1739158654635___43.safetensors",
            "traincharacter_137_1739167140848___43.safetensors",
            "traincharacter_137_1739168506499___43.safetensors",
            "traincharacter_137_1739169699018___43.safetensors",
            "traincharacter_137_1739171058622___43.safetensors",
            "traincharacter_137_1739344897746___43.safetensors",
            "traincharacter_137_1742883924043___43.safetensors",
            "traincharacter_14_1739014615373___43.safetensors",
            "traincharacter_14_1739160935297___43.safetensors",
            "traincharacter_14_1739175847049___43.safetensors",
            "traincharacter_14_1741659572783___43.safetensors",
            "traincharacter_14_1741664718995___43.safetensors",
            "traincharacter_170_1743080647770___43.safetensors",
            "traincharacter_173914_1736449808429___43.safetensors",
            "traincharacter_173914_1736452926952___43.safetensors",
            "traincharacter_174_1729834988364___43.safetensors",
            "traincharacter_174_1730204580704___43.safetensors",
            "traincharacter_174_1730362966512___43.safetensors",
            "traincharacter_174_1730368827575___43.safetensors",
            "traincharacter_174_1730438939932___43.safetensors",
            "traincharacter_221_1739171778072___43.safetensors",
            "traincharacter_350_1739178010520___43.safetensors",
            "traincharacter_356_1745301464239___43.safetensors",
            "traincharacter_356_1745480181749___43.safetensors",
            "traincharacter_356_1745502503641___43.safetensors",
            "traincharacter_356_1745505555645___43.safetensors",
            "traincharacter_356_1745546336311___43.safetensors",
            "traincharacter_356_1745551739875___43.safetensors",
            "traincharacter_356_1745563320187___43.safetensors",
            "traincharacter_356_1745570134928___43.safetensors",
            "traincharacter_356_1745571044127___43.safetensors",
            "traincharacter_356_1745572721892___43.safetensors",
            "traincharacter_356_1745580884440___43.safetensors",
            "traincharacter_356_1745583947799___43.safetensors",
            "traincharacter_356_1745682136621___43.safetensors",
            "traincharacter_8300432_1736465990149___43.safetensors",
            "traincharacter_8843184_1736463217068___43.safetensors",
            "traincharacter_9371602_1736471137735___43.safetensors",
            "traincharacter_9439241_1736428310741___43.safetensors",
            "traincharacter_9502609_1736454684051___43.safetensors",
            "traincharacter_9525841_1736475431269___43.safetensors",
            "traincharacter_9533088_1736247249945___43.safetensors",
            "traincharacter_9537296_1736463072375___43.safetensors",
            "traincharacter_9539094_1736331861415___43.safetensors",
            "traincharacter_9542422_1736452985808___43.safetensors",
            "traincharacter_9543179_1736318286982___43.safetensors",
            "traincharacter_9543810_1736421065660___43.safetensors",
            "traincharacter_9543810_1736422707294___43.safetensors",
            "traincharacter_9543861_1736430972289___43.safetensors",
            "traincharacter_9551229_1736469337488___43.safetensors",
            "traincharacter_9552941_1736477461915___43.safetensors",
            "traincharacter_9980904_1730367419819___43.safetensors",
            "traincharacter_9980904_1737456983812___43.safetensors",
            "traincharacter_9980904_1737512255560___43.safetensors",
            "traincharacter_9980904_1737515373163___43.safetensors",
            "traincharacter_9980904_1737517682450___43.safetensors",
            "traincharacter_9980904_1737522608660___43.safetensors",
            "traincharacter_9980904_1737524171747___43.safetensors",
            "traincharacter_9980904_1742386638631___43.safetensors",
            "traincharacter_9980909_1739169862104___43.safetensors",
            "traincharacter_9980909_1739184266056___43.safetensors",
            "traincharacter_9980909_1739240918975___43.safetensors",
            "traincharacter_9980909_1739241315177___43.safetensors",
            "traincharacter_9980909_1739345564940___43.safetensors",
            "traincharacter_9980936_1730203022986___43.safetensors",
            "traincharacter_9980936_1730364787849___43.safetensors",
            "traincharacter_9980936_1730440801154___43.safetensors",
            "traincharacter_9980936_1730442621853___43.safetensors",
            "traincharacter_9980948_1742820777578___43.safetensors",
            "traincharacter_9980951_1739172068778___43.safetensors",
            "traincharacter_9981035_1729766817141___43.safetensors",
            "traincharacter_9981035_1729837329098___43.safetensors",
            "traincharacter_9981105_1736336455952___43.safetensors",
            "traincharacter_9981105_1739003026317___43.safetensors",
            "traincharacter_9981105_1739239714542___43.safetensors",
            "traincharacter_9981105_1741594415338___43.safetensors",
            "traincharacter_998115989145_1744964308312___43.safetensors",
            "traincharacter_998115989145_1744972394363___43.safetensors",
            "traincharacter_998115989351_1742898342784___43.safetensors",
            "traincharacter_998115989351_1742966030740___43.safetensors",
            "traincharacter_998115989351_1742970326932___43.safetensors",
            "traincharacter_998115989351_1742987386150___43.safetensors",
            "traincharacter_998115989360_1742968991687___43.safetensors",
            "traincharacter_998115989383_1742363876023___43.safetensors",
            "traincharacter_998115989383_1744941356841___43.safetensors",
            "traincharacter_998115989383_1745228202111___43.safetensors",
            "traincharacter_998115989383_1745483221476___43.safetensors",
            "traincharacter_998115989469_1745290344056___43.safetensors",
            "traincharacter_998115989469_1745390282266___43.safetensors",
            "tropicalStyle_FLUX_v0.safetensors",
            "ukiyoe_FLUXIPH_v0.safetensors",
            "vintage_sticker.safetensors",
            "watercolor_FLUXIPH_v0.safetensors",
            "watercolor_FLUX_v0.safetensors",
            "wild_logo.safetensors",
            "woodAnimal_FLUXIPH_v0.safetensors",
            "woodAnimal_FLUX_v2.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "LoraLoader",
    "display_name": "Load LoRA",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CLIPLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "EVA02_CLIP_L_336_psz14_s6B.pt",
            "ViT-L-14-TEXT-detail-improved-hiT-GmP-TE-only-HF.safetensors",
            "clip_l.safetensors",
            "t5xxl_fp16.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "type": [
          [
            "stable_diffusion",
            "stable_cascade",
            "sd3",
            "stable_audio"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "type"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPLoader",
    "display_name": "Load CLIP",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "UNETLoader": {
    "input": {
      "required": {
        "unet_name": [
          [
            "flux-dev-fp8.safetensors",
            "flux1-dev.sft",
            "flux1-fill-dev.safetensors",
            "flux1-schnell.sft",
            "models--mit-han-lab--svdq-int4-flux.1-dev/snapshots/1357abfc3979e1036f1e246f2398f814de245d20/transformer_blocks.safetensors",
            "models--mit-han-lab--svdq-int4-flux.1-dev/snapshots/1357abfc3979e1036f1e246f2398f814de245d20/unquantized_layers.safetensors",
            "pixelwave_03_dev_svdquant/transformer_blocks.safetensors",
            "pixelwave_03_dev_svdquant/unquantized_layers.safetensors",
            "pixelwave_flux1_dev_fp8_03.safetensors"
          ]
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "weight_dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNETLoader",
    "display_name": "Load Diffusion Model",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "DualCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "EVA02_CLIP_L_336_psz14_s6B.pt",
            "ViT-L-14-TEXT-detail-improved-hiT-GmP-TE-only-HF.safetensors",
            "clip_l.safetensors",
            "t5xxl_fp16.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "EVA02_CLIP_L_336_psz14_s6B.pt",
            "ViT-L-14-TEXT-detail-improved-hiT-GmP-TE-only-HF.safetensors",
            "clip_l.safetensors",
            "t5xxl_fp16.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "type": [
          [
            "sdxl",
            "sd3",
            "flux"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "type"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "DualCLIPLoader",
    "display_name": "DualCLIPLoader",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image"
      ]
    },
    "output": [
      "CLIP_VISION_OUTPUT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION_OUTPUT"
    ],
    "name": "CLIPVisionEncode",
    "display_name": "CLIP Vision Encode",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "StyleModelApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApply",
    "display_name": "Apply Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/style_model",
    "output_node": false
  },
  "unCLIPConditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "clip_vision_output",
        "strength",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "unCLIPConditioning",
    "display_name": "unCLIPConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ControlNetApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ControlNetApply",
    "display_name": "Apply ControlNet (OLD)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "ControlNetApplyAdvanced": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "vae"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplyAdvanced",
    "display_name": "Apply ControlNet",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetLoader": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "alimama-FLUX-Controlnet-inpainting-beta.safetensors",
            "depthanything_v2_HQ_LR_5e5_BS_2_resol_aspect_ratio_controlnet_depth_8_MaxKernel_5_MinKernel_3_AugRatio_0_5500.bin",
            "line_combo_v2_HQ_22_LR_5e-05_BS_2_resol_aspect_ratio_controlnet_depth_8_MaxKernel_7_MinKernel_3_AugRatio_0.75_16500.bin",
            "line_combo_v2_HQ_LR_5e-05_BS_2_resol_aspect_ratio_controlnet_depth_2_MaxKernel_7_MinKernel_3_AugRatio_0.75/pipeline-8000.bin",
            "t_o_alimama_ft10_9500.safetensors",
            "t_o_alimama_ft8_4500.safetensors",
            "t_o_alimama_ft9_10500.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ControlNetLoader",
    "display_name": "Load ControlNet Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "DiffControlNetLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "control_net_name": [
          [
            "alimama-FLUX-Controlnet-inpainting-beta.safetensors",
            "depthanything_v2_HQ_LR_5e5_BS_2_resol_aspect_ratio_controlnet_depth_8_MaxKernel_5_MinKernel_3_AugRatio_0_5500.bin",
            "line_combo_v2_HQ_22_LR_5e-05_BS_2_resol_aspect_ratio_controlnet_depth_8_MaxKernel_7_MinKernel_3_AugRatio_0.75_16500.bin",
            "line_combo_v2_HQ_LR_5e-05_BS_2_resol_aspect_ratio_controlnet_depth_2_MaxKernel_7_MinKernel_3_AugRatio_0.75/pipeline-8000.bin",
            "t_o_alimama_ft10_9500.safetensors",
            "t_o_alimama_ft8_4500.safetensors",
            "t_o_alimama_ft9_10500.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "DiffControlNetLoader",
    "display_name": "Load ControlNet Model (diff)",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "StyleModelLoader": {
    "input": {
      "required": {
        "style_model_name": [
          [
            "flux1-redux-dev.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style_model_name"
      ]
    },
    "output": [
      "STYLE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STYLE_MODEL"
    ],
    "name": "StyleModelLoader",
    "display_name": "Load Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "CLIPVisionLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "google-siglip-so400m-patch14-384/model.safetensors",
            "models--google--siglip-so400m-patch14-384/snapshots/9fdffc58afc957d1a03a25b10dba0329ab15c2a3/model.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIPVisionLoader",
    "display_name": "Load CLIP Vision",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "VAEDecodeTiled": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tile_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecodeTiled",
    "display_name": "VAE Decode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "VAEEncodeTiled": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "tile_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeTiled",
    "display_name": "VAE Encode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "unCLIPCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "name": "unCLIPCheckpointLoader",
    "display_name": "unCLIPCheckpointLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENLoader": {
    "input": {
      "required": {
        "gligen_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "gligen_name"
      ]
    },
    "output": [
      "GLIGEN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GLIGEN"
    ],
    "name": "GLIGENLoader",
    "display_name": "GLIGENLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENTextBoxApply": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "clip",
        "gligen_textbox_model",
        "text",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "GLIGENTextBoxApply",
    "display_name": "GLIGENTextBoxApply",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/gligen",
    "output_node": false
  },
  "InpaintModelConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels",
        "mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InpaintModelConditioning",
    "display_name": "InpaintModelConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "CheckpointLoader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoader",
    "display_name": "Load Checkpoint With Config (DEPRECATED)",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false,
    "deprecated": true
  },
  "DiffusersLoader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "DiffusersLoader",
    "display_name": "DiffusersLoader",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders/deprecated",
    "output_node": false
  },
  "LoadLatent": {
    "input": {
      "required": {
        "latent": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LoadLatent",
    "display_name": "LoadLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "SaveLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLatent",
    "display_name": "SaveLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": true
  },
  "ConditioningZeroOut": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningZeroOut",
    "display_name": "ConditioningZeroOut",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ConditioningSetTimestepRange": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "start",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetTimestepRange",
    "display_name": "ConditioningSetTimestepRange",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "LoraLoaderModelOnly": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "1990s_FLUXIPH_v0.safetensors",
            "1990s_FLUXIP_v0.safetensors",
            "1990s_FLUX_v0.safetensors",
            "3Drandering_FLUX_v0.safetensors",
            "3dPixar_FLUXIPH_v0.safetensors",
            "3dPixar_FLUX_v0.safetensors",
            "Americanstory_FLUXIPH_v0.safetensors",
            "Atmosphere_FLUXIPH_v0.safetensors",
            "FLUX-dev-lora-AntiBlur.safetensors",
            "FLUX-dev-lora-add_details.safetensors",
            "Graffiti_Splash_xl_1024_5p-step00000500.safetensors",
            "Hyper-FLUX.1-dev-16steps-lora.safetensors",
            "Hyper-FLUX.1-dev-8steps-lora.safetensors",
            "Ukiyoe_FLUX_v0.safetensors",
            "a_20241120_25.safetensors",
            "a_20241122_74.safetensors",
            "americanStory_FLUX_v0.safetensors",
            "americanStory_RVXLIPHP_v0.safetensors",
            "animateLogo_FLUXIPH_v0.safetensors",
            "animateLogo_V2.safetensors",
            "arcane_FLUXIPH_v0.safetensors",
            "arcane_Flux_v0.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43.safetensors",
            "balloons_FLUX_v0.safetensors",
            "boldEAsy1-3_FLUXIPH_v0-step00000500.safetensors",
            "boldEAsy1-3_FLUXIPH_v0.safetensors",
            "boldEAsy4-6_FLUXIPH_v0.safetensors",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000.safetensors",
            "camera_control_lora_scale_v6_rank32-step00001000.safetensors",
            "camera_control_lora_scale_v7_rank32_wide-step00002000.safetensors",
            "caricature_FLUXIPH_v0.safetensors",
            "cartoon_lilman.safetensors",
            "catgirl_FLUX_10p_v1-step00000500.safetensors",
            "characterSheet_Flux_v0.safetensors",
            "childrenIllustration_FLUXIPH_v0.safetensors",
            "childrenIllustration_FLUX_v0.safetensors",
            "colorfulFelt_FLUX_1024_v0.safetensors",
            "colorfulFelt_FLUX_v0.safetensors",
            "cowcat_flux_5p_v1-step00000500.safetensors",
            "crossHatch_FLUXIPH_v1.safetensors",
            "cuteIcon_FLUXIPH_v0.safetensors",
            "cuteIcon_FLUX_v0.safetensors",
            "dashedLine_FLUX_v0.safetensors",
            "diamondJewelry_FLUX_v0.safetensors",
            "disney_FLUX_v0.safetensors",
            "expandIcon_FLUXIPH_v0.safetensors",
            "expandIcon_FLUX_v0.safetensors",
            "faceToon_FLUXIPH_v0.safetensors",
            "faceToon_FLUX_v0.safetensors",
            "football_FLUX_768_head.safetensors",
            "fruitWater_FLUXIPH_v0.safetensors",
            "fruitWater_FLUX_v0.safetensors",
            "geometricStyle_FLUXIPH_v0.safetensors",
            "geometricStyle_FLUX_v0.safetensors",
            "ghibliStyle_FLUXIPH_v0.safetensors",
            "graffiti_FLUXIPH_v0.safetensors",
            "graffiti_FLUX_v0.safetensors",
            "gtaComic_FLUXIPH_v0.safetensors",
            "gtaMiamiFlux_v0.safetensors",
            "hyperbolicPortrait_FLUXIPH_v0.safetensors",
            "hyperbolicPortrait_FLUXIP_v0.safetensors",
            "hyperbolicPortrait_FLUX_v0.safetensors",
            "illustration_character.safetensors",
            "impasto_comics.safetensors",
            "jellycat_FLUXIPH_v0.safetensors",
            "jellycat_FLUX_v0.safetensors",
            "jojo_FLUXIPH_v0.safetensors",
            "jojo_FLUX_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v3.safetensors",
            "joyfulCartoon_FLUXIPH_v4.safetensors",
            "joyfulCartoon_FLUX_v0.safetensors",
            "koda_FLUX_v0.safetensors",
            "lega_FLUXIPH_v0.safetensors",
            "lega_FLUX_v0.safetensors",
            "lineIconAnimal_FLUX_v0.safetensors",
            "lineartAnimal_FLUXIPH_v0.safetensors",
            "lineartIcon_FLUXIPH_v0.safetensors",
            "lipboy-step00000500.safetensors",
            "liveBroadcast_FLUX_v0.safetensors",
            "loveIcon_FLUX_v0.safetensors",
            "movie_FLUX_v0.safetensors",
            "paperCutout_FLUX_v0.safetensors",
            "pastelDeli_FLUX_v0.safetensors",
            "puppet_FLUX_v0.safetensors",
            "realism_FLUX_v0.safetensors",
            "surrealismArt_FLUX_v0.safetensors",
            "tarotLine_FLUXIPH_v0.safetensors",
            "test_flux_lora11.12.safetensors",
            "test_pixelwave_v1.safetensors",
            "tiltshiftPhotography_FLUXIPH_v0.safetensors",
            "traincharacter_100045_1732184393884___43.safetensors",
            "traincharacter_100045_1732186691083___43.safetensors",
            "traincharacter_100050_1737359866820___43.safetensors",
            "traincharacter_137_1739158654635___43.safetensors",
            "traincharacter_137_1739167140848___43.safetensors",
            "traincharacter_137_1739168506499___43.safetensors",
            "traincharacter_137_1739169699018___43.safetensors",
            "traincharacter_137_1739171058622___43.safetensors",
            "traincharacter_137_1739344897746___43.safetensors",
            "traincharacter_137_1742883924043___43.safetensors",
            "traincharacter_14_1739014615373___43.safetensors",
            "traincharacter_14_1739160935297___43.safetensors",
            "traincharacter_14_1739175847049___43.safetensors",
            "traincharacter_14_1741659572783___43.safetensors",
            "traincharacter_14_1741664718995___43.safetensors",
            "traincharacter_170_1743080647770___43.safetensors",
            "traincharacter_173914_1736449808429___43.safetensors",
            "traincharacter_173914_1736452926952___43.safetensors",
            "traincharacter_174_1729834988364___43.safetensors",
            "traincharacter_174_1730204580704___43.safetensors",
            "traincharacter_174_1730362966512___43.safetensors",
            "traincharacter_174_1730368827575___43.safetensors",
            "traincharacter_174_1730438939932___43.safetensors",
            "traincharacter_221_1739171778072___43.safetensors",
            "traincharacter_350_1739178010520___43.safetensors",
            "traincharacter_356_1745301464239___43.safetensors",
            "traincharacter_356_1745480181749___43.safetensors",
            "traincharacter_356_1745502503641___43.safetensors",
            "traincharacter_356_1745505555645___43.safetensors",
            "traincharacter_356_1745546336311___43.safetensors",
            "traincharacter_356_1745551739875___43.safetensors",
            "traincharacter_356_1745563320187___43.safetensors",
            "traincharacter_356_1745570134928___43.safetensors",
            "traincharacter_356_1745571044127___43.safetensors",
            "traincharacter_356_1745572721892___43.safetensors",
            "traincharacter_356_1745580884440___43.safetensors",
            "traincharacter_356_1745583947799___43.safetensors",
            "traincharacter_356_1745682136621___43.safetensors",
            "traincharacter_8300432_1736465990149___43.safetensors",
            "traincharacter_8843184_1736463217068___43.safetensors",
            "traincharacter_9371602_1736471137735___43.safetensors",
            "traincharacter_9439241_1736428310741___43.safetensors",
            "traincharacter_9502609_1736454684051___43.safetensors",
            "traincharacter_9525841_1736475431269___43.safetensors",
            "traincharacter_9533088_1736247249945___43.safetensors",
            "traincharacter_9537296_1736463072375___43.safetensors",
            "traincharacter_9539094_1736331861415___43.safetensors",
            "traincharacter_9542422_1736452985808___43.safetensors",
            "traincharacter_9543179_1736318286982___43.safetensors",
            "traincharacter_9543810_1736421065660___43.safetensors",
            "traincharacter_9543810_1736422707294___43.safetensors",
            "traincharacter_9543861_1736430972289___43.safetensors",
            "traincharacter_9551229_1736469337488___43.safetensors",
            "traincharacter_9552941_1736477461915___43.safetensors",
            "traincharacter_9980904_1730367419819___43.safetensors",
            "traincharacter_9980904_1737456983812___43.safetensors",
            "traincharacter_9980904_1737512255560___43.safetensors",
            "traincharacter_9980904_1737515373163___43.safetensors",
            "traincharacter_9980904_1737517682450___43.safetensors",
            "traincharacter_9980904_1737522608660___43.safetensors",
            "traincharacter_9980904_1737524171747___43.safetensors",
            "traincharacter_9980904_1742386638631___43.safetensors",
            "traincharacter_9980909_1739169862104___43.safetensors",
            "traincharacter_9980909_1739184266056___43.safetensors",
            "traincharacter_9980909_1739240918975___43.safetensors",
            "traincharacter_9980909_1739241315177___43.safetensors",
            "traincharacter_9980909_1739345564940___43.safetensors",
            "traincharacter_9980936_1730203022986___43.safetensors",
            "traincharacter_9980936_1730364787849___43.safetensors",
            "traincharacter_9980936_1730440801154___43.safetensors",
            "traincharacter_9980936_1730442621853___43.safetensors",
            "traincharacter_9980948_1742820777578___43.safetensors",
            "traincharacter_9980951_1739172068778___43.safetensors",
            "traincharacter_9981035_1729766817141___43.safetensors",
            "traincharacter_9981035_1729837329098___43.safetensors",
            "traincharacter_9981105_1736336455952___43.safetensors",
            "traincharacter_9981105_1739003026317___43.safetensors",
            "traincharacter_9981105_1739239714542___43.safetensors",
            "traincharacter_9981105_1741594415338___43.safetensors",
            "traincharacter_998115989145_1744964308312___43.safetensors",
            "traincharacter_998115989145_1744972394363___43.safetensors",
            "traincharacter_998115989351_1742898342784___43.safetensors",
            "traincharacter_998115989351_1742966030740___43.safetensors",
            "traincharacter_998115989351_1742970326932___43.safetensors",
            "traincharacter_998115989351_1742987386150___43.safetensors",
            "traincharacter_998115989360_1742968991687___43.safetensors",
            "traincharacter_998115989383_1742363876023___43.safetensors",
            "traincharacter_998115989383_1744941356841___43.safetensors",
            "traincharacter_998115989383_1745228202111___43.safetensors",
            "traincharacter_998115989383_1745483221476___43.safetensors",
            "traincharacter_998115989469_1745290344056___43.safetensors",
            "traincharacter_998115989469_1745390282266___43.safetensors",
            "tropicalStyle_FLUX_v0.safetensors",
            "ukiyoe_FLUXIPH_v0.safetensors",
            "vintage_sticker.safetensors",
            "watercolor_FLUXIPH_v0.safetensors",
            "watercolor_FLUX_v0.safetensors",
            "wild_logo.safetensors",
            "woodAnimal_FLUXIPH_v0.safetensors",
            "woodAnimal_FLUX_v2.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "strength_model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LoraLoaderModelOnly",
    "display_name": "LoraLoaderModelOnly",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "LatentAdd": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentAdd",
    "display_name": "LatentAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentSubtract": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentSubtract",
    "display_name": "LatentSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentMultiply": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "multiplier"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentMultiply",
    "display_name": "LatentMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentInterpolate": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "ratio"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentInterpolate",
    "display_name": "LatentInterpolate",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentBatch": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatch",
    "display_name": "LatentBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/batch",
    "output_node": false
  },
  "LatentBatchSeedBehavior": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "seed_behavior": [
          [
            "random",
            "fixed"
          ],
          {
            "default": "fixed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "seed_behavior"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatchSeedBehavior",
    "display_name": "LatentBatchSeedBehavior",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentApplyOperation": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "operation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentApplyOperation",
    "display_name": "LatentApplyOperation",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentApplyOperationCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "operation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LatentApplyOperationCFG",
    "display_name": "LatentApplyOperationCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationTonemapReinhard": {
    "input": {
      "required": {
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiplier"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationTonemapReinhard",
    "display_name": "LatentOperationTonemapReinhard",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationSharpen": {
    "input": {
      "required": {
        "sharpen_radius": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationSharpen",
    "display_name": "LatentOperationSharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "HypernetworkLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "hypernetwork_name": [
          []
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hypernetwork_name",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HypernetworkLoader",
    "display_name": "HypernetworkLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_hypernetwork",
    "category": "loaders",
    "output_node": false
  },
  "UpscaleModelLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x-PBRify_UpscalerDAT2_V1.pth",
            "4xFaceUpLDAT.pth",
            "RealESRGAN_x2plus.pth",
            "RealESRGAN_x4plus.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "UpscaleModelLoader",
    "display_name": "Load Upscale Model",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "loaders",
    "output_node": false
  },
  "ImageUpscaleWithModel": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModel",
    "display_name": "Upscale Image (using Model)",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageBlend": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blend_mode": [
          [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "difference"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "blend_factor",
        "blend_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlend",
    "display_name": "ImageBlend",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageBlur": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "blur_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "blur_radius",
        "sigma"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlur",
    "display_name": "ImageBlur",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageQuantize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "none",
            "floyd-steinberg",
            "bayer-2",
            "bayer-4",
            "bayer-8",
            "bayer-16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "dither"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageQuantize",
    "display_name": "ImageQuantize",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageSharpen": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSharpen",
    "display_name": "ImageSharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageScaleToTotalPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "megapixels": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "megapixels"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleToTotalPixels",
    "display_name": "ImageScaleToTotalPixels",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/upscaling",
    "output_node": false
  },
  "LatentCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "LATENT"
        ],
        "source": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCompositeMasked",
    "display_name": "LatentCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "latent",
    "output_node": false
  },
  "ImageCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeMasked",
    "display_name": "ImageCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "image",
    "output_node": false
  },
  "MaskToImage": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MaskToImage",
    "display_name": "Convert Mask to Image",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue",
            "alpha"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageToMask",
    "display_name": "Convert Image to Mask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageColorToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageColorToMask",
    "display_name": "ImageColorToMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "SolidMask": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SolidMask",
    "display_name": "SolidMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "InvertMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "InvertMask",
    "display_name": "InvertMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "CropMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CropMask",
    "display_name": "CropMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskComposite": {
    "input": {
      "required": {
        "destination": [
          "MASK"
        ],
        "source": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "operation": [
          [
            "multiply",
            "add",
            "subtract",
            "and",
            "or",
            "xor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "operation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskComposite",
    "display_name": "MaskComposite",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "FeatherMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "left",
        "top",
        "right",
        "bottom"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "FeatherMask",
    "display_name": "FeatherMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "GrowMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "tapered_corners"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "GrowMask",
    "display_name": "GrowMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ThresholdMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "value": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ThresholdMask",
    "display_name": "ThresholdMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "PorterDuffImageComposite": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "source_alpha": [
          "MASK"
        ],
        "destination": [
          "IMAGE"
        ],
        "destination_alpha": [
          "MASK"
        ],
        "mode": [
          [
            "ADD",
            "CLEAR",
            "DARKEN",
            "DST",
            "DST_ATOP",
            "DST_IN",
            "DST_OUT",
            "DST_OVER",
            "LIGHTEN",
            "MULTIPLY",
            "OVERLAY",
            "SCREEN",
            "SRC",
            "SRC_ATOP",
            "SRC_IN",
            "SRC_OUT",
            "SRC_OVER",
            "XOR"
          ],
          {
            "default": "DST"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "source_alpha",
        "destination",
        "destination_alpha",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PorterDuffImageComposite",
    "display_name": "Porter-Duff Image Composite",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "SplitImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SplitImageWithAlpha",
    "display_name": "Split Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "JoinImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JoinImageWithAlpha",
    "display_name": "Join Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "RebatchLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RebatchLatents",
    "display_name": "Rebatch Latents",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "latent/batch",
    "output_node": false
  },
  "RebatchImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RebatchImages",
    "display_name": "Rebatch Images",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "image/batch",
    "output_node": false
  },
  "ModelMergeSimple": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSimple",
    "display_name": "ModelMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeBlocks": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "input": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "input",
        "middle",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeBlocks",
    "display_name": "ModelMergeBlocks",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeSubtract": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSubtract",
    "display_name": "ModelMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeAdd": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAdd",
    "display_name": "ModelMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CheckpointSave",
    "display_name": "Save Checkpoint",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "CLIPMergeSimple": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "ratio"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSimple",
    "display_name": "CLIPMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeSubtract": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "multiplier"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSubtract",
    "display_name": "CLIPMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeAdd": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeAdd",
    "display_name": "CLIPMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPSave": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "clip/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "clip",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CLIPSave",
    "display_name": "CLIPSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "VAESave": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "vae/ComfyUI_vae"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VAESave",
    "display_name": "VAESave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ModelSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSave",
    "display_name": "ModelSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "TomePatchModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TomePatchModel",
    "display_name": "TomePatchModel",
    "description": "",
    "python_module": "comfy_extras.nodes_tomesd",
    "category": "model_patches/unet",
    "output_node": false
  },
  "CLIPTextEncodeSDXLRefiner": {
    "input": {
      "required": {
        "ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "ascore",
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXLRefiner",
    "display_name": "CLIPTextEncodeSDXLRefiner",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeSDXL": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ],
        "text_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "text_g",
        "clip",
        "text_l"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL",
    "display_name": "CLIPTextEncodeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "Canny": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "low_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ],
        "high_threshold": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "low_threshold",
        "high_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Canny",
    "display_name": "Canny",
    "description": "",
    "python_module": "comfy_extras.nodes_canny",
    "category": "image/preprocessors",
    "output_node": false
  },
  "FreeU": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU",
    "display_name": "FreeU",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "FreeU_V2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.3,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.4,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU_V2",
    "display_name": "FreeU_V2",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "SamplerCustom": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "cfg",
        "positive",
        "negative",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustom",
    "display_name": "SamplerCustom",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "BasicScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scheduler",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BasicScheduler",
    "display_name": "BasicScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KarrasScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "KarrasScheduler",
    "display_name": "KarrasScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "ExponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "ExponentialScheduler",
    "display_name": "ExponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "PolyexponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "PolyexponentialScheduler",
    "display_name": "PolyexponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LaplaceScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "mu": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "mu",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LaplaceScheduler",
    "display_name": "LaplaceScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "VPScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "beta_d",
        "beta_min",
        "eps_s"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "VPScheduler",
    "display_name": "VPScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "BetaSamplingScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "alpha",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BetaSamplingScheduler",
    "display_name": "BetaSamplingScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SDTurboScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SDTurboScheduler",
    "display_name": "SDTurboScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KSamplerSelect": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "KSamplerSelect",
    "display_name": "KSamplerSelect",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestral",
    "display_name": "SamplerEulerAncestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestralCFGPP": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestralCFGPP",
    "display_name": "SamplerEulerAncestralCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerLMS": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLMS",
    "display_name": "SamplerLMS",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_3M_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_3M_SDE",
    "display_name": "SamplerDPMPP_3M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2M_SDE": {
    "input": {
      "required": {
        "solver_type": [
          [
            "midpoint",
            "heun"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "solver_type",
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2M_SDE",
    "display_name": "SamplerDPMPP_2M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "r": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "r",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_SDE",
    "display_name": "SamplerDPMPP_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2S_Ancestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2S_Ancestral",
    "display_name": "SamplerDPMPP_2S_Ancestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMAdaptative": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 3,
            "min": 2,
            "max": 3
          }
        ],
        "rtol": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "atol": [
          "FLOAT",
          {
            "default": 0.0078,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "h_init": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "pcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "icoeff": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "dcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "accept_safety": [
          "FLOAT",
          {
            "default": 0.81,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order",
        "rtol",
        "atol",
        "h_init",
        "pcoeff",
        "icoeff",
        "dcoeff",
        "accept_safety",
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMAdaptative",
    "display_name": "SamplerDPMAdaptative",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SplitSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "step"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmas",
    "display_name": "SplitSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SplitSigmasDenoise": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmasDenoise",
    "display_name": "SplitSigmasDenoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "FlipSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FlipSigmas",
    "display_name": "FlipSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "CFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "CFGGuider",
    "display_name": "CFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "DualCFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond1": [
          "CONDITIONING"
        ],
        "cond2": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg_conds": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "cfg_cond2_negative": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond1",
        "cond2",
        "negative",
        "cfg_conds",
        "cfg_cond2_negative"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "DualCFGGuider",
    "display_name": "DualCFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "BasicGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "BasicGuider",
    "display_name": "BasicGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "RandomNoise": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "RandomNoise",
    "display_name": "RandomNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "DisableNoise": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "DisableNoise",
    "display_name": "DisableNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "AddNoise": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "noise": [
          "NOISE"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "noise",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "AddNoise",
    "display_name": "AddNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "_for_testing/custom_sampling/noise",
    "output_node": false
  },
  "SamplerCustomAdvanced": {
    "input": {
      "required": {
        "noise": [
          "NOISE"
        ],
        "guider": [
          "GUIDER"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "noise",
        "guider",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustomAdvanced",
    "display_name": "SamplerCustomAdvanced",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "HyperTile": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tile_size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 2048
          }
        ],
        "swap_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 128
          }
        ],
        "max_depth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10
          }
        ],
        "scale_depth": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tile_size",
        "swap_size",
        "max_depth",
        "scale_depth"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HyperTile",
    "display_name": "HyperTile",
    "description": "",
    "python_module": "comfy_extras.nodes_hypertile",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ModelSamplingDiscrete": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "eps",
            "v_prediction",
            "lcm",
            "x0"
          ]
        ],
        "zsnr": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "zsnr"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingDiscrete",
    "display_name": "ModelSamplingDiscrete",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousEDM": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction",
            "edm_playground_v2.5",
            "eps"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 120.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.002,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousEDM",
    "display_name": "ModelSamplingContinuousEDM",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 500.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.03,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousV",
    "display_name": "ModelSamplingContinuousV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingStableCascade": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingStableCascade",
    "display_name": "ModelSamplingStableCascade",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3",
    "display_name": "ModelSamplingSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingAuraFlow": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 1.73,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingAuraFlow",
    "display_name": "ModelSamplingAuraFlow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingFlux": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 1.15,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift",
        "width",
        "height"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingFlux",
    "display_name": "ModelSamplingFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "RescaleCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RescaleCFG",
    "display_name": "RescaleCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "PatchModelAddDownscale": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 9.0,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelAddDownscale",
    "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)",
    "description": "",
    "python_module": "comfy_extras.nodes_model_downscale",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ImageCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCrop",
    "display_name": "ImageCrop",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "RepeatImageBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RepeatImageBatch",
    "display_name": "RepeatImageBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "ImageFromBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4095
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch",
    "display_name": "ImageFromBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "SaveAnimatedWEBP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "lossless": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "quality": [
          "INT",
          {
            "default": 80,
            "min": 0,
            "max": 100
          }
        ],
        "method": [
          [
            "default",
            "fastest",
            "slowest"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "lossless",
        "quality",
        "method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedWEBP",
    "display_name": "SaveAnimatedWEBP",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "SaveAnimatedPNG": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "compress_level": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "compress_level"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedPNG",
    "display_name": "SaveAnimatedPNG",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "ImageOnlyCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "name": "ImageOnlyCheckpointLoader",
    "display_name": "Image Only Checkpoint Loader (img2vid model)",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "loaders/video_models",
    "output_node": false
  },
  "SVD_img2vid_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SVD_img2vid_Conditioning",
    "display_name": "SVD_img2vid_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VideoLinearCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoLinearCFGGuidance",
    "display_name": "VideoLinearCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "VideoTriangleCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoTriangleCFGGuidance",
    "display_name": "VideoTriangleCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "ImageOnlyCheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageOnlyCheckpointSave",
    "display_name": "ImageOnlyCheckpointSave",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "SelfAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -2.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale",
        "blur_sigma"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SelfAttentionGuidance",
    "display_name": "Self-Attention Guidance",
    "description": "",
    "python_module": "comfy_extras.nodes_sag",
    "category": "_for_testing",
    "output_node": false
  },
  "PerpNeg": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "empty_conditioning",
        "neg_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerpNeg",
    "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false,
    "deprecated": true
  },
  "PerpNegGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "empty_conditioning",
        "cfg",
        "neg_scale"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "PerpNegGuider",
    "display_name": "PerpNegGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false
  },
  "StableZero123_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning",
    "display_name": "StableZero123_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "StableZero123_Conditioning_Batched": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "elevation_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth",
        "elevation_batch_increment",
        "azimuth_batch_increment"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning_Batched",
    "display_name": "StableZero123_Conditioning_Batched",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SV3D_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -90.0,
            "max": 90.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "elevation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_Conditioning",
    "display_name": "SV3D_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SD_4XUpscale_Conditioning": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "scale_ratio": [
          "FLOAT",
          {
            "default": 4.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "positive",
        "negative",
        "scale_ratio",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SD_4XUpscale_Conditioning",
    "display_name": "SD_4XUpscale_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_sdupscale",
    "category": "conditioning/upscale_diffusion",
    "output_node": false
  },
  "PhotoMakerLoader": {
    "input": {
      "required": {
        "photomaker_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker_model_name"
      ]
    },
    "output": [
      "PHOTOMAKER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PHOTOMAKER"
    ],
    "name": "PhotoMakerLoader",
    "display_name": "PhotoMakerLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "PhotoMakerEncode": {
    "input": {
      "required": {
        "photomaker": [
          "PHOTOMAKER"
        ],
        "image": [
          "IMAGE"
        ],
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "photograph of photomaker"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker",
        "image",
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "PhotoMakerEncode",
    "display_name": "PhotoMakerEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "CLIPTextEncodeControlnet": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "conditioning",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeControlnet",
    "display_name": "CLIPTextEncodeControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_cond",
    "category": "_for_testing/conditioning",
    "output_node": false
  },
  "Morphology": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "operation": [
          [
            "erode",
            "dilate",
            "open",
            "close",
            "gradient",
            "bottom_hat",
            "top_hat"
          ]
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 3,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "operation",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Morphology",
    "display_name": "ImageMorphology",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/postprocessing",
    "output_node": false
  },
  "StableCascade_EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "compression",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_EmptyLatentImage",
    "display_name": "StableCascade_EmptyLatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageB_Conditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "stage_c": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "stage_c"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StableCascade_StageB_Conditioning",
    "display_name": "StableCascade_StageB_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "conditioning/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageC_VAEEncode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "compression"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_StageC_VAEEncode",
    "display_name": "StableCascade_StageC_VAEEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_SuperResolutionControlnet": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "controlnet_input",
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_SuperResolutionControlnet",
    "display_name": "StableCascade_SuperResolutionControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "_for_testing/stable_cascade",
    "output_node": false,
    "experimental": true
  },
  "DifferentialDiffusion": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "DifferentialDiffusion",
    "display_name": "Differential Diffusion",
    "description": "",
    "python_module": "comfy_extras.nodes_differential_diffusion",
    "category": "_for_testing",
    "output_node": false
  },
  "InstructPixToPixConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InstructPixToPixConditioning",
    "display_name": "InstructPixToPixConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_ip2p",
    "category": "conditioning/instructpix2pix",
    "output_node": false
  },
  "ModelMergeSD1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD1",
    "display_name": "ModelMergeSD1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD2": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD2",
    "display_name": "ModelMergeSD2",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSDXL": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0",
        "input_blocks.1",
        "input_blocks.2",
        "input_blocks.3",
        "input_blocks.4",
        "input_blocks.5",
        "input_blocks.6",
        "input_blocks.7",
        "input_blocks.8",
        "middle_block.0",
        "middle_block.1",
        "middle_block.2",
        "output_blocks.0",
        "output_blocks.1",
        "output_blocks.2",
        "output_blocks.3",
        "output_blocks.4",
        "output_blocks.5",
        "output_blocks.6",
        "output_blocks.7",
        "output_blocks.8",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSDXL",
    "display_name": "ModelMergeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD3_2B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD3_2B",
    "display_name": "ModelMergeSD3_2B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeFlux1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "img_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "guidance_in": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "vector_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "txt_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "img_in.",
        "time_in.",
        "guidance_in",
        "vector_in.",
        "txt_in.",
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeFlux1",
    "display_name": "ModelMergeFlux1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "PerturbedAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerturbedAttentionGuidance",
    "display_name": "PerturbedAttentionGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_pag",
    "category": "model_patches/unet",
    "output_node": false
  },
  "AlignYourStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "SD1",
            "SDXL",
            "SVD"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 10,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "AlignYourStepsScheduler",
    "display_name": "AlignYourStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_align_your_steps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "UNetSelfAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetSelfAttentionMultiply",
    "display_name": "UNetSelfAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetCrossAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetCrossAttentionMultiply",
    "display_name": "UNetCrossAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "CLIPAttentionMultiply": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPAttentionMultiply",
    "display_name": "CLIPAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetTemporalAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "self_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "self_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "self_structural",
        "self_temporal",
        "cross_structural",
        "cross_temporal"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetTemporalAttentionMultiply",
    "display_name": "UNetTemporalAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "SamplerLCMUpscale": {
    "input": {
      "required": {
        "scale_ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "scale_steps": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "bislerp",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_ratio",
        "scale_steps",
        "upscale_method"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLCMUpscale",
    "display_name": "SamplerLCMUpscale",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerCFGpp": {
    "input": {
      "required": {
        "version": [
          [
            "regular",
            "alternative"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "version"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerCFGpp",
    "display_name": "SamplerEulerCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "_for_testing",
    "output_node": false
  },
  "WebcamCapture": {
    "input": {
      "required": {
        "image": [
          "WEBCAM",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "capture_on_queue": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "capture_on_queue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "WebcamCapture",
    "display_name": "Webcam Capture",
    "description": "",
    "python_module": "comfy_extras.nodes_webcam",
    "category": "image",
    "output_node": false
  },
  "EmptyLatentAudio": {
    "input": {
      "required": {
        "seconds": [
          "FLOAT",
          {
            "default": 47.6,
            "min": 1.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seconds",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentAudio",
    "display_name": "EmptyLatentAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEEncodeAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeAudio",
    "display_name": "VAEEncodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEDecodeAudio": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "VAEDecodeAudio",
    "display_name": "VAEDecodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "SaveAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudio",
    "display_name": "SaveAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "LoadAudio": {
    "input": {
      "required": {
        "audio": [
          [],
          {
            "audio_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "LoadAudio",
    "display_name": "LoadAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": false
  },
  "PreviewAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAudio",
    "display_name": "PreviewAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "TripleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "EVA02_CLIP_L_336_psz14_s6B.pt",
            "ViT-L-14-TEXT-detail-improved-hiT-GmP-TE-only-HF.safetensors",
            "clip_l.safetensors",
            "t5xxl_fp16.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "EVA02_CLIP_L_336_psz14_s6B.pt",
            "ViT-L-14-TEXT-detail-improved-hiT-GmP-TE-only-HF.safetensors",
            "clip_l.safetensors",
            "t5xxl_fp16.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ],
        "clip_name3": [
          [
            "EVA02_CLIP_L_336_psz14_s6B.pt",
            "ViT-L-14-TEXT-detail-improved-hiT-GmP-TE-only-HF.safetensors",
            "clip_l.safetensors",
            "t5xxl_fp16.safetensors",
            "t5xxl_fp8_e4m3fn.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "TripleCLIPLoader",
    "display_name": "TripleCLIPLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/loaders",
    "output_node": false
  },
  "EmptySD3LatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptySD3LatentImage",
    "display_name": "EmptySD3LatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "latent/sd3",
    "output_node": false
  },
  "CLIPTextEncodeSD3": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "empty_padding": [
          [
            "none",
            "empty_prompt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "empty_padding"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSD3",
    "display_name": "CLIPTextEncodeSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ControlNetApplySD3": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplySD3",
    "display_name": "Apply Controlnet with VAE",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "GITSScheduler": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "GITSScheduler",
    "display_name": "GITSScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_gits",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SetUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetUnionControlNetType",
    "display_name": "SetUnionControlNetType",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetInpaintingAliMamaApply": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "mask",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetInpaintingAliMamaApply",
    "display_name": "ControlNetInpaintingAliMamaApply",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "CLIPTextEncodeHunyuanDiT": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "bert": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "mt5xl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "bert",
        "mt5xl"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHunyuanDiT",
    "display_name": "CLIPTextEncodeHunyuanDiT",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeFlux": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "t5xxl",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeFlux",
    "display_name": "CLIPTextEncodeFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxGuidance",
    "display_name": "FluxGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "LoraSave": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_extracted_lora"
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "lora_type": [
          [
            "standard",
            "full_diff"
          ]
        ],
        "bias_diff": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "model_diff": [
          "MODEL",
          {
            "tooltip": "The ModelSubtract output to be converted to a lora."
          }
        ],
        "text_encoder_diff": [
          "CLIP",
          {
            "tooltip": "The CLIPSubtract output to be converted to a lora."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "rank",
        "lora_type",
        "bias_diff"
      ],
      "optional": [
        "model_diff",
        "text_encoder_diff"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraSave",
    "display_name": "Extract and Save Lora",
    "description": "",
    "python_module": "comfy_extras.nodes_lora_extract",
    "category": "_for_testing",
    "output_node": true
  },
  "TorchCompileModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModel",
    "display_name": "TorchCompileModel",
    "description": "",
    "python_module": "comfy_extras.nodes_torch_compile",
    "category": "_for_testing",
    "output_node": false,
    "experimental": true
  },
  "SamplersSUNoise": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "dpm_2_ancestral",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_2m_sde",
            "dpmpp_3m_sde"
          ]
        ],
        "noise_type": [
          [
            "standard",
            "multires"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name",
        "noise_type"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplersSUNoise",
    "display_name": "SamplersSUNoise",
    "description": "",
    "python_module": "custom_nodes.comfyui_seekoo_sunoise",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplersSUNoiseAdvanced": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "dpm_2_ancestral",
            "dpmpp_2s_ancestral",
            "dpmpp_sde",
            "dpmpp_2m_sde",
            "dpmpp_3m_sde"
          ]
        ],
        "noise_type": [
          [
            "standard",
            "multires"
          ]
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ],
        "solver_type": [
          [
            "midpoint",
            "heun"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "r": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name",
        "noise_type",
        "s_noise",
        "solver_type",
        "eta",
        "r"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplersSUNoiseAdvanced",
    "display_name": "SamplersSUNoiseAdvanced",
    "description": "",
    "python_module": "custom_nodes.comfyui_seekoo_sunoise",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SUNoiseLatent": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100,
            "step": 0.01
          }
        ],
        "noise_type": [
          [
            "standard",
            "multires"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed",
        "scale",
        "noise_type"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "SUNoiseLatent",
    "display_name": "SUNoiseLatent",
    "description": "",
    "python_module": "custom_nodes.comfyui_seekoo_sunoise",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "SaveImageWebsocket": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWebsocket",
    "display_name": "SaveImageWebsocket",
    "description": "",
    "python_module": "custom_nodes.websocket_image_save",
    "category": "api/image",
    "output_node": true
  },
  "CLIPTextEncodeSDXL+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "size_cond_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "size_cond_factor",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL+",
    "display_name": "🔧 SDXL CLIPTextEncode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ConditioningCombineMultiple+": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "conditioning_3": [
          "CONDITIONING"
        ],
        "conditioning_4": [
          "CONDITIONING"
        ],
        "conditioning_5": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ],
      "optional": [
        "conditioning_3",
        "conditioning_4",
        "conditioning_5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombineMultiple+",
    "display_name": "🔧 Cond Combine Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3NegativeConditioning+": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "SD3NegativeConditioning+",
    "display_name": "🔧 SD3 Negative Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "FluxAttentionSeeker+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_l_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "clip_l_0",
        "clip_l_1",
        "clip_l_2",
        "clip_l_3",
        "clip_l_4",
        "clip_l_5",
        "clip_l_6",
        "clip_l_7",
        "clip_l_8",
        "clip_l_9",
        "clip_l_10",
        "clip_l_11",
        "t5xxl_0",
        "t5xxl_1",
        "t5xxl_2",
        "t5xxl_3",
        "t5xxl_4",
        "t5xxl_5",
        "t5xxl_6",
        "t5xxl_7",
        "t5xxl_8",
        "t5xxl_9",
        "t5xxl_10",
        "t5xxl_11",
        "t5xxl_12",
        "t5xxl_13",
        "t5xxl_14",
        "t5xxl_15",
        "t5xxl_16",
        "t5xxl_17",
        "t5xxl_18",
        "t5xxl_19",
        "t5xxl_20",
        "t5xxl_21",
        "t5xxl_22",
        "t5xxl_23"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "FluxAttentionSeeker+",
    "display_name": "🔧 Flux Attention Seeker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3AttentionSeekerLG+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_l_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_l_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_24": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_25": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_26": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_27": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_28": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_29": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_30": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "clip_g_31": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "clip_l_0",
        "clip_l_1",
        "clip_l_2",
        "clip_l_3",
        "clip_l_4",
        "clip_l_5",
        "clip_l_6",
        "clip_l_7",
        "clip_l_8",
        "clip_l_9",
        "clip_l_10",
        "clip_l_11",
        "clip_g_0",
        "clip_g_1",
        "clip_g_2",
        "clip_g_3",
        "clip_g_4",
        "clip_g_5",
        "clip_g_6",
        "clip_g_7",
        "clip_g_8",
        "clip_g_9",
        "clip_g_10",
        "clip_g_11",
        "clip_g_12",
        "clip_g_13",
        "clip_g_14",
        "clip_g_15",
        "clip_g_16",
        "clip_g_17",
        "clip_g_18",
        "clip_g_19",
        "clip_g_20",
        "clip_g_21",
        "clip_g_22",
        "clip_g_23",
        "clip_g_24",
        "clip_g_25",
        "clip_g_26",
        "clip_g_27",
        "clip_g_28",
        "clip_g_29",
        "clip_g_30",
        "clip_g_31"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SD3AttentionSeekerLG+",
    "display_name": "🔧 SD3 Attention Seeker L/G",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3AttentionSeekerT5+": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_query": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_key": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "apply_to_out": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "t5xxl_0": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_1": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_2": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_3": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_4": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_5": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_6": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_7": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_8": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_9": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_10": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_11": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_12": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_13": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_14": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_15": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_16": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_17": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_18": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_19": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_20": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_21": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_22": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ],
        "t5xxl_23": [
          "FLOAT",
          {
            "display": "slider",
            "default": 1.0,
            "min": 0,
            "max": 5,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_query",
        "apply_to_key",
        "apply_to_value",
        "apply_to_out",
        "t5xxl_0",
        "t5xxl_1",
        "t5xxl_2",
        "t5xxl_3",
        "t5xxl_4",
        "t5xxl_5",
        "t5xxl_6",
        "t5xxl_7",
        "t5xxl_8",
        "t5xxl_9",
        "t5xxl_10",
        "t5xxl_11",
        "t5xxl_12",
        "t5xxl_13",
        "t5xxl_14",
        "t5xxl_15",
        "t5xxl_16",
        "t5xxl_17",
        "t5xxl_18",
        "t5xxl_19",
        "t5xxl_20",
        "t5xxl_21",
        "t5xxl_22",
        "t5xxl_23"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SD3AttentionSeekerT5+",
    "display_name": "🔧 SD3 Attention Seeker T5",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "FluxBlocksBuster+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "blocks": [
          "STRING",
          {
            "default": "## 0 = 1.0\n## 1 = 1.0\n## 2 = 1.0\n## 3 = 1.0\n## 4 = 1.0\n## 5 = 1.0\n## 6 = 1.0\n## 7 = 1.0\n## 8 = 1.0\n## 9 = 1.0\n## 10 = 1.0\n## 11 = 1.0\n## 12 = 1.0\n## 13 = 1.0\n## 14 = 1.0\n## 15 = 1.0\n## 16 = 1.0\n## 17 = 1.0\n## 18 = 1.0\n# 0 = 1.0\n# 1 = 1.0\n# 2 = 1.0\n# 3 = 1.0\n# 4 = 1.0\n# 5 = 1.0\n# 6 = 1.0\n# 7 = 1.0\n# 8 = 1.0\n# 9 = 1.0\n# 10 = 1.0\n# 11 = 1.0\n# 12 = 1.0\n# 13 = 1.0\n# 14 = 1.0\n# 15 = 1.0\n# 16 = 1.0\n# 17 = 1.0\n# 18 = 1.0\n# 19 = 1.0\n# 20 = 1.0\n# 21 = 1.0\n# 22 = 1.0\n# 23 = 1.0\n# 24 = 1.0\n# 25 = 1.0\n# 26 = 1.0\n# 27 = 1.0\n# 28 = 1.0\n# 29 = 1.0\n# 30 = 1.0\n# 31 = 1.0\n# 32 = 1.0\n# 33 = 1.0\n# 34 = 1.0\n# 35 = 1.0\n# 36 = 1.0\n# 37 = 1.0",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "blocks"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "patched_blocks"
    ],
    "name": "FluxBlocksBuster+",
    "display_name": "🔧 Flux Model Blocks Buster",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ImageEnhanceDifference+": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "exponent"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageEnhanceDifference+",
    "display_name": "🔧 Image Enhance Difference",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image analysis",
    "output_node": false
  },
  "ImageBatchMultiple+": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ],
          {
            "default": "lanczos"
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "method"
      ],
      "optional": [
        "image_2",
        "image_3",
        "image_4",
        "image_5"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchMultiple+",
    "display_name": "🔧 Images Batch Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageExpandBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageExpandBatch+",
    "display_name": "🔧 Image Expand Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageFromBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "start",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch+",
    "display_name": "🔧 Image From Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageListToBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageListToBatch+",
    "display_name": "🔧 Image List To Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageBatchToList+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchToList+",
    "display_name": "🔧 Image Batch To List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageCompositeFromMaskBatch+": {
    "input": {
      "required": {
        "image_from": [
          "IMAGE"
        ],
        "image_to": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_from",
        "image_to",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeFromMaskBatch+",
    "display_name": "🔧 Image Composite From Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageComposite+": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "offset_x",
        "offset_y"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageComposite+",
    "display_name": "🔧 Image Composite",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageCrop+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "position": [
          [
            "top-left",
            "top-center",
            "top-right",
            "right-center",
            "bottom-right",
            "bottom-center",
            "bottom-left",
            "left-center",
            "center"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "position",
        "x_offset",
        "y_offset"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "x",
      "y"
    ],
    "name": "ImageCrop+",
    "display_name": "🔧 Image Crop",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageFlip+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "axis"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFlip+",
    "display_name": "🔧 Image Flip",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRandomTransform+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "variation": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "seed",
        "repeat",
        "variation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRandomTransform+",
    "display_name": "🔧 Image Random Transform",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRemoveAlpha+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRemoveAlpha+",
    "display_name": "🔧 Image Remove Alpha",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageRemoveBackground+": {
    "input": {
      "required": {
        "rembg_session": [
          "REMBG_SESSION"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "rembg_session",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageRemoveBackground+",
    "display_name": "🔧 Image Remove Background",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageResize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "area",
            "nearest-exact",
            "lanczos"
          ]
        ],
        "method": [
          [
            "stretch",
            "keep proportion",
            "fill / crop",
            "pad"
          ]
        ],
        "condition": [
          [
            "always",
            "downscale if bigger",
            "upscale if smaller",
            "if bigger area",
            "if smaller area"
          ]
        ],
        "multiple_of": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "interpolation",
        "method",
        "condition",
        "multiple_of"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "ImageResize+",
    "display_name": "🔧 Image Resize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageSeamCarving+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "energy": [
          [
            "backward",
            "forward"
          ]
        ],
        "order": [
          [
            "width-first",
            "height-first"
          ]
        ]
      },
      "optional": {
        "keep_mask": [
          "MASK"
        ],
        "drop_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "energy",
        "order"
      ],
      "optional": [
        "keep_mask",
        "drop_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSeamCarving+",
    "display_name": "🔧 Image Seam Carving",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageTile+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "overlap": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rows",
        "cols",
        "overlap",
        "overlap_x",
        "overlap_y"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "tile_width",
      "tile_height",
      "overlap_x",
      "overlap_y"
    ],
    "name": "ImageTile+",
    "display_name": "🔧 Image Tile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageUntile+": {
    "input": {
      "required": {
        "tiles": [
          "IMAGE"
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tiles",
        "overlap_x",
        "overlap_y",
        "rows",
        "cols"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUntile+",
    "display_name": "🔧 Image Untile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "RemBGSession+": {
    "input": {
      "required": {
        "model": [
          [
            "u2net: general purpose",
            "u2netp: lightweight general purpose",
            "u2net_human_seg: human segmentation",
            "u2net_cloth_seg: cloths Parsing",
            "silueta: very small u2net",
            "isnet-general-use: general purpose",
            "isnet-anime: anime illustrations",
            "sam: general purpose"
          ]
        ],
        "providers": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML",
            "Tensorrt",
            "Azure"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "providers"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "RemBGSession+",
    "display_name": "🔧 RemBG Session",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "TransparentBGSession+": {
    "input": {
      "required": {
        "mode": [
          [
            "base",
            "fast",
            "base-nightly"
          ]
        ],
        "use_jit": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "use_jit"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "TransparentBGSession+",
    "display_name": "🔧 InSPyReNet TransparentBG",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageApplyLUT+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "lut_file": [
          [
            "put_luts_files_here.txt"
          ]
        ],
        "gamma_correction": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_values": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "lut_file",
        "gamma_correction",
        "clip_values",
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageApplyLUT+",
    "display_name": "🔧 Image Apply LUT",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageCASharpening+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCASharpening+",
    "display_name": "🔧 Image Contrast Adaptive Sharpening",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageDesaturate+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "method": [
          [
            "luminance (Rec.709)",
            "luminance (Rec.601)",
            "average",
            "lightness"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageDesaturate+",
    "display_name": "🔧 Image Desaturate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "PixelOEPixelize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "downscale_mode": [
          [
            "contrast",
            "bicubic",
            "nearest",
            "center",
            "k-centroid"
          ]
        ],
        "target_size": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "patch_size": [
          "INT",
          {
            "default": 16,
            "min": 4,
            "max": 32,
            "step": 2
          }
        ],
        "thickness": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "color_matching": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "upscale": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "downscale_mode",
        "target_size",
        "patch_size",
        "thickness",
        "color_matching",
        "upscale"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PixelOEPixelize+",
    "display_name": "🔧 Pixelize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImagePosterize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImagePosterize+",
    "display_name": "🔧 Image Posterize",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "LAB",
            "YCbCr",
            "RGB",
            "LUV",
            "YUV",
            "XYZ"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "factor",
        "device",
        "batch_size"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatch+",
    "display_name": "🔧 Image Color Match",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatchAdobe+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "RGB",
            "LAB"
          ]
        ],
        "luminance_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "color_intensity_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "fade_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "neutralization_factor": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "luminance_factor",
        "color_intensity_factor",
        "fade_factor",
        "neutralization_factor",
        "device"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatchAdobe+",
    "display_name": "🔧 Image Color Match Adobe",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageHistogramMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "method": [
          [
            "pytorch",
            "skimage"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "method",
        "factor",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageHistogramMatch+",
    "display_name": "🔧 Image Histogram Match",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageSmartSharpen+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 25,
            "step": 1
          }
        ],
        "preserve_edges": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "sharpen": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 25.0,
            "step": 0.5
          }
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_radius",
        "preserve_edges",
        "sharpen",
        "ratio"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSmartSharpen+",
    "display_name": "🔧 Image Smart Sharpen",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "GetImageSize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "count"
    ],
    "name": "GetImageSize+",
    "display_name": "🔧 Get Image Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageToDevice+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageToDevice+",
    "display_name": "🔧 Image To Device",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImagePreviewFromLatent+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "latent",
        "vae",
        "tile_size"
      ],
      "optional": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "width",
      "height"
    ],
    "name": "ImagePreviewFromLatent+",
    "display_name": "🔧 Image Preview From Latent",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": true
  },
  "NoiseFromImage+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_strenght": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_size": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "color_noise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_scale_diff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "blur": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "noise_mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_strenght",
        "noise_size",
        "color_noise",
        "mask_strength",
        "mask_scale_diff",
        "mask_contrast",
        "saturation",
        "contrast",
        "blur"
      ],
      "optional": [
        "noise_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "NoiseFromImage+",
    "display_name": "🔧 Noise From Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "MaskBlur+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount",
        "device"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBlur+",
    "display_name": "🔧 Mask Blur",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBoundingBox+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "blur"
      ],
      "optional": [
        "image_optional"
      ]
    },
    "output": [
      "MASK",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MASK",
      "IMAGE",
      "x",
      "y",
      "width",
      "height"
    ],
    "name": "MaskBoundingBox+",
    "display_name": "🔧 Mask Bounding Box",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFix+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "erode_dilate": [
          "INT",
          {
            "default": 0,
            "min": -256,
            "max": 256,
            "step": 1
          }
        ],
        "fill_holes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "erode_dilate",
        "fill_holes",
        "remove_isolated_pixels",
        "smooth",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFix+",
    "display_name": "🔧 Mask Fix",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFlip+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "axis"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFlip+",
    "display_name": "🔧 Mask Flip",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromColor+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromColor+",
    "display_name": "🔧 Mask From Color",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromList+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      },
      "optional": {
        "values": [
          "*",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "str_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "0.0, 0.5, 1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height"
      ],
      "optional": [
        "values",
        "str_values"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromList+",
    "display_name": "🔧 Mask From List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromRGBCMYBW+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold_r": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_g": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_b": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold_r",
        "threshold_g",
        "threshold_b"
      ]
    },
    "output": [
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "red",
      "green",
      "blue",
      "cyan",
      "magenta",
      "yellow",
      "black",
      "white"
    ],
    "name": "MaskFromRGBCMYBW+",
    "display_name": "🔧 Mask From RGB/CMY/BW",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromSegmentation+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segments": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "remove_small_masks": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fill_holes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segments",
        "remove_isolated_pixels",
        "remove_small_masks",
        "fill_holes"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromSegmentation+",
    "display_name": "🔧 Mask From Segmentation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskPreview+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "MaskPreview+",
    "display_name": "🔧 Mask Preview",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": true
  },
  "MaskSmooth+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskSmooth+",
    "display_name": "🔧 Mask Smooth",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "TransitionMask+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "end_frame": [
          "INT",
          {
            "default": 9999,
            "min": 0,
            "step": 1
          }
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "horizontal bar",
            "vertical bar",
            "center box",
            "horizontal door",
            "vertical door",
            "circle",
            "fade"
          ]
        ],
        "timing_function": [
          [
            "linear",
            "in",
            "out",
            "in-out"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frames",
        "start_frame",
        "end_frame",
        "transition_type",
        "timing_function"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "TransitionMask+",
    "display_name": "🔧 Transition Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBatch+": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBatch+",
    "display_name": "🔧 Mask Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskExpandBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "size",
        "method"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskExpandBatch+",
    "display_name": "🔧 Mask Expand Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskFromBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "start",
        "length"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromBatch+",
    "display_name": "🔧 Mask From Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "KSamplerVariationsStochastic+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "noise_seed",
        "steps",
        "cfg",
        "sampler",
        "scheduler",
        "positive",
        "negative",
        "variation_seed",
        "variation_strength",
        "cfg_scale"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsStochastic+",
    "display_name": "🔧 KSampler Stochastic Variations",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "KSamplerVariationsWithNoise+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "main_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.17,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 12345,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "main_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "variation_strength",
        "variation_seed",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsWithNoise+",
    "display_name": "🔧 KSampler Variations with Noise Injection",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "InjectLatentNoise+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "noise_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "normalize": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "noise_seed",
        "noise_strength",
        "normalize"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "InjectLatentNoise+",
    "display_name": "🔧 Inject Latent Noise",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "FluxSamplerParams+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "seed": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "?"
          }
        ],
        "sampler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "euler"
          }
        ],
        "scheduler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "simple"
          }
        ],
        "steps": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "20"
          }
        ],
        "guidance": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "3.5"
          }
        ],
        "max_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": ""
          }
        ],
        "base_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": ""
          }
        ],
        "denoise": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ]
      },
      "optional": {
        "loras": [
          "LORA_PARAMS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning",
        "latent_image",
        "seed",
        "sampler",
        "scheduler",
        "steps",
        "guidance",
        "max_shift",
        "base_shift",
        "denoise"
      ],
      "optional": [
        "loras"
      ]
    },
    "output": [
      "LATENT",
      "SAMPLER_PARAMS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "params"
    ],
    "name": "FluxSamplerParams+",
    "display_name": "🔧 Flux Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "GuidanceTimestepping+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "value": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "value",
        "start_at",
        "end_at"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "GuidanceTimestepping+",
    "display_name": "🔧 Guidance Timestep (experimental)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "PlotParameters+": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "params": [
          "SAMPLER_PARAMS"
        ],
        "order_by": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler",
            "guidance",
            "max_shift",
            "base_shift",
            "lora_strength"
          ]
        ],
        "cols_value": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler",
            "guidance",
            "max_shift",
            "base_shift",
            "lora_strength"
          ]
        ],
        "cols_num": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1024
          }
        ],
        "add_prompt": [
          [
            "false",
            "true",
            "excerpt"
          ]
        ],
        "add_params": [
          [
            "false",
            "true",
            "changes only"
          ],
          {
            "default": "true"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "params",
        "order_by",
        "cols_value",
        "cols_num",
        "add_prompt",
        "add_params"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PlotParameters+",
    "display_name": "🔧 Plot Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "TextEncodeForSamplerParams+": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "Separate prompts with at least three dashes\n---\nLike so"
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TextEncodeForSamplerParams+",
    "display_name": "🔧Text Encode for Sampler Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "SamplerSelectHelper+": {
    "input": {
      "required": {
        "euler": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heun": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heunpp2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lms": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_fast": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_adaptive": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2s_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2s_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddpm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lcm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm_v": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "deis": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc_bh2": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SamplerSelectHelper+",
    "display_name": "🔧 Sampler Select Helper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "SchedulerSelectHelper+": {
    "input": {
      "required": {
        "normal": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "karras": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "exponential": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sgm_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "simple": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "beta": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SchedulerSelectHelper+",
    "display_name": "🔧 Scheduler Select Helper",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "LorasForFluxParams+": {
    "input": {
      "required": {
        "lora_1": [
          [
            "1990s_FLUXIPH_v0.safetensors",
            "1990s_FLUXIP_v0.safetensors",
            "1990s_FLUX_v0.safetensors",
            "3Drandering_FLUX_v0.safetensors",
            "3dPixar_FLUXIPH_v0.safetensors",
            "3dPixar_FLUX_v0.safetensors",
            "Americanstory_FLUXIPH_v0.safetensors",
            "Atmosphere_FLUXIPH_v0.safetensors",
            "FLUX-dev-lora-AntiBlur.safetensors",
            "FLUX-dev-lora-add_details.safetensors",
            "Graffiti_Splash_xl_1024_5p-step00000500.safetensors",
            "Hyper-FLUX.1-dev-16steps-lora.safetensors",
            "Hyper-FLUX.1-dev-8steps-lora.safetensors",
            "Ukiyoe_FLUX_v0.safetensors",
            "a_20241120_25.safetensors",
            "a_20241122_74.safetensors",
            "americanStory_FLUX_v0.safetensors",
            "americanStory_RVXLIPHP_v0.safetensors",
            "animateLogo_FLUXIPH_v0.safetensors",
            "animateLogo_V2.safetensors",
            "arcane_FLUXIPH_v0.safetensors",
            "arcane_Flux_v0.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43.safetensors",
            "balloons_FLUX_v0.safetensors",
            "boldEAsy1-3_FLUXIPH_v0-step00000500.safetensors",
            "boldEAsy1-3_FLUXIPH_v0.safetensors",
            "boldEAsy4-6_FLUXIPH_v0.safetensors",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000.safetensors",
            "camera_control_lora_scale_v6_rank32-step00001000.safetensors",
            "camera_control_lora_scale_v7_rank32_wide-step00002000.safetensors",
            "caricature_FLUXIPH_v0.safetensors",
            "cartoon_lilman.safetensors",
            "catgirl_FLUX_10p_v1-step00000500.safetensors",
            "characterSheet_Flux_v0.safetensors",
            "childrenIllustration_FLUXIPH_v0.safetensors",
            "childrenIllustration_FLUX_v0.safetensors",
            "colorfulFelt_FLUX_1024_v0.safetensors",
            "colorfulFelt_FLUX_v0.safetensors",
            "cowcat_flux_5p_v1-step00000500.safetensors",
            "crossHatch_FLUXIPH_v1.safetensors",
            "cuteIcon_FLUXIPH_v0.safetensors",
            "cuteIcon_FLUX_v0.safetensors",
            "dashedLine_FLUX_v0.safetensors",
            "diamondJewelry_FLUX_v0.safetensors",
            "disney_FLUX_v0.safetensors",
            "expandIcon_FLUXIPH_v0.safetensors",
            "expandIcon_FLUX_v0.safetensors",
            "faceToon_FLUXIPH_v0.safetensors",
            "faceToon_FLUX_v0.safetensors",
            "football_FLUX_768_head.safetensors",
            "fruitWater_FLUXIPH_v0.safetensors",
            "fruitWater_FLUX_v0.safetensors",
            "geometricStyle_FLUXIPH_v0.safetensors",
            "geometricStyle_FLUX_v0.safetensors",
            "ghibliStyle_FLUXIPH_v0.safetensors",
            "graffiti_FLUXIPH_v0.safetensors",
            "graffiti_FLUX_v0.safetensors",
            "gtaComic_FLUXIPH_v0.safetensors",
            "gtaMiamiFlux_v0.safetensors",
            "hyperbolicPortrait_FLUXIPH_v0.safetensors",
            "hyperbolicPortrait_FLUXIP_v0.safetensors",
            "hyperbolicPortrait_FLUX_v0.safetensors",
            "illustration_character.safetensors",
            "impasto_comics.safetensors",
            "jellycat_FLUXIPH_v0.safetensors",
            "jellycat_FLUX_v0.safetensors",
            "jojo_FLUXIPH_v0.safetensors",
            "jojo_FLUX_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v3.safetensors",
            "joyfulCartoon_FLUXIPH_v4.safetensors",
            "joyfulCartoon_FLUX_v0.safetensors",
            "koda_FLUX_v0.safetensors",
            "lega_FLUXIPH_v0.safetensors",
            "lega_FLUX_v0.safetensors",
            "lineIconAnimal_FLUX_v0.safetensors",
            "lineartAnimal_FLUXIPH_v0.safetensors",
            "lineartIcon_FLUXIPH_v0.safetensors",
            "lipboy-step00000500.safetensors",
            "liveBroadcast_FLUX_v0.safetensors",
            "loveIcon_FLUX_v0.safetensors",
            "movie_FLUX_v0.safetensors",
            "paperCutout_FLUX_v0.safetensors",
            "pastelDeli_FLUX_v0.safetensors",
            "puppet_FLUX_v0.safetensors",
            "realism_FLUX_v0.safetensors",
            "surrealismArt_FLUX_v0.safetensors",
            "tarotLine_FLUXIPH_v0.safetensors",
            "test_flux_lora11.12.safetensors",
            "test_pixelwave_v1.safetensors",
            "tiltshiftPhotography_FLUXIPH_v0.safetensors",
            "traincharacter_100045_1732184393884___43.safetensors",
            "traincharacter_100045_1732186691083___43.safetensors",
            "traincharacter_100050_1737359866820___43.safetensors",
            "traincharacter_137_1739158654635___43.safetensors",
            "traincharacter_137_1739167140848___43.safetensors",
            "traincharacter_137_1739168506499___43.safetensors",
            "traincharacter_137_1739169699018___43.safetensors",
            "traincharacter_137_1739171058622___43.safetensors",
            "traincharacter_137_1739344897746___43.safetensors",
            "traincharacter_137_1742883924043___43.safetensors",
            "traincharacter_14_1739014615373___43.safetensors",
            "traincharacter_14_1739160935297___43.safetensors",
            "traincharacter_14_1739175847049___43.safetensors",
            "traincharacter_14_1741659572783___43.safetensors",
            "traincharacter_14_1741664718995___43.safetensors",
            "traincharacter_170_1743080647770___43.safetensors",
            "traincharacter_173914_1736449808429___43.safetensors",
            "traincharacter_173914_1736452926952___43.safetensors",
            "traincharacter_174_1729834988364___43.safetensors",
            "traincharacter_174_1730204580704___43.safetensors",
            "traincharacter_174_1730362966512___43.safetensors",
            "traincharacter_174_1730368827575___43.safetensors",
            "traincharacter_174_1730438939932___43.safetensors",
            "traincharacter_221_1739171778072___43.safetensors",
            "traincharacter_350_1739178010520___43.safetensors",
            "traincharacter_356_1745301464239___43.safetensors",
            "traincharacter_356_1745480181749___43.safetensors",
            "traincharacter_356_1745502503641___43.safetensors",
            "traincharacter_356_1745505555645___43.safetensors",
            "traincharacter_356_1745546336311___43.safetensors",
            "traincharacter_356_1745551739875___43.safetensors",
            "traincharacter_356_1745563320187___43.safetensors",
            "traincharacter_356_1745570134928___43.safetensors",
            "traincharacter_356_1745571044127___43.safetensors",
            "traincharacter_356_1745572721892___43.safetensors",
            "traincharacter_356_1745580884440___43.safetensors",
            "traincharacter_356_1745583947799___43.safetensors",
            "traincharacter_356_1745682136621___43.safetensors",
            "traincharacter_8300432_1736465990149___43.safetensors",
            "traincharacter_8843184_1736463217068___43.safetensors",
            "traincharacter_9371602_1736471137735___43.safetensors",
            "traincharacter_9439241_1736428310741___43.safetensors",
            "traincharacter_9502609_1736454684051___43.safetensors",
            "traincharacter_9525841_1736475431269___43.safetensors",
            "traincharacter_9533088_1736247249945___43.safetensors",
            "traincharacter_9537296_1736463072375___43.safetensors",
            "traincharacter_9539094_1736331861415___43.safetensors",
            "traincharacter_9542422_1736452985808___43.safetensors",
            "traincharacter_9543179_1736318286982___43.safetensors",
            "traincharacter_9543810_1736421065660___43.safetensors",
            "traincharacter_9543810_1736422707294___43.safetensors",
            "traincharacter_9543861_1736430972289___43.safetensors",
            "traincharacter_9551229_1736469337488___43.safetensors",
            "traincharacter_9552941_1736477461915___43.safetensors",
            "traincharacter_9980904_1730367419819___43.safetensors",
            "traincharacter_9980904_1737456983812___43.safetensors",
            "traincharacter_9980904_1737512255560___43.safetensors",
            "traincharacter_9980904_1737515373163___43.safetensors",
            "traincharacter_9980904_1737517682450___43.safetensors",
            "traincharacter_9980904_1737522608660___43.safetensors",
            "traincharacter_9980904_1737524171747___43.safetensors",
            "traincharacter_9980904_1742386638631___43.safetensors",
            "traincharacter_9980909_1739169862104___43.safetensors",
            "traincharacter_9980909_1739184266056___43.safetensors",
            "traincharacter_9980909_1739240918975___43.safetensors",
            "traincharacter_9980909_1739241315177___43.safetensors",
            "traincharacter_9980909_1739345564940___43.safetensors",
            "traincharacter_9980936_1730203022986___43.safetensors",
            "traincharacter_9980936_1730364787849___43.safetensors",
            "traincharacter_9980936_1730440801154___43.safetensors",
            "traincharacter_9980936_1730442621853___43.safetensors",
            "traincharacter_9980948_1742820777578___43.safetensors",
            "traincharacter_9980951_1739172068778___43.safetensors",
            "traincharacter_9981035_1729766817141___43.safetensors",
            "traincharacter_9981035_1729837329098___43.safetensors",
            "traincharacter_9981105_1736336455952___43.safetensors",
            "traincharacter_9981105_1739003026317___43.safetensors",
            "traincharacter_9981105_1739239714542___43.safetensors",
            "traincharacter_9981105_1741594415338___43.safetensors",
            "traincharacter_998115989145_1744964308312___43.safetensors",
            "traincharacter_998115989145_1744972394363___43.safetensors",
            "traincharacter_998115989351_1742898342784___43.safetensors",
            "traincharacter_998115989351_1742966030740___43.safetensors",
            "traincharacter_998115989351_1742970326932___43.safetensors",
            "traincharacter_998115989351_1742987386150___43.safetensors",
            "traincharacter_998115989360_1742968991687___43.safetensors",
            "traincharacter_998115989383_1742363876023___43.safetensors",
            "traincharacter_998115989383_1744941356841___43.safetensors",
            "traincharacter_998115989383_1745228202111___43.safetensors",
            "traincharacter_998115989383_1745483221476___43.safetensors",
            "traincharacter_998115989469_1745290344056___43.safetensors",
            "traincharacter_998115989469_1745390282266___43.safetensors",
            "tropicalStyle_FLUX_v0.safetensors",
            "ukiyoe_FLUXIPH_v0.safetensors",
            "vintage_sticker.safetensors",
            "watercolor_FLUXIPH_v0.safetensors",
            "watercolor_FLUX_v0.safetensors",
            "wild_logo.safetensors",
            "woodAnimal_FLUXIPH_v0.safetensors",
            "woodAnimal_FLUX_v2.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model_1": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_1",
        "strength_model_1"
      ]
    },
    "output": [
      "LORA_PARAMS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_PARAMS"
    ],
    "name": "LorasForFluxParams+",
    "display_name": "🔧 LoRA for Flux Parameters",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "ModelSamplingSD3Advanced+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "cut_off": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "shift_multiplier": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift",
        "cut_off",
        "shift_multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3Advanced+",
    "display_name": "🔧 Model Sampling SD3 Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "ApplyCLIPSeg+": {
    "input": {
      "required": {
        "clip_seg": [
          "CLIP_SEG"
        ],
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 9,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "dilate": [
          "INT",
          {
            "default": 0,
            "min": -32,
            "max": 32,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_seg",
        "image",
        "prompt",
        "threshold",
        "smooth",
        "dilate",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ApplyCLIPSeg+",
    "display_name": "🔧 Apply CLIPSeg",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "LoadCLIPSegModels+": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CLIP_SEG"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_SEG"
    ],
    "name": "LoadCLIPSegModels+",
    "display_name": "🔧 Load CLIPSeg Models",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "DrawText+": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "Hello, World!"
          }
        ],
        "font": [
          [
            "ShareTechMono-Regular.ttf"
          ]
        ],
        "size": [
          "INT",
          {
            "default": 56,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "background_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#00000000"
          }
        ],
        "shadow_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "horizontal_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "vertical_align": [
          [
            "top",
            "center",
            "bottom"
          ]
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "direction": [
          [
            "ltr",
            "rtl"
          ]
        ]
      },
      "optional": {
        "img_composite": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "font",
        "size",
        "color",
        "background_color",
        "shadow_distance",
        "shadow_blur",
        "shadow_color",
        "horizontal_align",
        "vertical_align",
        "offset_x",
        "offset_y",
        "direction"
      ],
      "optional": [
        "img_composite"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "DrawText+",
    "display_name": "🔧 Draw Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/text",
    "output_node": false
  },
  "BatchCount+": {
    "input": {
      "required": {
        "batch": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "batch"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "BatchCount+",
    "display_name": "🔧 Batch Count",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "ConsoleDebug+": {
    "input": {
      "required": {
        "value": [
          "*",
          {}
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": "Value:"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ],
      "optional": [
        "prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ConsoleDebug+",
    "display_name": "🔧 Console Debug",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "DebugTensorShape+": {
    "input": {
      "required": {
        "tensor": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "tensor"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "DebugTensorShape+",
    "display_name": "🔧 Debug Tensor Shape",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "DisplayAny": {
    "input": {
      "required": {
        "input": [
          "*",
          {}
        ],
        "mode": [
          [
            "raw value",
            "tensor shape"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "mode"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "DisplayAny",
    "display_name": "🔧 Display Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "ModelCompile+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mode": [
          [
            "default",
            "reduce-overhead",
            "max-autotune",
            "max-autotune-no-cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "fullgraph",
        "dynamic",
        "mode"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelCompile+",
    "display_name": "🔧 Model Compile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "RemoveLatentMask+": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RemoveLatentMask+",
    "display_name": "🔧 Remove Latent Mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SDXLEmptyLatentSizePicker+": {
    "input": {
      "required": {
        "resolution": [
          [
            "704x1408 (0.5)",
            "704x1344 (0.52)",
            "768x1344 (0.57)",
            "768x1280 (0.6)",
            "832x1216 (0.68)",
            "832x1152 (0.72)",
            "896x1152 (0.78)",
            "896x1088 (0.82)",
            "960x1088 (0.88)",
            "960x1024 (0.94)",
            "1024x1024 (1.0)",
            "1024x960 (1.07)",
            "1088x960 (1.13)",
            "1088x896 (1.21)",
            "1152x896 (1.29)",
            "1152x832 (1.38)",
            "1216x832 (1.46)",
            "1280x768 (1.67)",
            "1344x768 (1.75)",
            "1344x704 (1.91)",
            "1408x704 (2.0)",
            "1472x704 (2.09)",
            "1536x640 (2.4)",
            "1600x640 (2.5)",
            "1664x576 (2.89)",
            "1728x576 (3.0)"
          ],
          {
            "default": "1024x1024 (1.0)"
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "width_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "batch_size",
        "width_override",
        "height_override"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "width",
      "height"
    ],
    "name": "SDXLEmptyLatentSizePicker+",
    "display_name": "🔧 Empty Latent Size Picker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleComparison+": {
    "input": {
      "required": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "comparison": [
          [
            "==",
            "!=",
            "<",
            "<=",
            ">",
            ">="
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "comparison"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "SimpleComparison+",
    "display_name": "🔧 Simple Comparison",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleCondition+": {
    "input": {
      "required": {
        "evaluate": [
          "*",
          {
            "default": 0
          }
        ],
        "on_true": [
          "*",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "on_false": [
          "*",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "evaluate",
        "on_true"
      ],
      "optional": [
        "on_false"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "result"
    ],
    "name": "SimpleCondition+",
    "display_name": "🔧 Simple Condition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMath+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0.0
          }
        ],
        "b": [
          "*",
          {
            "default": 0.0
          }
        ],
        "c": [
          "*",
          {
            "default": 0.0
          }
        ]
      },
      "required": {
        "value": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c"
      ],
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "SimpleMath+",
    "display_name": "🔧 Simple Math",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathDual+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0.0
          }
        ],
        "b": [
          "*",
          {
            "default": 0.0
          }
        ],
        "c": [
          "*",
          {
            "default": 0.0
          }
        ],
        "d": [
          "*",
          {
            "default": 0.0
          }
        ]
      },
      "required": {
        "value_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "value_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c",
        "d"
      ],
      "required": [
        "value_1",
        "value_2"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "int_1",
      "float_1",
      "int_2",
      "float_2"
    ],
    "name": "SimpleMathDual+",
    "display_name": "🔧 Simple Math Dual",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathCondition+": {
    "input": {
      "optional": {
        "a": [
          "*",
          {
            "default": 0.0
          }
        ],
        "b": [
          "*",
          {
            "default": 0.0
          }
        ],
        "c": [
          "*",
          {
            "default": 0.0
          }
        ]
      },
      "required": {
        "evaluate": [
          "*",
          {
            "default": 0
          }
        ],
        "on_true": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "on_false": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b",
        "c"
      ],
      "required": [
        "evaluate",
        "on_true",
        "on_false"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "SimpleMathCondition+",
    "display_name": "🔧 Simple Math Condition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathBoolean+": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "SimpleMathBoolean+",
    "display_name": "🔧 Simple Math Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathFloat+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "SimpleMathFloat+",
    "display_name": "🔧 Simple Math Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathInt+": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "SimpleMathInt+",
    "display_name": "🔧 Simple Math Int",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathPercent+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "SimpleMathPercent+",
    "display_name": "🔧 Simple Math Percent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathSlider+": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "display": "slider",
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "rounding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "min",
        "max",
        "rounding"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT"
    ],
    "name": "SimpleMathSlider+",
    "display_name": "🔧 Simple Math Slider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMathSliderLowRes+": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "display": "slider",
            "default": 5,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.001
          }
        ],
        "rounding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "min",
        "max",
        "rounding"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT"
    ],
    "name": "SimpleMathSliderLowRes+",
    "display_name": "🔧 Simple Math Slider low-res",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "TTPlanet_Tile_Preprocessor_Simple": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.05
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 20.0,
            "step": 0.1
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "image",
        "scale_factor",
        "blur_strength"
      ],
      "optional": []
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_output"
    ],
    "name": "TTPlanet_Tile_Preprocessor_Simple",
    "display_name": "🪐TTP Tile Preprocessor HYDiT  Simple",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_CN_Preprocessor",
    "category": "TTP_TILE",
    "output_node": false
  },
  "TTP_Image_Tile_Batch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "tile_width": [
          "INT",
          {
            "default": 1024,
            "min": 1
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 1024,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "tile_width",
        "tile_height"
      ]
    },
    "output": [
      "IMAGE",
      "LIST",
      "TUPLE",
      "TUPLE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGES",
      "POSITIONS",
      "ORIGINAL_SIZE",
      "GRID_SIZE"
    ],
    "name": "TTP_Image_Tile_Batch",
    "display_name": "�TTP_Image_Tile_Batch",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_Toolset",
    "category": "Image/Process",
    "output_node": false
  },
  "TTP_Image_Assy": {
    "input": {
      "required": {
        "tiles": [
          "IMAGE"
        ],
        "positions": [
          "LIST"
        ],
        "original_size": [
          "TUPLE"
        ],
        "grid_size": [
          "TUPLE"
        ],
        "padding": [
          "INT",
          {
            "default": 64,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tiles",
        "positions",
        "original_size",
        "grid_size",
        "padding"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RECONSTRUCTED_IMAGE"
    ],
    "name": "TTP_Image_Assy",
    "display_name": "�TTP_Image_Assy",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_Toolset",
    "category": "Image/Process",
    "output_node": false
  },
  "TTP_CoordinateSplitter": {
    "input": {
      "required": {
        "Positions": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Positions"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "Coordinates"
    ],
    "name": "TTP_CoordinateSplitter",
    "display_name": "�TTP_CoordinateSplitter",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_Toolset",
    "category": "Image/Process",
    "output_node": false
  },
  "TTP_condtobatch": {
    "input": {
      "required": {
        "conditionings": [
          "CONDITIONING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditionings"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TTP_condtobatch",
    "display_name": "�TTP_cond to batch",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_Toolset",
    "category": "TTP/Conditioning",
    "output_node": false
  },
  "TTP_condsetarea_merge": {
    "input": {
      "required": {
        "conditioning_batch": [
          "CONDITIONING",
          {
            "forceInput": true
          }
        ],
        "coordinates": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_batch",
        "coordinates",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TTP_condsetarea_merge",
    "display_name": "�TTP_condsetarea_merge",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_Toolset",
    "category": "TTP/Conditioning",
    "output_node": false
  },
  "TTP_Tile_image_size": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width_factor": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "height_factor": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "overlap_rate": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 0.95,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width_factor",
        "height_factor",
        "overlap_rate"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tile_width",
      "tile_height"
    ],
    "name": "TTP_Tile_image_size",
    "display_name": "�TTP_Tile_image_size",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_Toolset",
    "category": "TTP/Image",
    "output_node": false
  },
  "Context Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "steps": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "step_refiner": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "ckpt_name": [
          [],
          {
            "forceInput": true
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "forceInput": true
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta"
          ],
          {
            "forceInput": true
          }
        ],
        "clip_width": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "clip_height": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "text_pos_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_pos_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ]
      },
      "hidden": {}
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed",
        "steps",
        "step_refiner",
        "cfg",
        "ckpt_name",
        "sampler",
        "scheduler",
        "clip_width",
        "clip_height",
        "text_pos_g",
        "text_pos_l",
        "text_neg_g",
        "text_neg_l",
        "mask",
        "control_net"
      ],
      "hidden": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Big (rgthree)",
    "display_name": "Context Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "version": "FLOAT"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed"
      ],
      "hidden": [
        "version"
      ]
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context (rgthree)",
    "display_name": "Context (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Switch (rgthree)",
    "display_name": "Context Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Switch Big (rgthree)",
    "display_name": "Context Switch Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Merge (rgthree)",
    "display_name": "Context Merge (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Merge Big (rgthree)",
    "display_name": "Context Merge Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Display Int (rgthree)": {
    "input": {
      "required": {
        "input": [
          "INT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Int (rgthree)",
    "display_name": "Display Int (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Display Any (rgthree)": {
    "input": {
      "required": {
        "source": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "source"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Any (rgthree)",
    "display_name": "Display Any (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Lora Loader Stack (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_01": [
          [
            "None",
            "1990s_FLUXIPH_v0.safetensors",
            "1990s_FLUXIP_v0.safetensors",
            "1990s_FLUX_v0.safetensors",
            "3Drandering_FLUX_v0.safetensors",
            "3dPixar_FLUXIPH_v0.safetensors",
            "3dPixar_FLUX_v0.safetensors",
            "Americanstory_FLUXIPH_v0.safetensors",
            "Atmosphere_FLUXIPH_v0.safetensors",
            "FLUX-dev-lora-AntiBlur.safetensors",
            "FLUX-dev-lora-add_details.safetensors",
            "Graffiti_Splash_xl_1024_5p-step00000500.safetensors",
            "Hyper-FLUX.1-dev-16steps-lora.safetensors",
            "Hyper-FLUX.1-dev-8steps-lora.safetensors",
            "Ukiyoe_FLUX_v0.safetensors",
            "a_20241120_25.safetensors",
            "a_20241122_74.safetensors",
            "americanStory_FLUX_v0.safetensors",
            "americanStory_RVXLIPHP_v0.safetensors",
            "animateLogo_FLUXIPH_v0.safetensors",
            "animateLogo_V2.safetensors",
            "arcane_FLUXIPH_v0.safetensors",
            "arcane_Flux_v0.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43.safetensors",
            "balloons_FLUX_v0.safetensors",
            "boldEAsy1-3_FLUXIPH_v0-step00000500.safetensors",
            "boldEAsy1-3_FLUXIPH_v0.safetensors",
            "boldEAsy4-6_FLUXIPH_v0.safetensors",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000.safetensors",
            "camera_control_lora_scale_v6_rank32-step00001000.safetensors",
            "camera_control_lora_scale_v7_rank32_wide-step00002000.safetensors",
            "caricature_FLUXIPH_v0.safetensors",
            "cartoon_lilman.safetensors",
            "catgirl_FLUX_10p_v1-step00000500.safetensors",
            "characterSheet_Flux_v0.safetensors",
            "childrenIllustration_FLUXIPH_v0.safetensors",
            "childrenIllustration_FLUX_v0.safetensors",
            "colorfulFelt_FLUX_1024_v0.safetensors",
            "colorfulFelt_FLUX_v0.safetensors",
            "cowcat_flux_5p_v1-step00000500.safetensors",
            "crossHatch_FLUXIPH_v1.safetensors",
            "cuteIcon_FLUXIPH_v0.safetensors",
            "cuteIcon_FLUX_v0.safetensors",
            "dashedLine_FLUX_v0.safetensors",
            "diamondJewelry_FLUX_v0.safetensors",
            "disney_FLUX_v0.safetensors",
            "expandIcon_FLUXIPH_v0.safetensors",
            "expandIcon_FLUX_v0.safetensors",
            "faceToon_FLUXIPH_v0.safetensors",
            "faceToon_FLUX_v0.safetensors",
            "football_FLUX_768_head.safetensors",
            "fruitWater_FLUXIPH_v0.safetensors",
            "fruitWater_FLUX_v0.safetensors",
            "geometricStyle_FLUXIPH_v0.safetensors",
            "geometricStyle_FLUX_v0.safetensors",
            "ghibliStyle_FLUXIPH_v0.safetensors",
            "graffiti_FLUXIPH_v0.safetensors",
            "graffiti_FLUX_v0.safetensors",
            "gtaComic_FLUXIPH_v0.safetensors",
            "gtaMiamiFlux_v0.safetensors",
            "hyperbolicPortrait_FLUXIPH_v0.safetensors",
            "hyperbolicPortrait_FLUXIP_v0.safetensors",
            "hyperbolicPortrait_FLUX_v0.safetensors",
            "illustration_character.safetensors",
            "impasto_comics.safetensors",
            "jellycat_FLUXIPH_v0.safetensors",
            "jellycat_FLUX_v0.safetensors",
            "jojo_FLUXIPH_v0.safetensors",
            "jojo_FLUX_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v3.safetensors",
            "joyfulCartoon_FLUXIPH_v4.safetensors",
            "joyfulCartoon_FLUX_v0.safetensors",
            "koda_FLUX_v0.safetensors",
            "lega_FLUXIPH_v0.safetensors",
            "lega_FLUX_v0.safetensors",
            "lineIconAnimal_FLUX_v0.safetensors",
            "lineartAnimal_FLUXIPH_v0.safetensors",
            "lineartIcon_FLUXIPH_v0.safetensors",
            "lipboy-step00000500.safetensors",
            "liveBroadcast_FLUX_v0.safetensors",
            "loveIcon_FLUX_v0.safetensors",
            "movie_FLUX_v0.safetensors",
            "paperCutout_FLUX_v0.safetensors",
            "pastelDeli_FLUX_v0.safetensors",
            "puppet_FLUX_v0.safetensors",
            "realism_FLUX_v0.safetensors",
            "surrealismArt_FLUX_v0.safetensors",
            "tarotLine_FLUXIPH_v0.safetensors",
            "test_flux_lora11.12.safetensors",
            "test_pixelwave_v1.safetensors",
            "tiltshiftPhotography_FLUXIPH_v0.safetensors",
            "traincharacter_100045_1732184393884___43.safetensors",
            "traincharacter_100045_1732186691083___43.safetensors",
            "traincharacter_100050_1737359866820___43.safetensors",
            "traincharacter_137_1739158654635___43.safetensors",
            "traincharacter_137_1739167140848___43.safetensors",
            "traincharacter_137_1739168506499___43.safetensors",
            "traincharacter_137_1739169699018___43.safetensors",
            "traincharacter_137_1739171058622___43.safetensors",
            "traincharacter_137_1739344897746___43.safetensors",
            "traincharacter_137_1742883924043___43.safetensors",
            "traincharacter_14_1739014615373___43.safetensors",
            "traincharacter_14_1739160935297___43.safetensors",
            "traincharacter_14_1739175847049___43.safetensors",
            "traincharacter_14_1741659572783___43.safetensors",
            "traincharacter_14_1741664718995___43.safetensors",
            "traincharacter_170_1743080647770___43.safetensors",
            "traincharacter_173914_1736449808429___43.safetensors",
            "traincharacter_173914_1736452926952___43.safetensors",
            "traincharacter_174_1729834988364___43.safetensors",
            "traincharacter_174_1730204580704___43.safetensors",
            "traincharacter_174_1730362966512___43.safetensors",
            "traincharacter_174_1730368827575___43.safetensors",
            "traincharacter_174_1730438939932___43.safetensors",
            "traincharacter_221_1739171778072___43.safetensors",
            "traincharacter_350_1739178010520___43.safetensors",
            "traincharacter_356_1745301464239___43.safetensors",
            "traincharacter_356_1745480181749___43.safetensors",
            "traincharacter_356_1745502503641___43.safetensors",
            "traincharacter_356_1745505555645___43.safetensors",
            "traincharacter_356_1745546336311___43.safetensors",
            "traincharacter_356_1745551739875___43.safetensors",
            "traincharacter_356_1745563320187___43.safetensors",
            "traincharacter_356_1745570134928___43.safetensors",
            "traincharacter_356_1745571044127___43.safetensors",
            "traincharacter_356_1745572721892___43.safetensors",
            "traincharacter_356_1745580884440___43.safetensors",
            "traincharacter_356_1745583947799___43.safetensors",
            "traincharacter_356_1745682136621___43.safetensors",
            "traincharacter_8300432_1736465990149___43.safetensors",
            "traincharacter_8843184_1736463217068___43.safetensors",
            "traincharacter_9371602_1736471137735___43.safetensors",
            "traincharacter_9439241_1736428310741___43.safetensors",
            "traincharacter_9502609_1736454684051___43.safetensors",
            "traincharacter_9525841_1736475431269___43.safetensors",
            "traincharacter_9533088_1736247249945___43.safetensors",
            "traincharacter_9537296_1736463072375___43.safetensors",
            "traincharacter_9539094_1736331861415___43.safetensors",
            "traincharacter_9542422_1736452985808___43.safetensors",
            "traincharacter_9543179_1736318286982___43.safetensors",
            "traincharacter_9543810_1736421065660___43.safetensors",
            "traincharacter_9543810_1736422707294___43.safetensors",
            "traincharacter_9543861_1736430972289___43.safetensors",
            "traincharacter_9551229_1736469337488___43.safetensors",
            "traincharacter_9552941_1736477461915___43.safetensors",
            "traincharacter_9980904_1730367419819___43.safetensors",
            "traincharacter_9980904_1737456983812___43.safetensors",
            "traincharacter_9980904_1737512255560___43.safetensors",
            "traincharacter_9980904_1737515373163___43.safetensors",
            "traincharacter_9980904_1737517682450___43.safetensors",
            "traincharacter_9980904_1737522608660___43.safetensors",
            "traincharacter_9980904_1737524171747___43.safetensors",
            "traincharacter_9980904_1742386638631___43.safetensors",
            "traincharacter_9980909_1739169862104___43.safetensors",
            "traincharacter_9980909_1739184266056___43.safetensors",
            "traincharacter_9980909_1739240918975___43.safetensors",
            "traincharacter_9980909_1739241315177___43.safetensors",
            "traincharacter_9980909_1739345564940___43.safetensors",
            "traincharacter_9980936_1730203022986___43.safetensors",
            "traincharacter_9980936_1730364787849___43.safetensors",
            "traincharacter_9980936_1730440801154___43.safetensors",
            "traincharacter_9980936_1730442621853___43.safetensors",
            "traincharacter_9980948_1742820777578___43.safetensors",
            "traincharacter_9980951_1739172068778___43.safetensors",
            "traincharacter_9981035_1729766817141___43.safetensors",
            "traincharacter_9981035_1729837329098___43.safetensors",
            "traincharacter_9981105_1736336455952___43.safetensors",
            "traincharacter_9981105_1739003026317___43.safetensors",
            "traincharacter_9981105_1739239714542___43.safetensors",
            "traincharacter_9981105_1741594415338___43.safetensors",
            "traincharacter_998115989145_1744964308312___43.safetensors",
            "traincharacter_998115989145_1744972394363___43.safetensors",
            "traincharacter_998115989351_1742898342784___43.safetensors",
            "traincharacter_998115989351_1742966030740___43.safetensors",
            "traincharacter_998115989351_1742970326932___43.safetensors",
            "traincharacter_998115989351_1742987386150___43.safetensors",
            "traincharacter_998115989360_1742968991687___43.safetensors",
            "traincharacter_998115989383_1742363876023___43.safetensors",
            "traincharacter_998115989383_1744941356841___43.safetensors",
            "traincharacter_998115989383_1745228202111___43.safetensors",
            "traincharacter_998115989383_1745483221476___43.safetensors",
            "traincharacter_998115989469_1745290344056___43.safetensors",
            "traincharacter_998115989469_1745390282266___43.safetensors",
            "tropicalStyle_FLUX_v0.safetensors",
            "ukiyoe_FLUXIPH_v0.safetensors",
            "vintage_sticker.safetensors",
            "watercolor_FLUXIPH_v0.safetensors",
            "watercolor_FLUX_v0.safetensors",
            "wild_logo.safetensors",
            "woodAnimal_FLUXIPH_v0.safetensors",
            "woodAnimal_FLUX_v2.safetensors"
          ]
        ],
        "strength_01": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_02": [
          [
            "None",
            "1990s_FLUXIPH_v0.safetensors",
            "1990s_FLUXIP_v0.safetensors",
            "1990s_FLUX_v0.safetensors",
            "3Drandering_FLUX_v0.safetensors",
            "3dPixar_FLUXIPH_v0.safetensors",
            "3dPixar_FLUX_v0.safetensors",
            "Americanstory_FLUXIPH_v0.safetensors",
            "Atmosphere_FLUXIPH_v0.safetensors",
            "FLUX-dev-lora-AntiBlur.safetensors",
            "FLUX-dev-lora-add_details.safetensors",
            "Graffiti_Splash_xl_1024_5p-step00000500.safetensors",
            "Hyper-FLUX.1-dev-16steps-lora.safetensors",
            "Hyper-FLUX.1-dev-8steps-lora.safetensors",
            "Ukiyoe_FLUX_v0.safetensors",
            "a_20241120_25.safetensors",
            "a_20241122_74.safetensors",
            "americanStory_FLUX_v0.safetensors",
            "americanStory_RVXLIPHP_v0.safetensors",
            "animateLogo_FLUXIPH_v0.safetensors",
            "animateLogo_V2.safetensors",
            "arcane_FLUXIPH_v0.safetensors",
            "arcane_Flux_v0.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43.safetensors",
            "balloons_FLUX_v0.safetensors",
            "boldEAsy1-3_FLUXIPH_v0-step00000500.safetensors",
            "boldEAsy1-3_FLUXIPH_v0.safetensors",
            "boldEAsy4-6_FLUXIPH_v0.safetensors",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000.safetensors",
            "camera_control_lora_scale_v6_rank32-step00001000.safetensors",
            "camera_control_lora_scale_v7_rank32_wide-step00002000.safetensors",
            "caricature_FLUXIPH_v0.safetensors",
            "cartoon_lilman.safetensors",
            "catgirl_FLUX_10p_v1-step00000500.safetensors",
            "characterSheet_Flux_v0.safetensors",
            "childrenIllustration_FLUXIPH_v0.safetensors",
            "childrenIllustration_FLUX_v0.safetensors",
            "colorfulFelt_FLUX_1024_v0.safetensors",
            "colorfulFelt_FLUX_v0.safetensors",
            "cowcat_flux_5p_v1-step00000500.safetensors",
            "crossHatch_FLUXIPH_v1.safetensors",
            "cuteIcon_FLUXIPH_v0.safetensors",
            "cuteIcon_FLUX_v0.safetensors",
            "dashedLine_FLUX_v0.safetensors",
            "diamondJewelry_FLUX_v0.safetensors",
            "disney_FLUX_v0.safetensors",
            "expandIcon_FLUXIPH_v0.safetensors",
            "expandIcon_FLUX_v0.safetensors",
            "faceToon_FLUXIPH_v0.safetensors",
            "faceToon_FLUX_v0.safetensors",
            "football_FLUX_768_head.safetensors",
            "fruitWater_FLUXIPH_v0.safetensors",
            "fruitWater_FLUX_v0.safetensors",
            "geometricStyle_FLUXIPH_v0.safetensors",
            "geometricStyle_FLUX_v0.safetensors",
            "ghibliStyle_FLUXIPH_v0.safetensors",
            "graffiti_FLUXIPH_v0.safetensors",
            "graffiti_FLUX_v0.safetensors",
            "gtaComic_FLUXIPH_v0.safetensors",
            "gtaMiamiFlux_v0.safetensors",
            "hyperbolicPortrait_FLUXIPH_v0.safetensors",
            "hyperbolicPortrait_FLUXIP_v0.safetensors",
            "hyperbolicPortrait_FLUX_v0.safetensors",
            "illustration_character.safetensors",
            "impasto_comics.safetensors",
            "jellycat_FLUXIPH_v0.safetensors",
            "jellycat_FLUX_v0.safetensors",
            "jojo_FLUXIPH_v0.safetensors",
            "jojo_FLUX_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v3.safetensors",
            "joyfulCartoon_FLUXIPH_v4.safetensors",
            "joyfulCartoon_FLUX_v0.safetensors",
            "koda_FLUX_v0.safetensors",
            "lega_FLUXIPH_v0.safetensors",
            "lega_FLUX_v0.safetensors",
            "lineIconAnimal_FLUX_v0.safetensors",
            "lineartAnimal_FLUXIPH_v0.safetensors",
            "lineartIcon_FLUXIPH_v0.safetensors",
            "lipboy-step00000500.safetensors",
            "liveBroadcast_FLUX_v0.safetensors",
            "loveIcon_FLUX_v0.safetensors",
            "movie_FLUX_v0.safetensors",
            "paperCutout_FLUX_v0.safetensors",
            "pastelDeli_FLUX_v0.safetensors",
            "puppet_FLUX_v0.safetensors",
            "realism_FLUX_v0.safetensors",
            "surrealismArt_FLUX_v0.safetensors",
            "tarotLine_FLUXIPH_v0.safetensors",
            "test_flux_lora11.12.safetensors",
            "test_pixelwave_v1.safetensors",
            "tiltshiftPhotography_FLUXIPH_v0.safetensors",
            "traincharacter_100045_1732184393884___43.safetensors",
            "traincharacter_100045_1732186691083___43.safetensors",
            "traincharacter_100050_1737359866820___43.safetensors",
            "traincharacter_137_1739158654635___43.safetensors",
            "traincharacter_137_1739167140848___43.safetensors",
            "traincharacter_137_1739168506499___43.safetensors",
            "traincharacter_137_1739169699018___43.safetensors",
            "traincharacter_137_1739171058622___43.safetensors",
            "traincharacter_137_1739344897746___43.safetensors",
            "traincharacter_137_1742883924043___43.safetensors",
            "traincharacter_14_1739014615373___43.safetensors",
            "traincharacter_14_1739160935297___43.safetensors",
            "traincharacter_14_1739175847049___43.safetensors",
            "traincharacter_14_1741659572783___43.safetensors",
            "traincharacter_14_1741664718995___43.safetensors",
            "traincharacter_170_1743080647770___43.safetensors",
            "traincharacter_173914_1736449808429___43.safetensors",
            "traincharacter_173914_1736452926952___43.safetensors",
            "traincharacter_174_1729834988364___43.safetensors",
            "traincharacter_174_1730204580704___43.safetensors",
            "traincharacter_174_1730362966512___43.safetensors",
            "traincharacter_174_1730368827575___43.safetensors",
            "traincharacter_174_1730438939932___43.safetensors",
            "traincharacter_221_1739171778072___43.safetensors",
            "traincharacter_350_1739178010520___43.safetensors",
            "traincharacter_356_1745301464239___43.safetensors",
            "traincharacter_356_1745480181749___43.safetensors",
            "traincharacter_356_1745502503641___43.safetensors",
            "traincharacter_356_1745505555645___43.safetensors",
            "traincharacter_356_1745546336311___43.safetensors",
            "traincharacter_356_1745551739875___43.safetensors",
            "traincharacter_356_1745563320187___43.safetensors",
            "traincharacter_356_1745570134928___43.safetensors",
            "traincharacter_356_1745571044127___43.safetensors",
            "traincharacter_356_1745572721892___43.safetensors",
            "traincharacter_356_1745580884440___43.safetensors",
            "traincharacter_356_1745583947799___43.safetensors",
            "traincharacter_356_1745682136621___43.safetensors",
            "traincharacter_8300432_1736465990149___43.safetensors",
            "traincharacter_8843184_1736463217068___43.safetensors",
            "traincharacter_9371602_1736471137735___43.safetensors",
            "traincharacter_9439241_1736428310741___43.safetensors",
            "traincharacter_9502609_1736454684051___43.safetensors",
            "traincharacter_9525841_1736475431269___43.safetensors",
            "traincharacter_9533088_1736247249945___43.safetensors",
            "traincharacter_9537296_1736463072375___43.safetensors",
            "traincharacter_9539094_1736331861415___43.safetensors",
            "traincharacter_9542422_1736452985808___43.safetensors",
            "traincharacter_9543179_1736318286982___43.safetensors",
            "traincharacter_9543810_1736421065660___43.safetensors",
            "traincharacter_9543810_1736422707294___43.safetensors",
            "traincharacter_9543861_1736430972289___43.safetensors",
            "traincharacter_9551229_1736469337488___43.safetensors",
            "traincharacter_9552941_1736477461915___43.safetensors",
            "traincharacter_9980904_1730367419819___43.safetensors",
            "traincharacter_9980904_1737456983812___43.safetensors",
            "traincharacter_9980904_1737512255560___43.safetensors",
            "traincharacter_9980904_1737515373163___43.safetensors",
            "traincharacter_9980904_1737517682450___43.safetensors",
            "traincharacter_9980904_1737522608660___43.safetensors",
            "traincharacter_9980904_1737524171747___43.safetensors",
            "traincharacter_9980904_1742386638631___43.safetensors",
            "traincharacter_9980909_1739169862104___43.safetensors",
            "traincharacter_9980909_1739184266056___43.safetensors",
            "traincharacter_9980909_1739240918975___43.safetensors",
            "traincharacter_9980909_1739241315177___43.safetensors",
            "traincharacter_9980909_1739345564940___43.safetensors",
            "traincharacter_9980936_1730203022986___43.safetensors",
            "traincharacter_9980936_1730364787849___43.safetensors",
            "traincharacter_9980936_1730440801154___43.safetensors",
            "traincharacter_9980936_1730442621853___43.safetensors",
            "traincharacter_9980948_1742820777578___43.safetensors",
            "traincharacter_9980951_1739172068778___43.safetensors",
            "traincharacter_9981035_1729766817141___43.safetensors",
            "traincharacter_9981035_1729837329098___43.safetensors",
            "traincharacter_9981105_1736336455952___43.safetensors",
            "traincharacter_9981105_1739003026317___43.safetensors",
            "traincharacter_9981105_1739239714542___43.safetensors",
            "traincharacter_9981105_1741594415338___43.safetensors",
            "traincharacter_998115989145_1744964308312___43.safetensors",
            "traincharacter_998115989145_1744972394363___43.safetensors",
            "traincharacter_998115989351_1742898342784___43.safetensors",
            "traincharacter_998115989351_1742966030740___43.safetensors",
            "traincharacter_998115989351_1742970326932___43.safetensors",
            "traincharacter_998115989351_1742987386150___43.safetensors",
            "traincharacter_998115989360_1742968991687___43.safetensors",
            "traincharacter_998115989383_1742363876023___43.safetensors",
            "traincharacter_998115989383_1744941356841___43.safetensors",
            "traincharacter_998115989383_1745228202111___43.safetensors",
            "traincharacter_998115989383_1745483221476___43.safetensors",
            "traincharacter_998115989469_1745290344056___43.safetensors",
            "traincharacter_998115989469_1745390282266___43.safetensors",
            "tropicalStyle_FLUX_v0.safetensors",
            "ukiyoe_FLUXIPH_v0.safetensors",
            "vintage_sticker.safetensors",
            "watercolor_FLUXIPH_v0.safetensors",
            "watercolor_FLUX_v0.safetensors",
            "wild_logo.safetensors",
            "woodAnimal_FLUXIPH_v0.safetensors",
            "woodAnimal_FLUX_v2.safetensors"
          ]
        ],
        "strength_02": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_03": [
          [
            "None",
            "1990s_FLUXIPH_v0.safetensors",
            "1990s_FLUXIP_v0.safetensors",
            "1990s_FLUX_v0.safetensors",
            "3Drandering_FLUX_v0.safetensors",
            "3dPixar_FLUXIPH_v0.safetensors",
            "3dPixar_FLUX_v0.safetensors",
            "Americanstory_FLUXIPH_v0.safetensors",
            "Atmosphere_FLUXIPH_v0.safetensors",
            "FLUX-dev-lora-AntiBlur.safetensors",
            "FLUX-dev-lora-add_details.safetensors",
            "Graffiti_Splash_xl_1024_5p-step00000500.safetensors",
            "Hyper-FLUX.1-dev-16steps-lora.safetensors",
            "Hyper-FLUX.1-dev-8steps-lora.safetensors",
            "Ukiyoe_FLUX_v0.safetensors",
            "a_20241120_25.safetensors",
            "a_20241122_74.safetensors",
            "americanStory_FLUX_v0.safetensors",
            "americanStory_RVXLIPHP_v0.safetensors",
            "animateLogo_FLUXIPH_v0.safetensors",
            "animateLogo_V2.safetensors",
            "arcane_FLUXIPH_v0.safetensors",
            "arcane_Flux_v0.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43.safetensors",
            "balloons_FLUX_v0.safetensors",
            "boldEAsy1-3_FLUXIPH_v0-step00000500.safetensors",
            "boldEAsy1-3_FLUXIPH_v0.safetensors",
            "boldEAsy4-6_FLUXIPH_v0.safetensors",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000.safetensors",
            "camera_control_lora_scale_v6_rank32-step00001000.safetensors",
            "camera_control_lora_scale_v7_rank32_wide-step00002000.safetensors",
            "caricature_FLUXIPH_v0.safetensors",
            "cartoon_lilman.safetensors",
            "catgirl_FLUX_10p_v1-step00000500.safetensors",
            "characterSheet_Flux_v0.safetensors",
            "childrenIllustration_FLUXIPH_v0.safetensors",
            "childrenIllustration_FLUX_v0.safetensors",
            "colorfulFelt_FLUX_1024_v0.safetensors",
            "colorfulFelt_FLUX_v0.safetensors",
            "cowcat_flux_5p_v1-step00000500.safetensors",
            "crossHatch_FLUXIPH_v1.safetensors",
            "cuteIcon_FLUXIPH_v0.safetensors",
            "cuteIcon_FLUX_v0.safetensors",
            "dashedLine_FLUX_v0.safetensors",
            "diamondJewelry_FLUX_v0.safetensors",
            "disney_FLUX_v0.safetensors",
            "expandIcon_FLUXIPH_v0.safetensors",
            "expandIcon_FLUX_v0.safetensors",
            "faceToon_FLUXIPH_v0.safetensors",
            "faceToon_FLUX_v0.safetensors",
            "football_FLUX_768_head.safetensors",
            "fruitWater_FLUXIPH_v0.safetensors",
            "fruitWater_FLUX_v0.safetensors",
            "geometricStyle_FLUXIPH_v0.safetensors",
            "geometricStyle_FLUX_v0.safetensors",
            "ghibliStyle_FLUXIPH_v0.safetensors",
            "graffiti_FLUXIPH_v0.safetensors",
            "graffiti_FLUX_v0.safetensors",
            "gtaComic_FLUXIPH_v0.safetensors",
            "gtaMiamiFlux_v0.safetensors",
            "hyperbolicPortrait_FLUXIPH_v0.safetensors",
            "hyperbolicPortrait_FLUXIP_v0.safetensors",
            "hyperbolicPortrait_FLUX_v0.safetensors",
            "illustration_character.safetensors",
            "impasto_comics.safetensors",
            "jellycat_FLUXIPH_v0.safetensors",
            "jellycat_FLUX_v0.safetensors",
            "jojo_FLUXIPH_v0.safetensors",
            "jojo_FLUX_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v3.safetensors",
            "joyfulCartoon_FLUXIPH_v4.safetensors",
            "joyfulCartoon_FLUX_v0.safetensors",
            "koda_FLUX_v0.safetensors",
            "lega_FLUXIPH_v0.safetensors",
            "lega_FLUX_v0.safetensors",
            "lineIconAnimal_FLUX_v0.safetensors",
            "lineartAnimal_FLUXIPH_v0.safetensors",
            "lineartIcon_FLUXIPH_v0.safetensors",
            "lipboy-step00000500.safetensors",
            "liveBroadcast_FLUX_v0.safetensors",
            "loveIcon_FLUX_v0.safetensors",
            "movie_FLUX_v0.safetensors",
            "paperCutout_FLUX_v0.safetensors",
            "pastelDeli_FLUX_v0.safetensors",
            "puppet_FLUX_v0.safetensors",
            "realism_FLUX_v0.safetensors",
            "surrealismArt_FLUX_v0.safetensors",
            "tarotLine_FLUXIPH_v0.safetensors",
            "test_flux_lora11.12.safetensors",
            "test_pixelwave_v1.safetensors",
            "tiltshiftPhotography_FLUXIPH_v0.safetensors",
            "traincharacter_100045_1732184393884___43.safetensors",
            "traincharacter_100045_1732186691083___43.safetensors",
            "traincharacter_100050_1737359866820___43.safetensors",
            "traincharacter_137_1739158654635___43.safetensors",
            "traincharacter_137_1739167140848___43.safetensors",
            "traincharacter_137_1739168506499___43.safetensors",
            "traincharacter_137_1739169699018___43.safetensors",
            "traincharacter_137_1739171058622___43.safetensors",
            "traincharacter_137_1739344897746___43.safetensors",
            "traincharacter_137_1742883924043___43.safetensors",
            "traincharacter_14_1739014615373___43.safetensors",
            "traincharacter_14_1739160935297___43.safetensors",
            "traincharacter_14_1739175847049___43.safetensors",
            "traincharacter_14_1741659572783___43.safetensors",
            "traincharacter_14_1741664718995___43.safetensors",
            "traincharacter_170_1743080647770___43.safetensors",
            "traincharacter_173914_1736449808429___43.safetensors",
            "traincharacter_173914_1736452926952___43.safetensors",
            "traincharacter_174_1729834988364___43.safetensors",
            "traincharacter_174_1730204580704___43.safetensors",
            "traincharacter_174_1730362966512___43.safetensors",
            "traincharacter_174_1730368827575___43.safetensors",
            "traincharacter_174_1730438939932___43.safetensors",
            "traincharacter_221_1739171778072___43.safetensors",
            "traincharacter_350_1739178010520___43.safetensors",
            "traincharacter_356_1745301464239___43.safetensors",
            "traincharacter_356_1745480181749___43.safetensors",
            "traincharacter_356_1745502503641___43.safetensors",
            "traincharacter_356_1745505555645___43.safetensors",
            "traincharacter_356_1745546336311___43.safetensors",
            "traincharacter_356_1745551739875___43.safetensors",
            "traincharacter_356_1745563320187___43.safetensors",
            "traincharacter_356_1745570134928___43.safetensors",
            "traincharacter_356_1745571044127___43.safetensors",
            "traincharacter_356_1745572721892___43.safetensors",
            "traincharacter_356_1745580884440___43.safetensors",
            "traincharacter_356_1745583947799___43.safetensors",
            "traincharacter_356_1745682136621___43.safetensors",
            "traincharacter_8300432_1736465990149___43.safetensors",
            "traincharacter_8843184_1736463217068___43.safetensors",
            "traincharacter_9371602_1736471137735___43.safetensors",
            "traincharacter_9439241_1736428310741___43.safetensors",
            "traincharacter_9502609_1736454684051___43.safetensors",
            "traincharacter_9525841_1736475431269___43.safetensors",
            "traincharacter_9533088_1736247249945___43.safetensors",
            "traincharacter_9537296_1736463072375___43.safetensors",
            "traincharacter_9539094_1736331861415___43.safetensors",
            "traincharacter_9542422_1736452985808___43.safetensors",
            "traincharacter_9543179_1736318286982___43.safetensors",
            "traincharacter_9543810_1736421065660___43.safetensors",
            "traincharacter_9543810_1736422707294___43.safetensors",
            "traincharacter_9543861_1736430972289___43.safetensors",
            "traincharacter_9551229_1736469337488___43.safetensors",
            "traincharacter_9552941_1736477461915___43.safetensors",
            "traincharacter_9980904_1730367419819___43.safetensors",
            "traincharacter_9980904_1737456983812___43.safetensors",
            "traincharacter_9980904_1737512255560___43.safetensors",
            "traincharacter_9980904_1737515373163___43.safetensors",
            "traincharacter_9980904_1737517682450___43.safetensors",
            "traincharacter_9980904_1737522608660___43.safetensors",
            "traincharacter_9980904_1737524171747___43.safetensors",
            "traincharacter_9980904_1742386638631___43.safetensors",
            "traincharacter_9980909_1739169862104___43.safetensors",
            "traincharacter_9980909_1739184266056___43.safetensors",
            "traincharacter_9980909_1739240918975___43.safetensors",
            "traincharacter_9980909_1739241315177___43.safetensors",
            "traincharacter_9980909_1739345564940___43.safetensors",
            "traincharacter_9980936_1730203022986___43.safetensors",
            "traincharacter_9980936_1730364787849___43.safetensors",
            "traincharacter_9980936_1730440801154___43.safetensors",
            "traincharacter_9980936_1730442621853___43.safetensors",
            "traincharacter_9980948_1742820777578___43.safetensors",
            "traincharacter_9980951_1739172068778___43.safetensors",
            "traincharacter_9981035_1729766817141___43.safetensors",
            "traincharacter_9981035_1729837329098___43.safetensors",
            "traincharacter_9981105_1736336455952___43.safetensors",
            "traincharacter_9981105_1739003026317___43.safetensors",
            "traincharacter_9981105_1739239714542___43.safetensors",
            "traincharacter_9981105_1741594415338___43.safetensors",
            "traincharacter_998115989145_1744964308312___43.safetensors",
            "traincharacter_998115989145_1744972394363___43.safetensors",
            "traincharacter_998115989351_1742898342784___43.safetensors",
            "traincharacter_998115989351_1742966030740___43.safetensors",
            "traincharacter_998115989351_1742970326932___43.safetensors",
            "traincharacter_998115989351_1742987386150___43.safetensors",
            "traincharacter_998115989360_1742968991687___43.safetensors",
            "traincharacter_998115989383_1742363876023___43.safetensors",
            "traincharacter_998115989383_1744941356841___43.safetensors",
            "traincharacter_998115989383_1745228202111___43.safetensors",
            "traincharacter_998115989383_1745483221476___43.safetensors",
            "traincharacter_998115989469_1745290344056___43.safetensors",
            "traincharacter_998115989469_1745390282266___43.safetensors",
            "tropicalStyle_FLUX_v0.safetensors",
            "ukiyoe_FLUXIPH_v0.safetensors",
            "vintage_sticker.safetensors",
            "watercolor_FLUXIPH_v0.safetensors",
            "watercolor_FLUX_v0.safetensors",
            "wild_logo.safetensors",
            "woodAnimal_FLUXIPH_v0.safetensors",
            "woodAnimal_FLUX_v2.safetensors"
          ]
        ],
        "strength_03": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_04": [
          [
            "None",
            "1990s_FLUXIPH_v0.safetensors",
            "1990s_FLUXIP_v0.safetensors",
            "1990s_FLUX_v0.safetensors",
            "3Drandering_FLUX_v0.safetensors",
            "3dPixar_FLUXIPH_v0.safetensors",
            "3dPixar_FLUX_v0.safetensors",
            "Americanstory_FLUXIPH_v0.safetensors",
            "Atmosphere_FLUXIPH_v0.safetensors",
            "FLUX-dev-lora-AntiBlur.safetensors",
            "FLUX-dev-lora-add_details.safetensors",
            "Graffiti_Splash_xl_1024_5p-step00000500.safetensors",
            "Hyper-FLUX.1-dev-16steps-lora.safetensors",
            "Hyper-FLUX.1-dev-8steps-lora.safetensors",
            "Ukiyoe_FLUX_v0.safetensors",
            "a_20241120_25.safetensors",
            "a_20241122_74.safetensors",
            "americanStory_FLUX_v0.safetensors",
            "americanStory_RVXLIPHP_v0.safetensors",
            "animateLogo_FLUXIPH_v0.safetensors",
            "animateLogo_V2.safetensors",
            "arcane_FLUXIPH_v0.safetensors",
            "arcane_Flux_v0.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43.safetensors",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43.safetensors",
            "balloons_FLUX_v0.safetensors",
            "boldEAsy1-3_FLUXIPH_v0-step00000500.safetensors",
            "boldEAsy1-3_FLUXIPH_v0.safetensors",
            "boldEAsy4-6_FLUXIPH_v0.safetensors",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000.safetensors",
            "camera_control_lora_scale_v6_rank32-step00001000.safetensors",
            "camera_control_lora_scale_v7_rank32_wide-step00002000.safetensors",
            "caricature_FLUXIPH_v0.safetensors",
            "cartoon_lilman.safetensors",
            "catgirl_FLUX_10p_v1-step00000500.safetensors",
            "characterSheet_Flux_v0.safetensors",
            "childrenIllustration_FLUXIPH_v0.safetensors",
            "childrenIllustration_FLUX_v0.safetensors",
            "colorfulFelt_FLUX_1024_v0.safetensors",
            "colorfulFelt_FLUX_v0.safetensors",
            "cowcat_flux_5p_v1-step00000500.safetensors",
            "crossHatch_FLUXIPH_v1.safetensors",
            "cuteIcon_FLUXIPH_v0.safetensors",
            "cuteIcon_FLUX_v0.safetensors",
            "dashedLine_FLUX_v0.safetensors",
            "diamondJewelry_FLUX_v0.safetensors",
            "disney_FLUX_v0.safetensors",
            "expandIcon_FLUXIPH_v0.safetensors",
            "expandIcon_FLUX_v0.safetensors",
            "faceToon_FLUXIPH_v0.safetensors",
            "faceToon_FLUX_v0.safetensors",
            "football_FLUX_768_head.safetensors",
            "fruitWater_FLUXIPH_v0.safetensors",
            "fruitWater_FLUX_v0.safetensors",
            "geometricStyle_FLUXIPH_v0.safetensors",
            "geometricStyle_FLUX_v0.safetensors",
            "ghibliStyle_FLUXIPH_v0.safetensors",
            "graffiti_FLUXIPH_v0.safetensors",
            "graffiti_FLUX_v0.safetensors",
            "gtaComic_FLUXIPH_v0.safetensors",
            "gtaMiamiFlux_v0.safetensors",
            "hyperbolicPortrait_FLUXIPH_v0.safetensors",
            "hyperbolicPortrait_FLUXIP_v0.safetensors",
            "hyperbolicPortrait_FLUX_v0.safetensors",
            "illustration_character.safetensors",
            "impasto_comics.safetensors",
            "jellycat_FLUXIPH_v0.safetensors",
            "jellycat_FLUX_v0.safetensors",
            "jojo_FLUXIPH_v0.safetensors",
            "jojo_FLUX_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v0.safetensors",
            "joyfulCartoon_FLUXIPH_v3.safetensors",
            "joyfulCartoon_FLUXIPH_v4.safetensors",
            "joyfulCartoon_FLUX_v0.safetensors",
            "koda_FLUX_v0.safetensors",
            "lega_FLUXIPH_v0.safetensors",
            "lega_FLUX_v0.safetensors",
            "lineIconAnimal_FLUX_v0.safetensors",
            "lineartAnimal_FLUXIPH_v0.safetensors",
            "lineartIcon_FLUXIPH_v0.safetensors",
            "lipboy-step00000500.safetensors",
            "liveBroadcast_FLUX_v0.safetensors",
            "loveIcon_FLUX_v0.safetensors",
            "movie_FLUX_v0.safetensors",
            "paperCutout_FLUX_v0.safetensors",
            "pastelDeli_FLUX_v0.safetensors",
            "puppet_FLUX_v0.safetensors",
            "realism_FLUX_v0.safetensors",
            "surrealismArt_FLUX_v0.safetensors",
            "tarotLine_FLUXIPH_v0.safetensors",
            "test_flux_lora11.12.safetensors",
            "test_pixelwave_v1.safetensors",
            "tiltshiftPhotography_FLUXIPH_v0.safetensors",
            "traincharacter_100045_1732184393884___43.safetensors",
            "traincharacter_100045_1732186691083___43.safetensors",
            "traincharacter_100050_1737359866820___43.safetensors",
            "traincharacter_137_1739158654635___43.safetensors",
            "traincharacter_137_1739167140848___43.safetensors",
            "traincharacter_137_1739168506499___43.safetensors",
            "traincharacter_137_1739169699018___43.safetensors",
            "traincharacter_137_1739171058622___43.safetensors",
            "traincharacter_137_1739344897746___43.safetensors",
            "traincharacter_137_1742883924043___43.safetensors",
            "traincharacter_14_1739014615373___43.safetensors",
            "traincharacter_14_1739160935297___43.safetensors",
            "traincharacter_14_1739175847049___43.safetensors",
            "traincharacter_14_1741659572783___43.safetensors",
            "traincharacter_14_1741664718995___43.safetensors",
            "traincharacter_170_1743080647770___43.safetensors",
            "traincharacter_173914_1736449808429___43.safetensors",
            "traincharacter_173914_1736452926952___43.safetensors",
            "traincharacter_174_1729834988364___43.safetensors",
            "traincharacter_174_1730204580704___43.safetensors",
            "traincharacter_174_1730362966512___43.safetensors",
            "traincharacter_174_1730368827575___43.safetensors",
            "traincharacter_174_1730438939932___43.safetensors",
            "traincharacter_221_1739171778072___43.safetensors",
            "traincharacter_350_1739178010520___43.safetensors",
            "traincharacter_356_1745301464239___43.safetensors",
            "traincharacter_356_1745480181749___43.safetensors",
            "traincharacter_356_1745502503641___43.safetensors",
            "traincharacter_356_1745505555645___43.safetensors",
            "traincharacter_356_1745546336311___43.safetensors",
            "traincharacter_356_1745551739875___43.safetensors",
            "traincharacter_356_1745563320187___43.safetensors",
            "traincharacter_356_1745570134928___43.safetensors",
            "traincharacter_356_1745571044127___43.safetensors",
            "traincharacter_356_1745572721892___43.safetensors",
            "traincharacter_356_1745580884440___43.safetensors",
            "traincharacter_356_1745583947799___43.safetensors",
            "traincharacter_356_1745682136621___43.safetensors",
            "traincharacter_8300432_1736465990149___43.safetensors",
            "traincharacter_8843184_1736463217068___43.safetensors",
            "traincharacter_9371602_1736471137735___43.safetensors",
            "traincharacter_9439241_1736428310741___43.safetensors",
            "traincharacter_9502609_1736454684051___43.safetensors",
            "traincharacter_9525841_1736475431269___43.safetensors",
            "traincharacter_9533088_1736247249945___43.safetensors",
            "traincharacter_9537296_1736463072375___43.safetensors",
            "traincharacter_9539094_1736331861415___43.safetensors",
            "traincharacter_9542422_1736452985808___43.safetensors",
            "traincharacter_9543179_1736318286982___43.safetensors",
            "traincharacter_9543810_1736421065660___43.safetensors",
            "traincharacter_9543810_1736422707294___43.safetensors",
            "traincharacter_9543861_1736430972289___43.safetensors",
            "traincharacter_9551229_1736469337488___43.safetensors",
            "traincharacter_9552941_1736477461915___43.safetensors",
            "traincharacter_9980904_1730367419819___43.safetensors",
            "traincharacter_9980904_1737456983812___43.safetensors",
            "traincharacter_9980904_1737512255560___43.safetensors",
            "traincharacter_9980904_1737515373163___43.safetensors",
            "traincharacter_9980904_1737517682450___43.safetensors",
            "traincharacter_9980904_1737522608660___43.safetensors",
            "traincharacter_9980904_1737524171747___43.safetensors",
            "traincharacter_9980904_1742386638631___43.safetensors",
            "traincharacter_9980909_1739169862104___43.safetensors",
            "traincharacter_9980909_1739184266056___43.safetensors",
            "traincharacter_9980909_1739240918975___43.safetensors",
            "traincharacter_9980909_1739241315177___43.safetensors",
            "traincharacter_9980909_1739345564940___43.safetensors",
            "traincharacter_9980936_1730203022986___43.safetensors",
            "traincharacter_9980936_1730364787849___43.safetensors",
            "traincharacter_9980936_1730440801154___43.safetensors",
            "traincharacter_9980936_1730442621853___43.safetensors",
            "traincharacter_9980948_1742820777578___43.safetensors",
            "traincharacter_9980951_1739172068778___43.safetensors",
            "traincharacter_9981035_1729766817141___43.safetensors",
            "traincharacter_9981035_1729837329098___43.safetensors",
            "traincharacter_9981105_1736336455952___43.safetensors",
            "traincharacter_9981105_1739003026317___43.safetensors",
            "traincharacter_9981105_1739239714542___43.safetensors",
            "traincharacter_9981105_1741594415338___43.safetensors",
            "traincharacter_998115989145_1744964308312___43.safetensors",
            "traincharacter_998115989145_1744972394363___43.safetensors",
            "traincharacter_998115989351_1742898342784___43.safetensors",
            "traincharacter_998115989351_1742966030740___43.safetensors",
            "traincharacter_998115989351_1742970326932___43.safetensors",
            "traincharacter_998115989351_1742987386150___43.safetensors",
            "traincharacter_998115989360_1742968991687___43.safetensors",
            "traincharacter_998115989383_1742363876023___43.safetensors",
            "traincharacter_998115989383_1744941356841___43.safetensors",
            "traincharacter_998115989383_1745228202111___43.safetensors",
            "traincharacter_998115989383_1745483221476___43.safetensors",
            "traincharacter_998115989469_1745290344056___43.safetensors",
            "traincharacter_998115989469_1745390282266___43.safetensors",
            "tropicalStyle_FLUX_v0.safetensors",
            "ukiyoe_FLUXIPH_v0.safetensors",
            "vintage_sticker.safetensors",
            "watercolor_FLUXIPH_v0.safetensors",
            "watercolor_FLUX_v0.safetensors",
            "wild_logo.safetensors",
            "woodAnimal_FLUXIPH_v0.safetensors",
            "woodAnimal_FLUX_v2.safetensors"
          ]
        ],
        "strength_04": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_01",
        "strength_01",
        "lora_02",
        "strength_02",
        "lora_03",
        "strength_03",
        "lora_04",
        "strength_04"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Loader Stack (rgthree)",
    "display_name": "Lora Loader Stack (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Seed (rgthree)": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": -1125899906842624,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEED"
    ],
    "name": "Seed (rgthree)",
    "display_name": "Seed (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Inset Crop (rgthree)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "Pixels",
            "Percentage"
          ]
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "left",
        "right",
        "top",
        "bottom"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Inset Crop (rgthree)",
    "display_name": "Image Inset Crop (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "1990s_FLUXIPH_v0",
            "1990s_FLUXIP_v0",
            "1990s_FLUX_v0",
            "3Drandering_FLUX_v0",
            "3dPixar_FLUXIPH_v0",
            "3dPixar_FLUX_v0",
            "Americanstory_FLUXIPH_v0",
            "Atmosphere_FLUXIPH_v0",
            "FLUX-dev-lora-AntiBlur",
            "FLUX-dev-lora-add_details",
            "Graffiti_Splash_xl_1024_5p-step00000500",
            "Hyper-FLUX.1-dev-16steps-lora",
            "Hyper-FLUX.1-dev-8steps-lora",
            "Ukiyoe_FLUX_v0",
            "a_20241120_25",
            "a_20241122_74",
            "americanStory_FLUX_v0",
            "americanStory_RVXLIPHP_v0",
            "animateLogo_FLUXIPH_v0",
            "animateLogo_V2",
            "arcane_FLUXIPH_v0",
            "arcane_Flux_v0",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43",
            "balloons_FLUX_v0",
            "boldEAsy1-3_FLUXIPH_v0-step00000500",
            "boldEAsy1-3_FLUXIPH_v0",
            "boldEAsy4-6_FLUXIPH_v0",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000",
            "camera_control_lora_scale_v6_rank32-step00001000",
            "camera_control_lora_scale_v7_rank32_wide-step00002000",
            "caricature_FLUXIPH_v0",
            "cartoon_lilman",
            "catgirl_FLUX_10p_v1-step00000500",
            "characterSheet_Flux_v0",
            "childrenIllustration_FLUXIPH_v0",
            "childrenIllustration_FLUX_v0",
            "colorfulFelt_FLUX_1024_v0",
            "colorfulFelt_FLUX_v0",
            "cowcat_flux_5p_v1-step00000500",
            "crossHatch_FLUXIPH_v1",
            "cuteIcon_FLUXIPH_v0",
            "cuteIcon_FLUX_v0",
            "dashedLine_FLUX_v0",
            "diamondJewelry_FLUX_v0",
            "disney_FLUX_v0",
            "expandIcon_FLUXIPH_v0",
            "expandIcon_FLUX_v0",
            "faceToon_FLUXIPH_v0",
            "faceToon_FLUX_v0",
            "football_FLUX_768_head",
            "fruitWater_FLUXIPH_v0",
            "fruitWater_FLUX_v0",
            "geometricStyle_FLUXIPH_v0",
            "geometricStyle_FLUX_v0",
            "ghibliStyle_FLUXIPH_v0",
            "graffiti_FLUXIPH_v0",
            "graffiti_FLUX_v0",
            "gtaComic_FLUXIPH_v0",
            "gtaMiamiFlux_v0",
            "hyperbolicPortrait_FLUXIPH_v0",
            "hyperbolicPortrait_FLUXIP_v0",
            "hyperbolicPortrait_FLUX_v0",
            "illustration_character",
            "impasto_comics",
            "jellycat_FLUXIPH_v0",
            "jellycat_FLUX_v0",
            "jojo_FLUXIPH_v0",
            "jojo_FLUX_v0",
            "joyfulCartoon_FLUXIPH_v0",
            "joyfulCartoon_FLUXIPH_v3",
            "joyfulCartoon_FLUXIPH_v4",
            "joyfulCartoon_FLUX_v0",
            "koda_FLUX_v0",
            "lega_FLUXIPH_v0",
            "lega_FLUX_v0",
            "lineIconAnimal_FLUX_v0",
            "lineartAnimal_FLUXIPH_v0",
            "lineartIcon_FLUXIPH_v0",
            "lipboy-step00000500",
            "liveBroadcast_FLUX_v0",
            "loveIcon_FLUX_v0",
            "movie_FLUX_v0",
            "paperCutout_FLUX_v0",
            "pastelDeli_FLUX_v0",
            "puppet_FLUX_v0",
            "realism_FLUX_v0",
            "surrealismArt_FLUX_v0",
            "tarotLine_FLUXIPH_v0",
            "test_flux_lora11.12",
            "test_pixelwave_v1",
            "tiltshiftPhotography_FLUXIPH_v0",
            "traincharacter_100045_1732184393884___43",
            "traincharacter_100045_1732186691083___43",
            "traincharacter_100050_1737359866820___43",
            "traincharacter_137_1739158654635___43",
            "traincharacter_137_1739167140848___43",
            "traincharacter_137_1739168506499___43",
            "traincharacter_137_1739169699018___43",
            "traincharacter_137_1739171058622___43",
            "traincharacter_137_1739344897746___43",
            "traincharacter_137_1742883924043___43",
            "traincharacter_14_1739014615373___43",
            "traincharacter_14_1739160935297___43",
            "traincharacter_14_1739175847049___43",
            "traincharacter_14_1741659572783___43",
            "traincharacter_14_1741664718995___43",
            "traincharacter_170_1743080647770___43",
            "traincharacter_173914_1736449808429___43",
            "traincharacter_173914_1736452926952___43",
            "traincharacter_174_1729834988364___43",
            "traincharacter_174_1730204580704___43",
            "traincharacter_174_1730362966512___43",
            "traincharacter_174_1730368827575___43",
            "traincharacter_174_1730438939932___43",
            "traincharacter_221_1739171778072___43",
            "traincharacter_350_1739178010520___43",
            "traincharacter_356_1745301464239___43",
            "traincharacter_356_1745480181749___43",
            "traincharacter_356_1745502503641___43",
            "traincharacter_356_1745505555645___43",
            "traincharacter_356_1745546336311___43",
            "traincharacter_356_1745551739875___43",
            "traincharacter_356_1745563320187___43",
            "traincharacter_356_1745570134928___43",
            "traincharacter_356_1745571044127___43",
            "traincharacter_356_1745572721892___43",
            "traincharacter_356_1745580884440___43",
            "traincharacter_356_1745583947799___43",
            "traincharacter_356_1745682136621___43",
            "traincharacter_8300432_1736465990149___43",
            "traincharacter_8843184_1736463217068___43",
            "traincharacter_9371602_1736471137735___43",
            "traincharacter_9439241_1736428310741___43",
            "traincharacter_9502609_1736454684051___43",
            "traincharacter_9525841_1736475431269___43",
            "traincharacter_9533088_1736247249945___43",
            "traincharacter_9537296_1736463072375___43",
            "traincharacter_9539094_1736331861415___43",
            "traincharacter_9542422_1736452985808___43",
            "traincharacter_9543179_1736318286982___43",
            "traincharacter_9543810_1736421065660___43",
            "traincharacter_9543810_1736422707294___43",
            "traincharacter_9543861_1736430972289___43",
            "traincharacter_9551229_1736469337488___43",
            "traincharacter_9552941_1736477461915___43",
            "traincharacter_9980904_1730367419819___43",
            "traincharacter_9980904_1737456983812___43",
            "traincharacter_9980904_1737512255560___43",
            "traincharacter_9980904_1737515373163___43",
            "traincharacter_9980904_1737517682450___43",
            "traincharacter_9980904_1737522608660___43",
            "traincharacter_9980904_1737524171747___43",
            "traincharacter_9980904_1742386638631___43",
            "traincharacter_9980909_1739169862104___43",
            "traincharacter_9980909_1739184266056___43",
            "traincharacter_9980909_1739240918975___43",
            "traincharacter_9980909_1739241315177___43",
            "traincharacter_9980909_1739345564940___43",
            "traincharacter_9980936_1730203022986___43",
            "traincharacter_9980936_1730364787849___43",
            "traincharacter_9980936_1730440801154___43",
            "traincharacter_9980936_1730442621853___43",
            "traincharacter_9980948_1742820777578___43",
            "traincharacter_9980951_1739172068778___43",
            "traincharacter_9981035_1729766817141___43",
            "traincharacter_9981035_1729837329098___43",
            "traincharacter_9981105_1736336455952___43",
            "traincharacter_9981105_1739003026317___43",
            "traincharacter_9981105_1739239714542___43",
            "traincharacter_9981105_1741594415338___43",
            "traincharacter_998115989145_1744964308312___43",
            "traincharacter_998115989145_1744972394363___43",
            "traincharacter_998115989351_1742898342784___43",
            "traincharacter_998115989351_1742966030740___43",
            "traincharacter_998115989351_1742970326932___43",
            "traincharacter_998115989351_1742987386150___43",
            "traincharacter_998115989360_1742968991687___43",
            "traincharacter_998115989383_1742363876023___43",
            "traincharacter_998115989383_1744941356841___43",
            "traincharacter_998115989383_1745228202111___43",
            "traincharacter_998115989383_1745483221476___43",
            "traincharacter_998115989469_1745290344056___43",
            "traincharacter_998115989469_1745390282266___43",
            "tropicalStyle_FLUX_v0",
            "ukiyoe_FLUXIPH_v0",
            "vintage_sticker",
            "watercolor_FLUXIPH_v0",
            "watercolor_FLUX_v0",
            "wild_logo",
            "woodAnimal_FLUXIPH_v0",
            "woodAnimal_FLUX_v2"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "insert_lora",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT"
    ],
    "name": "Power Prompt (rgthree)",
    "display_name": "Power Prompt (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt - Simple (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_clip",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT"
    ],
    "name": "Power Prompt - Simple (rgthree)",
    "display_name": "Power Prompt - Simple (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "KSampler Config (rgthree)": {
    "input": {
      "required": {
        "steps_total": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "refiner_step": [
          "INT",
          {
            "default": 24,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "steps_total",
        "refiner_step",
        "cfg",
        "sampler_name",
        "scheduler"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta"
      ]
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "STEPS",
      "REFINER_STEP",
      "CFG",
      "SAMPLER",
      "SCHEDULER"
    ],
    "name": "KSampler Config (rgthree)",
    "display_name": "KSampler Config (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Empty Latent Image (rgthree)": {
    "input": {
      "required": {
        "dimensions": [
          [
            "1536 x 640   (landscape)",
            "1344 x 768   (landscape)",
            "1216 x 832   (landscape)",
            "1152 x 896   (landscape)",
            "1024 x 1024  (square)",
            " 896 x 1152  (portrait)",
            " 832 x 1216  (portrait)",
            " 768 x 1344  (portrait)",
            " 640 x 1536  (portrait)"
          ],
          {
            "default": "1024 x 1024  (square)"
          }
        ],
        "clip_scale": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.5
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "clip_scale",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "CLIP_WIDTH",
      "CLIP_HEIGHT"
    ],
    "name": "SDXL Empty Latent Image (rgthree)",
    "display_name": "SDXL Empty Latent Image (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Positive (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS",
            "1990s_FLUXIPH_v0",
            "1990s_FLUXIP_v0",
            "1990s_FLUX_v0",
            "3Drandering_FLUX_v0",
            "3dPixar_FLUXIPH_v0",
            "3dPixar_FLUX_v0",
            "Americanstory_FLUXIPH_v0",
            "Atmosphere_FLUXIPH_v0",
            "FLUX-dev-lora-AntiBlur",
            "FLUX-dev-lora-add_details",
            "Graffiti_Splash_xl_1024_5p-step00000500",
            "Hyper-FLUX.1-dev-16steps-lora",
            "Hyper-FLUX.1-dev-8steps-lora",
            "Ukiyoe_FLUX_v0",
            "a_20241120_25",
            "a_20241122_74",
            "americanStory_FLUX_v0",
            "americanStory_RVXLIPHP_v0",
            "animateLogo_FLUXIPH_v0",
            "animateLogo_V2",
            "arcane_FLUXIPH_v0",
            "arcane_Flux_v0",
            "auto_train_flux/auto-train-flux_999999_1734089168882___43",
            "auto_train_flux/auto-train-flux_999999_1734089188888___43",
            "auto_train_flux/auto-train-flux_999999_1734426054802___43",
            "auto_train_flux/auto-train-flux_999999_1734609062221___43",
            "auto_train_flux/auto-train-flux_999999_1734665609876___43",
            "auto_train_flux/auto-train-flux_999999_1734665609877___43",
            "balloons_FLUX_v0",
            "boldEAsy1-3_FLUXIPH_v0-step00000500",
            "boldEAsy1-3_FLUXIPH_v0",
            "boldEAsy4-6_FLUXIPH_v0",
            "camera_control_lora_scale_morestep_rank16_combine_cubic_more-step00010000",
            "camera_control_lora_scale_v6_rank32-step00001000",
            "camera_control_lora_scale_v7_rank32_wide-step00002000",
            "caricature_FLUXIPH_v0",
            "cartoon_lilman",
            "catgirl_FLUX_10p_v1-step00000500",
            "characterSheet_Flux_v0",
            "childrenIllustration_FLUXIPH_v0",
            "childrenIllustration_FLUX_v0",
            "colorfulFelt_FLUX_1024_v0",
            "colorfulFelt_FLUX_v0",
            "cowcat_flux_5p_v1-step00000500",
            "crossHatch_FLUXIPH_v1",
            "cuteIcon_FLUXIPH_v0",
            "cuteIcon_FLUX_v0",
            "dashedLine_FLUX_v0",
            "diamondJewelry_FLUX_v0",
            "disney_FLUX_v0",
            "expandIcon_FLUXIPH_v0",
            "expandIcon_FLUX_v0",
            "faceToon_FLUXIPH_v0",
            "faceToon_FLUX_v0",
            "football_FLUX_768_head",
            "fruitWater_FLUXIPH_v0",
            "fruitWater_FLUX_v0",
            "geometricStyle_FLUXIPH_v0",
            "geometricStyle_FLUX_v0",
            "ghibliStyle_FLUXIPH_v0",
            "graffiti_FLUXIPH_v0",
            "graffiti_FLUX_v0",
            "gtaComic_FLUXIPH_v0",
            "gtaMiamiFlux_v0",
            "hyperbolicPortrait_FLUXIPH_v0",
            "hyperbolicPortrait_FLUXIP_v0",
            "hyperbolicPortrait_FLUX_v0",
            "illustration_character",
            "impasto_comics",
            "jellycat_FLUXIPH_v0",
            "jellycat_FLUX_v0",
            "jojo_FLUXIPH_v0",
            "jojo_FLUX_v0",
            "joyfulCartoon_FLUXIPH_v0",
            "joyfulCartoon_FLUXIPH_v3",
            "joyfulCartoon_FLUXIPH_v4",
            "joyfulCartoon_FLUX_v0",
            "koda_FLUX_v0",
            "lega_FLUXIPH_v0",
            "lega_FLUX_v0",
            "lineIconAnimal_FLUX_v0",
            "lineartAnimal_FLUXIPH_v0",
            "lineartIcon_FLUXIPH_v0",
            "lipboy-step00000500",
            "liveBroadcast_FLUX_v0",
            "loveIcon_FLUX_v0",
            "movie_FLUX_v0",
            "paperCutout_FLUX_v0",
            "pastelDeli_FLUX_v0",
            "puppet_FLUX_v0",
            "realism_FLUX_v0",
            "surrealismArt_FLUX_v0",
            "tarotLine_FLUXIPH_v0",
            "test_flux_lora11.12",
            "test_pixelwave_v1",
            "tiltshiftPhotography_FLUXIPH_v0",
            "traincharacter_100045_1732184393884___43",
            "traincharacter_100045_1732186691083___43",
            "traincharacter_100050_1737359866820___43",
            "traincharacter_137_1739158654635___43",
            "traincharacter_137_1739167140848___43",
            "traincharacter_137_1739168506499___43",
            "traincharacter_137_1739169699018___43",
            "traincharacter_137_1739171058622___43",
            "traincharacter_137_1739344897746___43",
            "traincharacter_137_1742883924043___43",
            "traincharacter_14_1739014615373___43",
            "traincharacter_14_1739160935297___43",
            "traincharacter_14_1739175847049___43",
            "traincharacter_14_1741659572783___43",
            "traincharacter_14_1741664718995___43",
            "traincharacter_170_1743080647770___43",
            "traincharacter_173914_1736449808429___43",
            "traincharacter_173914_1736452926952___43",
            "traincharacter_174_1729834988364___43",
            "traincharacter_174_1730204580704___43",
            "traincharacter_174_1730362966512___43",
            "traincharacter_174_1730368827575___43",
            "traincharacter_174_1730438939932___43",
            "traincharacter_221_1739171778072___43",
            "traincharacter_350_1739178010520___43",
            "traincharacter_356_1745301464239___43",
            "traincharacter_356_1745480181749___43",
            "traincharacter_356_1745502503641___43",
            "traincharacter_356_1745505555645___43",
            "traincharacter_356_1745546336311___43",
            "traincharacter_356_1745551739875___43",
            "traincharacter_356_1745563320187___43",
            "traincharacter_356_1745570134928___43",
            "traincharacter_356_1745571044127___43",
            "traincharacter_356_1745572721892___43",
            "traincharacter_356_1745580884440___43",
            "traincharacter_356_1745583947799___43",
            "traincharacter_356_1745682136621___43",
            "traincharacter_8300432_1736465990149___43",
            "traincharacter_8843184_1736463217068___43",
            "traincharacter_9371602_1736471137735___43",
            "traincharacter_9439241_1736428310741___43",
            "traincharacter_9502609_1736454684051___43",
            "traincharacter_9525841_1736475431269___43",
            "traincharacter_9533088_1736247249945___43",
            "traincharacter_9537296_1736463072375___43",
            "traincharacter_9539094_1736331861415___43",
            "traincharacter_9542422_1736452985808___43",
            "traincharacter_9543179_1736318286982___43",
            "traincharacter_9543810_1736421065660___43",
            "traincharacter_9543810_1736422707294___43",
            "traincharacter_9543861_1736430972289___43",
            "traincharacter_9551229_1736469337488___43",
            "traincharacter_9552941_1736477461915___43",
            "traincharacter_9980904_1730367419819___43",
            "traincharacter_9980904_1737456983812___43",
            "traincharacter_9980904_1737512255560___43",
            "traincharacter_9980904_1737515373163___43",
            "traincharacter_9980904_1737517682450___43",
            "traincharacter_9980904_1737522608660___43",
            "traincharacter_9980904_1737524171747___43",
            "traincharacter_9980904_1742386638631___43",
            "traincharacter_9980909_1739169862104___43",
            "traincharacter_9980909_1739184266056___43",
            "traincharacter_9980909_1739240918975___43",
            "traincharacter_9980909_1739241315177___43",
            "traincharacter_9980909_1739345564940___43",
            "traincharacter_9980936_1730203022986___43",
            "traincharacter_9980936_1730364787849___43",
            "traincharacter_9980936_1730440801154___43",
            "traincharacter_9980936_1730442621853___43",
            "traincharacter_9980948_1742820777578___43",
            "traincharacter_9980951_1739172068778___43",
            "traincharacter_9981035_1729766817141___43",
            "traincharacter_9981035_1729837329098___43",
            "traincharacter_9981105_1736336455952___43",
            "traincharacter_9981105_1739003026317___43",
            "traincharacter_9981105_1739239714542___43",
            "traincharacter_9981105_1741594415338___43",
            "traincharacter_998115989145_1744964308312___43",
            "traincharacter_998115989145_1744972394363___43",
            "traincharacter_998115989351_1742898342784___43",
            "traincharacter_998115989351_1742966030740___43",
            "traincharacter_998115989351_1742970326932___43",
            "traincharacter_998115989351_1742987386150___43",
            "traincharacter_998115989360_1742968991687___43",
            "traincharacter_998115989383_1742363876023___43",
            "traincharacter_998115989383_1744941356841___43",
            "traincharacter_998115989383_1745228202111___43",
            "traincharacter_998115989383_1745483221476___43",
            "traincharacter_998115989469_1745290344056___43",
            "traincharacter_998115989469_1745390282266___43",
            "tropicalStyle_FLUX_v0",
            "ukiyoe_FLUXIPH_v0",
            "vintage_sticker",
            "watercolor_FLUXIPH_v0",
            "watercolor_FLUX_v0",
            "wild_logo",
            "woodAnimal_FLUXIPH_v0",
            "woodAnimal_FLUX_v2"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_lora",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Positive (rgthree)",
    "display_name": "SDXL Power Prompt - Positive (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Simple / Negative (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "display_name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Any Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Any Switch (rgthree)",
    "display_name": "Any Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Comparer (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_a",
        "image_b"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Comparer (rgthree)",
    "display_name": "Image Comparer (rgthree)",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Power Lora Loader (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      },
      "optional": {},
      "hidden": {}
    },
    "input_order": {
      "required": [
        "model",
        "clip"
      ],
      "optional": [],
      "hidden": []
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Power Lora Loader (rgthree)",
    "display_name": "Power Lora Loader (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "TTPlanet_Tile_Preprocessor_GF": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.05
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "eps": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.001,
            "max": 0.1,
            "step": 0.001
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "image",
        "scale_factor",
        "blur_strength",
        "radius",
        "eps"
      ],
      "optional": []
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_output"
    ],
    "name": "TTPlanet_Tile_Preprocessor_GF",
    "display_name": "🪐TTP Tile Preprocessor HYDiT GF",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_CN_Preprocessor",
    "category": "TTP_TILE",
    "output_node": false
  },
  "TTPlanet_Tile_Preprocessor_cufoff": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.05
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "cutoff_frequency": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "filter_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "image",
        "scale_factor",
        "blur_strength",
        "cutoff_frequency",
        "filter_strength"
      ],
      "optional": []
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_output"
    ],
    "name": "TTPlanet_Tile_Preprocessor_cufoff",
    "display_name": "🪐TTP Tile Preprocessor HYDiT cufoff",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_CN_Preprocessor",
    "category": "TTP_TILE",
    "output_node": false
  },
  "TTPlanet_inpainting_Preprecessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "blackened_image"
    ],
    "name": "TTPlanet_inpainting_Preprecessor",
    "display_name": "🪐TTP Inpainting Preprocessor HYDiT",
    "description": "",
    "python_module": "custom_nodes.Comfyui_TTP_CN_Preprocessor",
    "category": "Image Processing",
    "output_node": false
  },
  "SeeKoo_LoadImage": {
    "input": {
      "required": {
        "image": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SeeKoo_LoadImage",
    "display_name": "SeeKoo Load Image(URL, Base64, Path)",
    "description": "",
    "python_module": "custom_nodes.seekoo_comfyui_tool_node",
    "category": "Seekoo Nodes",
    "output_node": false
  },
  "SeeKoo_imageSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "max_length": [
          "INT"
        ],
        "step": [
          "INT"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "max_length",
        "step"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width_int",
      "height_int"
    ],
    "name": "SeeKoo_imageSize",
    "display_name": "SeeKoo imageSize",
    "description": "",
    "python_module": "custom_nodes.seekoo_comfyui_tool_node",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "SeeKoo_ImageResizeAdvanced": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 32
          }
        ],
        "interpolation": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "area",
            "nearest-exact",
            "lanczos"
          ]
        ],
        "method": [
          [
            "stretch",
            "keep proportion",
            "fill / crop",
            "pad"
          ]
        ],
        "condition": [
          [
            "always",
            "downscale if bigger",
            "upscale if smaller",
            "if bigger area",
            "if smaller area"
          ]
        ],
        "multiple_of": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "interpolation",
        "method",
        "condition",
        "multiple_of"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "SeeKoo_ImageResizeAdvanced",
    "display_name": "SeeKoo Image Resize Advanced",
    "description": "",
    "python_module": "custom_nodes.seekoo_comfyui_tool_node",
    "category": "Ultralytics/Utils",
    "output_node": false
  },
  "BinaryPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bin_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bin_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BinaryPreprocessor",
    "display_name": "Binary Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "TilePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "pyrUp_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "pyrUp_iters",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TilePreprocessor",
    "display_name": "Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileGF_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "eps": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.001,
            "max": 0.1,
            "step": 0.001
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength",
        "radius",
        "eps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileGF_Preprocessor",
    "display_name": "TTPlanet Tile GuidedFilter",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileSimple_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileSimple_Preprocessor",
    "display_name": "TTPlanet Tile Simple",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "M-LSDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "dist_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "score_threshold",
        "dist_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "M-LSDPreprocessor",
    "display_name": "M-LSD Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "CannyEdgePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CannyEdgePreprocessor",
    "display_name": "Canny Edge",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "HEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HEDPreprocessor",
    "display_name": "HED Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "FakeScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FakeScribblePreprocessor",
    "display_name": "Fake Scribble Lines (aka scribble_hed)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Metric3D-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-DepthMapPreprocessor",
    "display_name": "Metric3D Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-NormalMapPreprocessor",
    "display_name": "Metric3D Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Zoe-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe-DepthMapPreprocessor",
    "display_name": "Zoe Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "LeReS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "rm_nearest": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "rm_background": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "boost": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "rm_nearest",
        "rm_background",
        "boost",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LeReS-DepthMapPreprocessor",
    "display_name": "LeReS Depth Map (enable boost for leres++)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "LineartStandardPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "guassian_sigma": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "intensity_threshold": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "guassian_sigma",
        "intensity_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineartStandardPreprocessor",
    "display_name": "Standard Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DepthAnythingV2Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_v2_vitg.pth",
            "depth_anything_v2_vitl.pth",
            "depth_anything_v2_vitb.pth",
            "depth_anything_v2_vits.pth"
          ],
          {
            "default": "depth_anything_v2_vitl.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingV2Preprocessor",
    "display_name": "Depth Anything V2 - Relative",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "BAE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BAE-NormalMapPreprocessor",
    "display_name": "BAE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "detect_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "presence_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask_bbox_padding",
        "resolution",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "detect_thr",
        "presence_thr"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ]
      },
      "optional": {
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "drop_size": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "bbox_detector"
      ],
      "optional": [
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "drop_size",
        "mask_bbox_padding",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner With External Detector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "PiDiNetPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PiDiNetPreprocessor",
    "display_name": "PiDiNet Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "LineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "coarse": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "coarse",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineArtPreprocessor",
    "display_name": "Realistic Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "SAMPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SAMPreprocessor",
    "display_name": "SAM Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_vitl14.pth",
            "depth_anything_vitb14.pth",
            "depth_anything_vits14.pth"
          ],
          {
            "default": "depth_anything_vitl14.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingPreprocessor",
    "display_name": "Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Zoe_DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "outdoor"
          ],
          {
            "default": "indoor"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe_DepthAnythingPreprocessor",
    "display_name": "Zoe Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "InpaintPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "optional": {
        "black_pixel_for_xinsir_cn": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ],
      "optional": [
        "black_pixel_for_xinsir_cn"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "InpaintPreprocessor",
    "display_name": "Inpaint Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "ShufflePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShufflePreprocessor",
    "display_name": "Content Shuffle",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "OneFormer-COCO-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-COCO-SemSegPreprocessor",
    "display_name": "OneFormer COCO Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "OneFormer-ADE20K-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-ADE20K-SemSegPreprocessor",
    "display_name": "OneFormer ADE20K Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "ScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ScribblePreprocessor",
    "display_name": "Scribble Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_XDoG_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "threshold": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_XDoG_Preprocessor",
    "display_name": "Scribble XDoG Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_PiDiNet_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ]
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_PiDiNet_Preprocessor",
    "display_name": "Scribble PiDiNet Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "MiDaS-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-NormalMapPreprocessor",
    "display_name": "MiDaS Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MiDaS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-DepthMapPreprocessor",
    "display_name": "MiDaS Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Manga2Anime_LineArt_Preprocessor",
    "display_name": "Manga Lineart (aka lineart_anime_denoise)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "TEEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe_steps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TEEDPreprocessor",
    "display_name": "TEEDPreprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ColorPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ColorPreprocessor",
    "display_name": "Color Pallete",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "UniFormer-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UniFormer-SemSegPreprocessor",
    "display_name": "UniFormer Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SemSegPreprocessor",
    "display_name": "Semantic Segmentor (legacy, alias for UniFormer)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "SavePoseKpsAsJsonFile": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "PoseKeypoint"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SavePoseKpsAsJsonFile",
    "display_name": "Save Pose Keypoints",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": true
  },
  "FacialPartColoringFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "mode": [
          [
            "point",
            "polygon"
          ],
          {
            "default": "polygon"
          }
        ],
        "skin": [
          "STRING",
          {
            "default": "rgb(0, 153, 255)",
            "multiline": false
          }
        ],
        "left_eye": [
          "STRING",
          {
            "default": "rgb(0, 204, 153)",
            "multiline": false
          }
        ],
        "right_eye": [
          "STRING",
          {
            "default": "rgb(255, 153, 0)",
            "multiline": false
          }
        ],
        "nose": [
          "STRING",
          {
            "default": "rgb(255, 102, 255)",
            "multiline": false
          }
        ],
        "upper_lip": [
          "STRING",
          {
            "default": "rgb(102, 0, 51)",
            "multiline": false
          }
        ],
        "inner_mouth": [
          "STRING",
          {
            "default": "rgb(255, 204, 255)",
            "multiline": false
          }
        ],
        "lower_lip": [
          "STRING",
          {
            "default": "rgb(255, 0, 102)",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "mode",
        "skin",
        "left_eye",
        "right_eye",
        "nose",
        "upper_lip",
        "inner_mouth",
        "lower_lip"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FacialPartColoringFromPoseKps",
    "display_name": "Colorize Facial Parts from PoseKPS",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "UpperBodyTrackingFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "id_include": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Head_width_height": [
          "STRING",
          {
            "default": "256, 256",
            "multiline": false
          }
        ],
        "Neck_width_height": [
          "STRING",
          {
            "default": "100, 100",
            "multiline": false
          }
        ],
        "Shoulder_width_height": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Torso_width_height": [
          "STRING",
          {
            "default": "350, 450",
            "multiline": false
          }
        ],
        "RArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "RForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "id_include",
        "Head_width_height",
        "Neck_width_height",
        "Shoulder_width_height",
        "Torso_width_height",
        "RArm_width_height",
        "RForearm_width_height",
        "LArm_width_height",
        "LForearm_width_height"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "UpperBodyTrackingFromPoseKps",
    "display_name": "Upper Body Tracking From PoseKps (InstanceDiffusion)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderPeopleKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ],
        "render_body": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_hand": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_face": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kps",
        "render_body",
        "render_hand",
        "render_face"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderPeopleKps",
    "display_name": "Render Pose JSON (Human)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderAnimalKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ]
      }
    },
    "input_order": {
      "required": [
        "kps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderAnimalKps",
    "display_name": "Render Pose JSON (Animal)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "PyraCannyPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PyraCannyPreprocessor",
    "display_name": "PyraCanny",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnimeLineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AnimeLineArtPreprocessor",
    "display_name": "Anime Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DSINE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "fov": [
          "FLOAT",
          {
            "default": 60.0,
            "min": 0,
            "max": 365.0,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "fov",
        "iterations",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DSINE-NormalMapPreprocessor",
    "display_name": "DSINE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "ImageLuminanceDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageLuminanceDetector",
    "display_name": "Image Luminance",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "ImageIntensityDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageIntensityDetector",
    "display_name": "Image Intensity",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "DiffusionEdge_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "urban",
            "natrual"
          ],
          {
            "default": "indoor"
          }
        ],
        "patch_batch_size": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "patch_batch_size",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DiffusionEdge_Preprocessor",
    "display_name": "Diffusion Edge (batch size ↑ => speed ↑, VRAM ↑)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "MediaPipe-FaceMeshPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "min_confidence": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "max_faces",
        "min_confidence",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MediaPipe-FaceMeshPreprocessor",
    "display_name": "MediaPipe Face Mesh",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnimeFace_SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "remove_background_using_abg": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 512,
            "max": 512,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "remove_background_using_abg",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "ABG_CHARACTER_MASK (MASK)"
    ],
    "name": "AnimeFace_SemSegPreprocessor",
    "display_name": "Anime Face Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "DWPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.onnx"
          }
        ],
        "pose_estimator": [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx"
          ],
          {
            "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "bbox_detector",
        "pose_estimator",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "DWPreprocessor",
    "display_name": "DWPose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnimalPosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.torchscript.pt"
          }
        ],
        "pose_estimator": [
          [
            "rtmpose-m_ap10k_256_bs5.torchscript.pt",
            "rtmpose-m_ap10k_256.onnx"
          ],
          {
            "default": "rtmpose-m_ap10k_256_bs5.torchscript.pt"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bbox_detector",
        "pose_estimator",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "AnimalPosePreprocessor",
    "display_name": "AnimalPose Estimator (AP10K)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "OpenposePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "OpenposePreprocessor",
    "display_name": "OpenPose Pose",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "DensePosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "model": [
          [
            "densepose_r50_fpn_dl.torchscript",
            "densepose_r101_fpn_dl.torchscript"
          ],
          {
            "default": "densepose_r50_fpn_dl.torchscript"
          }
        ],
        "cmap": [
          [
            "Viridis (MagicAnimate)",
            "Parula (CivitAI)"
          ],
          {
            "default": "Viridis (MagicAnimate)"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "model",
        "cmap",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DensePosePreprocessor",
    "display_name": "DensePose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnyLineArtPreprocessor_aux": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "merge_with_lineart": [
          [
            "lineart_standard",
            "lineart_realisitic",
            "lineart_anime",
            "manga_line"
          ],
          {
            "default": "lineart_standard"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 1280,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "lineart_lower_bound": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "lineart_upper_bound": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "object_min_size": [
          "INT",
          {
            "default": 36,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "object_connectivity": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "merge_with_lineart",
        "resolution",
        "lineart_lower_bound",
        "lineart_upper_bound",
        "object_min_size",
        "object_connectivity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "AnyLineArtPreprocessor_aux",
    "display_name": "AnyLine Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Unimatch_OptFlowPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "ckpt_name": [
          [
            "gmflow-scale1-mixdata.pth",
            "gmflow-scale2-mixdata.pth",
            "gmflow-scale2-regrefine6-mixdata.pth"
          ],
          {
            "default": "gmflow-scale2-regrefine6-mixdata.pth"
          }
        ],
        "backward_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bidirectional_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "ckpt_name",
        "backward_flow",
        "bidirectional_flow"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "Unimatch_OptFlowPreprocessor",
    "display_name": "Unimatch Optical Flow",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "MaskOptFlow": {
    "input": {
      "required": {
        "optical_flow": [
          "OPTICAL_FLOW"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "optical_flow",
        "mask"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "MaskOptFlow",
    "display_name": "Mask Optical Flow (DragNUWA)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "AIO_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "preprocessor": [
          [
            "none",
            "BinaryPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "M-LSDPreprocessor",
            "CannyEdgePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "Zoe-DepthMapPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "LineartStandardPreprocessor",
            "DepthAnythingV2Preprocessor",
            "BAE-NormalMapPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "PiDiNetPreprocessor",
            "LineArtPreprocessor",
            "SAMPreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "ShufflePreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "TEEDPreprocessor",
            "ColorPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "PyraCannyPreprocessor",
            "AnimeLineArtPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "MediaPipe-FaceMeshPreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "OpenposePreprocessor",
            "DensePosePreprocessor",
            "AnyLineArtPreprocessor_aux"
          ],
          {
            "default": "none"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "preprocessor",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AIO_Preprocessor",
    "display_name": "AIO Aux Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetPreprocessorSelector": {
    "input": {
      "required": {
        "preprocessor": [
          [
            "none",
            "BinaryPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "M-LSDPreprocessor",
            "CannyEdgePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "Zoe-DepthMapPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "LineartStandardPreprocessor",
            "DepthAnythingV2Preprocessor",
            "BAE-NormalMapPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "PiDiNetPreprocessor",
            "LineArtPreprocessor",
            "SAMPreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "ShufflePreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "TEEDPreprocessor",
            "ColorPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "PyraCannyPreprocessor",
            "AnimeLineArtPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "MediaPipe-FaceMeshPreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "OpenposePreprocessor",
            "DensePosePreprocessor",
            "AnyLineArtPreprocessor_aux"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preprocessor"
      ]
    },
    "output": [
      [
        "none",
        "BinaryPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "M-LSDPreprocessor",
        "CannyEdgePreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "Zoe-DepthMapPreprocessor",
        "LeReS-DepthMapPreprocessor",
        "LineartStandardPreprocessor",
        "DepthAnythingV2Preprocessor",
        "BAE-NormalMapPreprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "PiDiNetPreprocessor",
        "LineArtPreprocessor",
        "SAMPreprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "ShufflePreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "TEEDPreprocessor",
        "ColorPreprocessor",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "PyraCannyPreprocessor",
        "AnimeLineArtPreprocessor",
        "DSINE-NormalMapPreprocessor",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "MediaPipe-FaceMeshPreprocessor",
        "AnimeFace_SemSegPreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "OpenposePreprocessor",
        "DensePosePreprocessor",
        "AnyLineArtPreprocessor_aux"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "preprocessor"
    ],
    "name": "ControlNetPreprocessorSelector",
    "display_name": "Preprocessor Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "PixelPerfectResolution": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RESOLUTION (INT)"
    ],
    "name": "PixelPerfectResolution",
    "display_name": "Pixel Perfect Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromImage",
    "display_name": "Generation Resolution From Image",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromLatent",
    "display_name": "Generation Resolution From Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "HintImageEnchance": {
    "input": {
      "required": {
        "hint_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hint_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HintImageEnchance",
    "display_name": "Enchance And Resize Hint Images",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ExecuteAllControlNetPreprocessors": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ExecuteAllControlNetPreprocessors",
    "display_name": "Execute All ControlNet Preprocessors",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetAuxSimpleAddText": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ControlNetAuxSimpleAddText",
    "display_name": "ControlNetAuxSimpleAddText",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "DetailDaemonSamplerNode": {
    "input": {
      "required": {
        "sampler": [
          "SAMPLER"
        ],
        "detail_amount": [
          "FLOAT",
          {
            "default": 0.1,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bias": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "start_offset": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_offset": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fade": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "smooth": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "cfg_scale_override": [
          "FLOAT",
          {
            "default": 0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01,
            "tooltip": "If set to 0, the sampler will automatically determine the CFG scale (if possible). Set to some other value to override."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler",
        "detail_amount",
        "start",
        "end",
        "bias",
        "exponent",
        "start_offset",
        "end_offset",
        "fade",
        "smooth",
        "cfg_scale_override"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "DetailDaemonSamplerNode",
    "display_name": "Detail Daemon Sampler",
    "description": "This sampler wrapper works by adjusting the sigma passed to the model, while the rest of sampling stays the same.",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "DetailDaemonGraphSigmasNode": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS",
          {
            "forceInput": true
          }
        ],
        "detail_amount": [
          "FLOAT",
          {
            "default": 0.1,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bias": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "start_offset": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_offset": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fade": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "smooth": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "detail_amount",
        "start",
        "end",
        "bias",
        "exponent",
        "start_offset",
        "end_offset",
        "fade",
        "smooth",
        "cfg_scale"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "DetailDaemonGraphSigmasNode",
    "display_name": "Detail Daemon Graph Sigmas",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": true
  },
  "MultiplySigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS",
          {
            "forceInput": true
          }
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.001
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "factor",
        "start",
        "end"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "MultiplySigmas",
    "display_name": "Multiply Sigmas (stateless)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "LyingSigmaSampler": {
    "input": {
      "required": {
        "sampler": [
          "SAMPLER"
        ],
        "dishonesty_factor": [
          "FLOAT",
          {
            "default": -0.05,
            "min": -0.999,
            "step": 0.01,
            "tooltip": "Multiplier for sigmas passed to the model. -0.05 means we reduce the sigma by 5%."
          }
        ]
      },
      "optional": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler",
        "dishonesty_factor"
      ],
      "optional": [
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "LyingSigmaSampler",
    "display_name": "Lying Sigma Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Detail-Daemon",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "Tile_image_size_by_scale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "scale": [
          "INT",
          {
            "default": 1666,
            "min": 1,
            "max": 999999,
            "step": 1
          }
        ],
        "shift": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "overlap_rate": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.05,
            "max": 0.95,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "scale",
        "shift",
        "overlap_rate"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tile_width",
      "tile_height"
    ],
    "name": "Tile_image_size_by_scale",
    "display_name": "Tile image size by scale",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_TilePatchByScale",
    "category": "TTP/Image",
    "output_node": false
  },
  "Make_image_size_divisible_by_16": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "resized_image",
      "16_width",
      "16_height"
    ],
    "name": "Make_image_size_divisible_by_16",
    "display_name": "Make image size divisible by 16",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_TilePatchByScale",
    "category": "TTP/Image",
    "output_node": false
  }
}