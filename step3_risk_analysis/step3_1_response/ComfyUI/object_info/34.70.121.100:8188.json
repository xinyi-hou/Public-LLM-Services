{
  "KSampler": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The model used for denoising the input latent."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "The number of steps used in the denoising process."
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01,
            "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "tooltip": "The scheduler controls how noise is gradually removed to form the image."
          }
        ],
        "positive": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to include in the image."
          }
        ],
        "negative": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to exclude from the image."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "The latent image to denoise."
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler",
    "display_name": "KSampler",
    "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false,
    "output_tooltips": [
      "The denoised latent."
    ]
  },
  "CheckpointLoaderSimple": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderSimple",
    "display_name": "Load Checkpoint",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "CLIPTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncode",
    "display_name": "CLIP Text Encode (Prompt)",
    "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "CLIPSetLastLayer": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "stop_at_clip_layer": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "stop_at_clip_layer"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPSetLastLayer",
    "display_name": "CLIP Set Last Layer",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "VAEDecode": {
    "input": {
      "required": {
        "samples": [
          "LATENT",
          {
            "tooltip": "The latent to be decoded."
          }
        ],
        "vae": [
          "VAE",
          {
            "tooltip": "The VAE model used for decoding the latent."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecode",
    "display_name": "VAE Decode",
    "description": "Decodes latent images back into pixel space images.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The decoded image."
    ]
  },
  "VAEEncode": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncode",
    "display_name": "VAE Encode",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "VAEEncodeForInpaint": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "grow_mask_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeForInpaint",
    "display_name": "VAE Encode (for Inpainting)",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "VAELoader": {
    "input": {
      "required": {
        "vae_name": [
          [
            "vae-ft-ema-560000-ema-pruned.ckpt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoader",
    "display_name": "Load VAE",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentImage",
    "display_name": "Empty Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "LatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscale",
    "display_name": "Upscale Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentUpscaleBy": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleBy",
    "display_name": "Upscale Latent By",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentFromBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFromBatch",
    "display_name": "Latent From Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "RepeatLatentBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RepeatLatentBatch",
    "display_name": "Repeat Latent Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "SaveImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImage",
    "display_name": "Save Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "PreviewImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewImage",
    "display_name": "Preview Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "LoadImage": {
    "input": {
      "required": {
        "image": [
          [
            "capybara.png",
            "image2.jpg"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImage",
    "display_name": "Load Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "LoadImageMask": {
    "input": {
      "required": {
        "image": [
          [
            "capybara.png",
            "image2.jpg"
          ],
          {
            "image_upload": true
          }
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "LoadImageMask",
    "display_name": "Load Image (as Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "mask",
    "output_node": false
  },
  "LoadImageOutput": {
    "input": {
      "required": {
        "image": [
          "COMBO",
          {
            "image_upload": true,
            "image_folder": "output",
            "remote": {
              "route": "/internal/files/output",
              "refresh_button": true,
              "control_after_refresh": "first"
            }
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImageOutput",
    "display_name": "Load Image (from Outputs)",
    "description": "Load an image from the output folder. When the refresh button is clicked, the node will update the image list and automatically select the first image, allowing for easy iteration.",
    "python_module": "nodes",
    "category": "image",
    "output_node": false,
    "experimental": true
  },
  "ImageScale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScale",
    "display_name": "Upscale Image",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageScaleBy": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleBy",
    "display_name": "Upscale Image By",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageInvert": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageInvert",
    "display_name": "Invert Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatch",
    "display_name": "Batch Images",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaint",
    "display_name": "Pad Image for Outpainting",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "EmptyImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "EmptyImage",
    "display_name": "EmptyImage",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ConditioningAverage": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ],
        "conditioning_to_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from",
        "conditioning_to_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningAverage",
    "display_name": "ConditioningAverage",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningCombine": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombine",
    "display_name": "Conditioning (Combine)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningConcat": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningConcat",
    "display_name": "Conditioning (Concat)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetArea": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetArea",
    "display_name": "Conditioning (Set Area)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaPercentage": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentage",
    "display_name": "Conditioning (Set Area with Percentage)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaStrength": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaStrength",
    "display_name": "ConditioningSetAreaStrength",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetMask": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "mask",
        "strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetMask",
    "display_name": "Conditioning (Set Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "KSamplerAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerAdvanced",
    "display_name": "KSampler (Advanced)",
    "description": "",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false
  },
  "SetLatentNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "SetLatentNoiseMask",
    "display_name": "Set Latent Noise Mask",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "LatentComposite": {
    "input": {
      "required": {
        "samples_to": [
          "LATENT"
        ],
        "samples_from": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feather": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples_to",
        "samples_from",
        "x",
        "y",
        "feather"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentComposite",
    "display_name": "Latent Composite",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentBlend": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "blend_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBlend",
    "display_name": "Latent Blend",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "LatentRotate": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "rotation": [
          [
            "none",
            "90 degrees",
            "180 degrees",
            "270 degrees"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "rotation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentRotate",
    "display_name": "Rotate Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentFlip": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "flip_method": [
          [
            "x-axis: vertically",
            "y-axis: horizontally"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "flip_method"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFlip",
    "display_name": "Flip Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentCrop": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCrop",
    "display_name": "Crop Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [
            "add-detail-xl.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ip-adapter-faceid_sdxl_lora.safetensors"
          ],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "LoraLoader",
    "display_name": "Load LoRA",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CLIPLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "clip_g.safetensors",
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors"
          ]
        ],
        "type": [
          [
            "stable_diffusion",
            "stable_cascade",
            "sd3",
            "stable_audio",
            "mochi",
            "ltxv",
            "pixart",
            "cosmos",
            "lumina2",
            "wan"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPLoader",
    "display_name": "Load CLIP",
    "description": "[Recipes]\n\nstable_diffusion: clip-l\nstable_cascade: clip-g\nsd3: t5 xxl/ clip-g / clip-l\nstable_audio: t5 base\nmochi: t5 xxl\ncosmos: old t5 xxl\nlumina2: gemma 2 2B\nwan: umt5 xxl",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "UNETLoader": {
    "input": {
      "required": {
        "unet_name": [
          [
            "FLUX1/flux1-dev-fp8.safetensors"
          ]
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "weight_dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNETLoader",
    "display_name": "Load Diffusion Model",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "DualCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "clip_g.safetensors",
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "clip_g.safetensors",
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors"
          ]
        ],
        "type": [
          [
            "sdxl",
            "sd3",
            "flux",
            "hunyuan_video"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "DualCLIPLoader",
    "display_name": "DualCLIPLoader",
    "description": "[Recipes]\n\nsdxl: clip-l, clip-g\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\nflux: clip-l, t5",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE"
        ],
        "crop": [
          [
            "center",
            "none"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image",
        "crop"
      ]
    },
    "output": [
      "CLIP_VISION_OUTPUT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION_OUTPUT"
    ],
    "name": "CLIPVisionEncode",
    "display_name": "CLIP Vision Encode",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "StyleModelApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_type": [
          [
            "multiply",
            "attn_bias"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength",
        "strength_type"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApply",
    "display_name": "Apply Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/style_model",
    "output_node": false
  },
  "unCLIPConditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "clip_vision_output",
        "strength",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "unCLIPConditioning",
    "display_name": "unCLIPConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ControlNetApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ControlNetApply",
    "display_name": "Apply ControlNet (OLD)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "ControlNetApplyAdvanced": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "vae"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplyAdvanced",
    "display_name": "Apply ControlNet",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetLoader": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_v11e_sd15_ip2p_fp16.safetensors",
            "control_v11e_sd15_shuffle_fp16.safetensors",
            "control_v11f1p_sd15_depth_fp16.safetensors",
            "control_v11p_sd15_canny_fp16.safetensors",
            "control_v11p_sd15_inpaint_fp16.safetensors",
            "control_v11p_sd15_lineart_fp16.safetensors",
            "control_v11p_sd15_mlsd_fp16.safetensors",
            "control_v11p_sd15_normalbae_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "control_v11p_sd15_scribble_fp16.safetensors",
            "control_v11p_sd15_seg_fp16.safetensors",
            "control_v11p_sd15_softedge_fp16.safetensors",
            "control_v11p_sd15s2_lineart_anime_fp16.safetensors",
            "control_v11u_sd15_tile_fp16.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ControlNetLoader",
    "display_name": "Load ControlNet Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "DiffControlNetLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "control_net_name": [
          [
            "SDXL/control-lora-canny-rank256.safetensors",
            "SDXL/control-lora-depth-rank256.safetensors",
            "control_v11e_sd15_ip2p_fp16.safetensors",
            "control_v11e_sd15_shuffle_fp16.safetensors",
            "control_v11f1p_sd15_depth_fp16.safetensors",
            "control_v11p_sd15_canny_fp16.safetensors",
            "control_v11p_sd15_inpaint_fp16.safetensors",
            "control_v11p_sd15_lineart_fp16.safetensors",
            "control_v11p_sd15_mlsd_fp16.safetensors",
            "control_v11p_sd15_normalbae_fp16.safetensors",
            "control_v11p_sd15_openpose_fp16.safetensors",
            "control_v11p_sd15_scribble_fp16.safetensors",
            "control_v11p_sd15_seg_fp16.safetensors",
            "control_v11p_sd15_softedge_fp16.safetensors",
            "control_v11p_sd15s2_lineart_anime_fp16.safetensors",
            "control_v11u_sd15_tile_fp16.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "DiffControlNetLoader",
    "display_name": "Load ControlNet Model (diff)",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "StyleModelLoader": {
    "input": {
      "required": {
        "style_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "style_model_name"
      ]
    },
    "output": [
      "STYLE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STYLE_MODEL"
    ],
    "name": "StyleModelLoader",
    "display_name": "Load Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "CLIPVisionLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "SD15_CLIP-ViT-bigG-14-laion2B-39B-b160k.safetensors",
            "clip-vit-large-patch14-336.bin"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIPVisionLoader",
    "display_name": "Load CLIP Vision",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "VAEDecodeTiled": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 32
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to decode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecodeTiled",
    "display_name": "VAE Decode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "VAEEncodeTiled": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeTiled",
    "display_name": "VAE Encode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "unCLIPCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "name": "unCLIPCheckpointLoader",
    "display_name": "unCLIPCheckpointLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENLoader": {
    "input": {
      "required": {
        "gligen_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "gligen_name"
      ]
    },
    "output": [
      "GLIGEN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GLIGEN"
    ],
    "name": "GLIGENLoader",
    "display_name": "GLIGENLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENTextBoxApply": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "clip",
        "gligen_textbox_model",
        "text",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "GLIGENTextBoxApply",
    "display_name": "GLIGENTextBoxApply",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/gligen",
    "output_node": false
  },
  "InpaintModelConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels",
        "mask",
        "noise_mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InpaintModelConditioning",
    "display_name": "InpaintModelConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "CheckpointLoader": {
    "input": {
      "required": {
        "config_name": [
          []
        ],
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoader",
    "display_name": "Load Checkpoint With Config (DEPRECATED)",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false,
    "deprecated": true
  },
  "DiffusersLoader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "DiffusersLoader",
    "display_name": "DiffusersLoader",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders/deprecated",
    "output_node": false
  },
  "LoadLatent": {
    "input": {
      "required": {
        "latent": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LoadLatent",
    "display_name": "LoadLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "SaveLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLatent",
    "display_name": "SaveLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": true
  },
  "ConditioningZeroOut": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningZeroOut",
    "display_name": "ConditioningZeroOut",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ConditioningSetTimestepRange": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "start",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetTimestepRange",
    "display_name": "ConditioningSetTimestepRange",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "LoraLoaderModelOnly": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "add-detail-xl.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ip-adapter-faceid_sdxl_lora.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "strength_model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LoraLoaderModelOnly",
    "display_name": "LoraLoaderModelOnly",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "LatentAdd": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentAdd",
    "display_name": "LatentAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentSubtract": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentSubtract",
    "display_name": "LatentSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentMultiply": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "multiplier"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentMultiply",
    "display_name": "LatentMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentInterpolate": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "ratio"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentInterpolate",
    "display_name": "LatentInterpolate",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentBatch": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatch",
    "display_name": "LatentBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/batch",
    "output_node": false
  },
  "LatentBatchSeedBehavior": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "seed_behavior": [
          [
            "random",
            "fixed"
          ],
          {
            "default": "fixed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "seed_behavior"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatchSeedBehavior",
    "display_name": "LatentBatchSeedBehavior",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentApplyOperation": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "operation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentApplyOperation",
    "display_name": "LatentApplyOperation",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentApplyOperationCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "operation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LatentApplyOperationCFG",
    "display_name": "LatentApplyOperationCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationTonemapReinhard": {
    "input": {
      "required": {
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiplier"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationTonemapReinhard",
    "display_name": "LatentOperationTonemapReinhard",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationSharpen": {
    "input": {
      "required": {
        "sharpen_radius": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationSharpen",
    "display_name": "LatentOperationSharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "HypernetworkLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "hypernetwork_name": [
          []
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hypernetwork_name",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HypernetworkLoader",
    "display_name": "HypernetworkLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_hypernetwork",
    "category": "loaders",
    "output_node": false
  },
  "UpscaleModelLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x_NickelbackFS_72000_G.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4plus.pth",
            "RealESRGAN_x4plus_anime_6B.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "UpscaleModelLoader",
    "display_name": "Load Upscale Model",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "loaders",
    "output_node": false
  },
  "ImageUpscaleWithModel": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModel",
    "display_name": "Upscale Image (using Model)",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageBlend": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blend_mode": [
          [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "difference"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "blend_factor",
        "blend_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageBlur": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "blur_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "blur_radius",
        "sigma"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlur",
    "display_name": "Image Blur",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageQuantize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "none",
            "floyd-steinberg",
            "bayer-2",
            "bayer-4",
            "bayer-8",
            "bayer-16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "dither"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageQuantize",
    "display_name": "Image Quantize",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageSharpen": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSharpen",
    "display_name": "Image Sharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageScaleToTotalPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "megapixels": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "megapixels"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleToTotalPixels",
    "display_name": "Scale Image to Total Pixels",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/upscaling",
    "output_node": false
  },
  "LatentCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "LATENT"
        ],
        "source": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCompositeMasked",
    "display_name": "LatentCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "latent",
    "output_node": false
  },
  "ImageCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeMasked",
    "display_name": "ImageCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "image",
    "output_node": false
  },
  "MaskToImage": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MaskToImage",
    "display_name": "Convert Mask to Image",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue",
            "alpha"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageToMask",
    "display_name": "Convert Image to Mask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageColorToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageColorToMask",
    "display_name": "ImageColorToMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "SolidMask": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SolidMask",
    "display_name": "SolidMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "InvertMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "InvertMask",
    "display_name": "InvertMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "CropMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CropMask",
    "display_name": "CropMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskComposite": {
    "input": {
      "required": {
        "destination": [
          "MASK"
        ],
        "source": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "operation": [
          [
            "multiply",
            "add",
            "subtract",
            "and",
            "or",
            "xor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "operation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskComposite",
    "display_name": "MaskComposite",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "FeatherMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "left",
        "top",
        "right",
        "bottom"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "FeatherMask",
    "display_name": "FeatherMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "GrowMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "tapered_corners"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "GrowMask",
    "display_name": "GrowMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ThresholdMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "value": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ThresholdMask",
    "display_name": "ThresholdMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "PorterDuffImageComposite": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "source_alpha": [
          "MASK"
        ],
        "destination": [
          "IMAGE"
        ],
        "destination_alpha": [
          "MASK"
        ],
        "mode": [
          [
            "ADD",
            "CLEAR",
            "DARKEN",
            "DST",
            "DST_ATOP",
            "DST_IN",
            "DST_OUT",
            "DST_OVER",
            "LIGHTEN",
            "MULTIPLY",
            "OVERLAY",
            "SCREEN",
            "SRC",
            "SRC_ATOP",
            "SRC_IN",
            "SRC_OUT",
            "SRC_OVER",
            "XOR"
          ],
          {
            "default": "DST"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "source_alpha",
        "destination",
        "destination_alpha",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PorterDuffImageComposite",
    "display_name": "Porter-Duff Image Composite",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "SplitImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SplitImageWithAlpha",
    "display_name": "Split Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "JoinImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JoinImageWithAlpha",
    "display_name": "Join Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "RebatchLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RebatchLatents",
    "display_name": "Rebatch Latents",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "latent/batch",
    "output_node": false
  },
  "RebatchImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RebatchImages",
    "display_name": "Rebatch Images",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "image/batch",
    "output_node": false
  },
  "ModelMergeSimple": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSimple",
    "display_name": "ModelMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeBlocks": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "input": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "input",
        "middle",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeBlocks",
    "display_name": "ModelMergeBlocks",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeSubtract": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSubtract",
    "display_name": "ModelMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeAdd": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAdd",
    "display_name": "ModelMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CheckpointSave",
    "display_name": "Save Checkpoint",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "CLIPMergeSimple": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "ratio"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSimple",
    "display_name": "CLIPMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeSubtract": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "multiplier"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSubtract",
    "display_name": "CLIPMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeAdd": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeAdd",
    "display_name": "CLIPMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPSave": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "clip/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "clip",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CLIPSave",
    "display_name": "CLIPSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "VAESave": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "vae/ComfyUI_vae"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VAESave",
    "display_name": "VAESave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ModelSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSave",
    "display_name": "ModelSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "TomePatchModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TomePatchModel",
    "display_name": "TomePatchModel",
    "description": "",
    "python_module": "comfy_extras.nodes_tomesd",
    "category": "model_patches/unet",
    "output_node": false
  },
  "CLIPTextEncodeSDXLRefiner": {
    "input": {
      "required": {
        "ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "ascore",
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXLRefiner",
    "display_name": "CLIPTextEncodeSDXLRefiner",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeSDXL": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "text_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "text_g",
        "text_l"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL",
    "display_name": "CLIPTextEncodeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "Canny": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "low_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ],
        "high_threshold": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "low_threshold",
        "high_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Canny",
    "display_name": "Canny",
    "description": "",
    "python_module": "comfy_extras.nodes_canny",
    "category": "image/preprocessors",
    "output_node": false
  },
  "FreeU": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU",
    "display_name": "FreeU",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "FreeU_V2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.3,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.4,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU_V2",
    "display_name": "FreeU_V2",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "SamplerCustom": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "cfg",
        "positive",
        "negative",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustom",
    "display_name": "SamplerCustom",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "BasicScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scheduler",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BasicScheduler",
    "display_name": "BasicScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KarrasScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "KarrasScheduler",
    "display_name": "KarrasScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "ExponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "ExponentialScheduler",
    "display_name": "ExponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "PolyexponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "PolyexponentialScheduler",
    "display_name": "PolyexponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LaplaceScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "mu": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "mu",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LaplaceScheduler",
    "display_name": "LaplaceScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "VPScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "beta_d",
        "beta_min",
        "eps_s"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "VPScheduler",
    "display_name": "VPScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "BetaSamplingScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "alpha",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BetaSamplingScheduler",
    "display_name": "BetaSamplingScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SDTurboScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SDTurboScheduler",
    "display_name": "SDTurboScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KSamplerSelect": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "KSamplerSelect",
    "display_name": "KSamplerSelect",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestral",
    "display_name": "SamplerEulerAncestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestralCFGPP": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestralCFGPP",
    "display_name": "SamplerEulerAncestralCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerLMS": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLMS",
    "display_name": "SamplerLMS",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_3M_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_3M_SDE",
    "display_name": "SamplerDPMPP_3M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2M_SDE": {
    "input": {
      "required": {
        "solver_type": [
          [
            "midpoint",
            "heun"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "solver_type",
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2M_SDE",
    "display_name": "SamplerDPMPP_2M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "r": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "r",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_SDE",
    "display_name": "SamplerDPMPP_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2S_Ancestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2S_Ancestral",
    "display_name": "SamplerDPMPP_2S_Ancestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMAdaptative": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 3,
            "min": 2,
            "max": 3
          }
        ],
        "rtol": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "atol": [
          "FLOAT",
          {
            "default": 0.0078,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "h_init": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "pcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "icoeff": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "dcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "accept_safety": [
          "FLOAT",
          {
            "default": 0.81,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order",
        "rtol",
        "atol",
        "h_init",
        "pcoeff",
        "icoeff",
        "dcoeff",
        "accept_safety",
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMAdaptative",
    "display_name": "SamplerDPMAdaptative",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SplitSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "step"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmas",
    "display_name": "SplitSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SplitSigmasDenoise": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmasDenoise",
    "display_name": "SplitSigmasDenoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "FlipSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FlipSigmas",
    "display_name": "FlipSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SetFirstSigma": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 136.0,
            "min": 0.0,
            "max": 20000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "sigma"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SetFirstSigma",
    "display_name": "SetFirstSigma",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "CFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "CFGGuider",
    "display_name": "CFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "DualCFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond1": [
          "CONDITIONING"
        ],
        "cond2": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg_conds": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "cfg_cond2_negative": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond1",
        "cond2",
        "negative",
        "cfg_conds",
        "cfg_cond2_negative"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "DualCFGGuider",
    "display_name": "DualCFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "BasicGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "BasicGuider",
    "display_name": "BasicGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "RandomNoise": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "RandomNoise",
    "display_name": "RandomNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "DisableNoise": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "DisableNoise",
    "display_name": "DisableNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "AddNoise": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "noise": [
          "NOISE"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "noise",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "AddNoise",
    "display_name": "AddNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "_for_testing/custom_sampling/noise",
    "output_node": false
  },
  "SamplerCustomAdvanced": {
    "input": {
      "required": {
        "noise": [
          "NOISE"
        ],
        "guider": [
          "GUIDER"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "noise",
        "guider",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustomAdvanced",
    "display_name": "SamplerCustomAdvanced",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "HyperTile": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tile_size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 2048
          }
        ],
        "swap_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 128
          }
        ],
        "max_depth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10
          }
        ],
        "scale_depth": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tile_size",
        "swap_size",
        "max_depth",
        "scale_depth"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HyperTile",
    "display_name": "HyperTile",
    "description": "",
    "python_module": "comfy_extras.nodes_hypertile",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ModelSamplingDiscrete": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "eps",
            "v_prediction",
            "lcm",
            "x0"
          ]
        ],
        "zsnr": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "zsnr"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingDiscrete",
    "display_name": "ModelSamplingDiscrete",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousEDM": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction",
            "edm",
            "edm_playground_v2.5",
            "eps"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 120.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.002,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousEDM",
    "display_name": "ModelSamplingContinuousEDM",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 500.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.03,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousV",
    "display_name": "ModelSamplingContinuousV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingStableCascade": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingStableCascade",
    "display_name": "ModelSamplingStableCascade",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3",
    "display_name": "ModelSamplingSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingAuraFlow": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 1.73,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingAuraFlow",
    "display_name": "ModelSamplingAuraFlow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingFlux": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 1.15,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift",
        "width",
        "height"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingFlux",
    "display_name": "ModelSamplingFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "RescaleCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RescaleCFG",
    "display_name": "RescaleCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelComputeDtype": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "dtype": [
          [
            "default",
            "fp32",
            "fp16",
            "bf16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelComputeDtype",
    "display_name": "ModelComputeDtype",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/debug/model",
    "output_node": false
  },
  "PatchModelAddDownscale": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 9.0,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelAddDownscale",
    "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)",
    "description": "",
    "python_module": "comfy_extras.nodes_model_downscale",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ImageCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCrop",
    "display_name": "Image Crop",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "RepeatImageBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RepeatImageBatch",
    "display_name": "RepeatImageBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "ImageFromBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4095
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch",
    "display_name": "ImageFromBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "SaveAnimatedWEBP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "lossless": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "quality": [
          "INT",
          {
            "default": 80,
            "min": 0,
            "max": 100
          }
        ],
        "method": [
          [
            "default",
            "fastest",
            "slowest"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "lossless",
        "quality",
        "method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedWEBP",
    "display_name": "SaveAnimatedWEBP",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "SaveAnimatedPNG": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "compress_level": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "compress_level"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedPNG",
    "display_name": "SaveAnimatedPNG",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "ImageOnlyCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "name": "ImageOnlyCheckpointLoader",
    "display_name": "Image Only Checkpoint Loader (img2vid model)",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "loaders/video_models",
    "output_node": false
  },
  "SVD_img2vid_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SVD_img2vid_Conditioning",
    "display_name": "SVD_img2vid_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VideoLinearCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoLinearCFGGuidance",
    "display_name": "VideoLinearCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "VideoTriangleCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoTriangleCFGGuidance",
    "display_name": "VideoTriangleCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "ImageOnlyCheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageOnlyCheckpointSave",
    "display_name": "ImageOnlyCheckpointSave",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ConditioningSetAreaPercentageVideo": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "z": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "temporal",
        "x",
        "y",
        "z",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentageVideo",
    "display_name": "ConditioningSetAreaPercentageVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning",
    "output_node": false
  },
  "SelfAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -2.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale",
        "blur_sigma"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SelfAttentionGuidance",
    "display_name": "Self-Attention Guidance",
    "description": "",
    "python_module": "comfy_extras.nodes_sag",
    "category": "_for_testing",
    "output_node": false
  },
  "PerpNeg": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "empty_conditioning",
        "neg_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerpNeg",
    "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false,
    "deprecated": true
  },
  "PerpNegGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "empty_conditioning",
        "cfg",
        "neg_scale"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "PerpNegGuider",
    "display_name": "PerpNegGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false
  },
  "StableZero123_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning",
    "display_name": "StableZero123_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "StableZero123_Conditioning_Batched": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "elevation_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth",
        "elevation_batch_increment",
        "azimuth_batch_increment"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning_Batched",
    "display_name": "StableZero123_Conditioning_Batched",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SV3D_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -90.0,
            "max": 90.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "elevation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_Conditioning",
    "display_name": "SV3D_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SD_4XUpscale_Conditioning": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "scale_ratio": [
          "FLOAT",
          {
            "default": 4.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "positive",
        "negative",
        "scale_ratio",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SD_4XUpscale_Conditioning",
    "display_name": "SD_4XUpscale_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_sdupscale",
    "category": "conditioning/upscale_diffusion",
    "output_node": false
  },
  "PhotoMakerLoader": {
    "input": {
      "required": {
        "photomaker_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker_model_name"
      ]
    },
    "output": [
      "PHOTOMAKER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PHOTOMAKER"
    ],
    "name": "PhotoMakerLoader",
    "display_name": "PhotoMakerLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "PhotoMakerEncode": {
    "input": {
      "required": {
        "photomaker": [
          "PHOTOMAKER"
        ],
        "image": [
          "IMAGE"
        ],
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "photograph of photomaker"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker",
        "image",
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "PhotoMakerEncode",
    "display_name": "PhotoMakerEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "CLIPTextEncodePixArtAlpha": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodePixArtAlpha",
    "display_name": "CLIPTextEncodePixArtAlpha",
    "description": "Encodes text and sets the resolution conditioning for PixArt Alpha. Does not apply to PixArt Sigma.",
    "python_module": "comfy_extras.nodes_pixart",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeControlnet": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "conditioning",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeControlnet",
    "display_name": "CLIPTextEncodeControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_cond",
    "category": "_for_testing/conditioning",
    "output_node": false
  },
  "Morphology": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "operation": [
          [
            "erode",
            "dilate",
            "open",
            "close",
            "gradient",
            "bottom_hat",
            "top_hat"
          ]
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 3,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "operation",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Morphology",
    "display_name": "ImageMorphology",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/postprocessing",
    "output_node": false
  },
  "StableCascade_EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "compression",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_EmptyLatentImage",
    "display_name": "StableCascade_EmptyLatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageB_Conditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "stage_c": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "stage_c"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StableCascade_StageB_Conditioning",
    "display_name": "StableCascade_StageB_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "conditioning/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageC_VAEEncode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "compression"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_StageC_VAEEncode",
    "display_name": "StableCascade_StageC_VAEEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_SuperResolutionControlnet": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "controlnet_input",
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_SuperResolutionControlnet",
    "display_name": "StableCascade_SuperResolutionControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "_for_testing/stable_cascade",
    "output_node": false,
    "experimental": true
  },
  "DifferentialDiffusion": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "DifferentialDiffusion",
    "display_name": "Differential Diffusion",
    "description": "",
    "python_module": "comfy_extras.nodes_differential_diffusion",
    "category": "_for_testing",
    "output_node": false
  },
  "InstructPixToPixConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InstructPixToPixConditioning",
    "display_name": "InstructPixToPixConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_ip2p",
    "category": "conditioning/instructpix2pix",
    "output_node": false
  },
  "ModelMergeSD1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD1",
    "display_name": "ModelMergeSD1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD2": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD2",
    "display_name": "ModelMergeSD2",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSDXL": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0",
        "input_blocks.1",
        "input_blocks.2",
        "input_blocks.3",
        "input_blocks.4",
        "input_blocks.5",
        "input_blocks.6",
        "input_blocks.7",
        "input_blocks.8",
        "middle_block.0",
        "middle_block.1",
        "middle_block.2",
        "output_blocks.0",
        "output_blocks.1",
        "output_blocks.2",
        "output_blocks.3",
        "output_blocks.4",
        "output_blocks.5",
        "output_blocks.6",
        "output_blocks.7",
        "output_blocks.8",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSDXL",
    "display_name": "ModelMergeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD3_2B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD3_2B",
    "display_name": "ModelMergeSD3_2B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeAuraflow": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "init_x_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "positional_encoding": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cond_seq_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "register_tokens": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "modF.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "init_x_linear.",
        "positional_encoding",
        "cond_seq_linear.",
        "register_tokens",
        "t_embedder.",
        "double_layers.0.",
        "double_layers.1.",
        "double_layers.2.",
        "double_layers.3.",
        "single_layers.0.",
        "single_layers.1.",
        "single_layers.2.",
        "single_layers.3.",
        "single_layers.4.",
        "single_layers.5.",
        "single_layers.6.",
        "single_layers.7.",
        "single_layers.8.",
        "single_layers.9.",
        "single_layers.10.",
        "single_layers.11.",
        "single_layers.12.",
        "single_layers.13.",
        "single_layers.14.",
        "single_layers.15.",
        "single_layers.16.",
        "single_layers.17.",
        "single_layers.18.",
        "single_layers.19.",
        "single_layers.20.",
        "single_layers.21.",
        "single_layers.22.",
        "single_layers.23.",
        "single_layers.24.",
        "single_layers.25.",
        "single_layers.26.",
        "single_layers.27.",
        "single_layers.28.",
        "single_layers.29.",
        "single_layers.30.",
        "single_layers.31.",
        "modF.",
        "final_linear."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAuraflow",
    "display_name": "ModelMergeAuraflow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeFlux1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "img_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "guidance_in": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "vector_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "txt_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "img_in.",
        "time_in.",
        "guidance_in",
        "vector_in.",
        "txt_in.",
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeFlux1",
    "display_name": "ModelMergeFlux1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD35_Large": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "joint_blocks.24.",
        "joint_blocks.25.",
        "joint_blocks.26.",
        "joint_blocks.27.",
        "joint_blocks.28.",
        "joint_blocks.29.",
        "joint_blocks.30.",
        "joint_blocks.31.",
        "joint_blocks.32.",
        "joint_blocks.33.",
        "joint_blocks.34.",
        "joint_blocks.35.",
        "joint_blocks.36.",
        "joint_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD35_Large",
    "display_name": "ModelMergeSD35_Large",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeMochiPreview": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_frequencies.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_yproj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.40.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.41.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.42.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.43.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.44.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.45.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.46.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.47.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_frequencies.",
        "t_embedder.",
        "t5_y_embedder.",
        "t5_yproj.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "blocks.40.",
        "blocks.41.",
        "blocks.42.",
        "blocks.43.",
        "blocks.44.",
        "blocks.45.",
        "blocks.46.",
        "blocks.47.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeMochiPreview",
    "display_name": "ModelMergeMochiPreview",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeLTXV": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patchify_proj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "adaln_single.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "caption_projection.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_shift_table": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "proj_out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patchify_proj.",
        "adaln_single.",
        "caption_projection.",
        "transformer_blocks.0.",
        "transformer_blocks.1.",
        "transformer_blocks.2.",
        "transformer_blocks.3.",
        "transformer_blocks.4.",
        "transformer_blocks.5.",
        "transformer_blocks.6.",
        "transformer_blocks.7.",
        "transformer_blocks.8.",
        "transformer_blocks.9.",
        "transformer_blocks.10.",
        "transformer_blocks.11.",
        "transformer_blocks.12.",
        "transformer_blocks.13.",
        "transformer_blocks.14.",
        "transformer_blocks.15.",
        "transformer_blocks.16.",
        "transformer_blocks.17.",
        "transformer_blocks.18.",
        "transformer_blocks.19.",
        "transformer_blocks.20.",
        "transformer_blocks.21.",
        "transformer_blocks.22.",
        "transformer_blocks.23.",
        "transformer_blocks.24.",
        "transformer_blocks.25.",
        "transformer_blocks.26.",
        "transformer_blocks.27.",
        "scale_shift_table",
        "proj_out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeLTXV",
    "display_name": "ModelMergeLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos7B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos7B",
    "display_name": "ModelMergeCosmos7B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos14B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "blocks.block28.",
        "blocks.block29.",
        "blocks.block30.",
        "blocks.block31.",
        "blocks.block32.",
        "blocks.block33.",
        "blocks.block34.",
        "blocks.block35.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos14B",
    "display_name": "ModelMergeCosmos14B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "PerturbedAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerturbedAttentionGuidance",
    "display_name": "PerturbedAttentionGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_pag",
    "category": "model_patches/unet",
    "output_node": false
  },
  "AlignYourStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "SD1",
            "SDXL",
            "SVD"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "AlignYourStepsScheduler",
    "display_name": "AlignYourStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_align_your_steps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "UNetSelfAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetSelfAttentionMultiply",
    "display_name": "UNetSelfAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetCrossAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetCrossAttentionMultiply",
    "display_name": "UNetCrossAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "CLIPAttentionMultiply": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPAttentionMultiply",
    "display_name": "CLIPAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetTemporalAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "self_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "self_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "self_structural",
        "self_temporal",
        "cross_structural",
        "cross_temporal"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetTemporalAttentionMultiply",
    "display_name": "UNetTemporalAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "SamplerLCMUpscale": {
    "input": {
      "required": {
        "scale_ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "scale_steps": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "bislerp",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_ratio",
        "scale_steps",
        "upscale_method"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLCMUpscale",
    "display_name": "SamplerLCMUpscale",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerCFGpp": {
    "input": {
      "required": {
        "version": [
          [
            "regular",
            "alternative"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "version"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerCFGpp",
    "display_name": "SamplerEulerCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "_for_testing",
    "output_node": false
  },
  "WebcamCapture": {
    "input": {
      "required": {
        "image": [
          "WEBCAM",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "capture_on_queue": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "capture_on_queue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "WebcamCapture",
    "display_name": "Webcam Capture",
    "description": "",
    "python_module": "comfy_extras.nodes_webcam",
    "category": "image",
    "output_node": false
  },
  "EmptyLatentAudio": {
    "input": {
      "required": {
        "seconds": [
          "FLOAT",
          {
            "default": 47.6,
            "min": 1.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seconds",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentAudio",
    "display_name": "EmptyLatentAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEEncodeAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeAudio",
    "display_name": "VAEEncodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEDecodeAudio": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "VAEDecodeAudio",
    "display_name": "VAEDecodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "SaveAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudio",
    "display_name": "SaveAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "LoadAudio": {
    "input": {
      "required": {
        "audio": [
          [],
          {
            "audio_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "LoadAudio",
    "display_name": "LoadAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": false
  },
  "PreviewAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAudio",
    "display_name": "PreviewAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "ConditioningStableAudio": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seconds_start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "seconds_total": [
          "FLOAT",
          {
            "default": 47.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "seconds_start",
        "seconds_total"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ConditioningStableAudio",
    "display_name": "ConditioningStableAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "conditioning",
    "output_node": false
  },
  "TripleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "clip_g.safetensors",
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "clip_g.safetensors",
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors"
          ]
        ],
        "clip_name3": [
          [
            "clip_g.safetensors",
            "clip_l.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "TripleCLIPLoader",
    "display_name": "TripleCLIPLoader",
    "description": "[Recipes]\n\nsd3: clip-l, clip-g, t5",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/loaders",
    "output_node": false
  },
  "EmptySD3LatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptySD3LatentImage",
    "display_name": "EmptySD3LatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "latent/sd3",
    "output_node": false
  },
  "CLIPTextEncodeSD3": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "empty_padding": [
          [
            "none",
            "empty_prompt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "empty_padding"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSD3",
    "display_name": "CLIPTextEncodeSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ControlNetApplySD3": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplySD3",
    "display_name": "Apply Controlnet with VAE",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "SkipLayerGuidanceSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "layers",
        "scale",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceSD3",
    "display_name": "SkipLayerGuidanceSD3",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "GITSScheduler": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "GITSScheduler",
    "display_name": "GITSScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_gits",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SetUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetUnionControlNetType",
    "display_name": "SetUnionControlNetType",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetInpaintingAliMamaApply": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "mask",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetInpaintingAliMamaApply",
    "display_name": "ControlNetInpaintingAliMamaApply",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "CLIPTextEncodeHunyuanDiT": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "bert": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "mt5xl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "bert",
        "mt5xl"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHunyuanDiT",
    "display_name": "CLIPTextEncodeHunyuanDiT",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "EmptyHunyuanLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyHunyuanLatentVideo",
    "display_name": "EmptyHunyuanLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "latent/video",
    "output_node": false
  },
  "CLIPTextEncodeFlux": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "t5xxl",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeFlux",
    "display_name": "CLIPTextEncodeFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxGuidance",
    "display_name": "FluxGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxDisableGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxDisableGuidance",
    "display_name": "FluxDisableGuidance",
    "description": "This node completely disables the guidance embed on Flux and Flux like models",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "LoraSave": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_extracted_lora"
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "lora_type": [
          [
            "standard",
            "full_diff"
          ]
        ],
        "bias_diff": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "model_diff": [
          "MODEL",
          {
            "tooltip": "The ModelSubtract output to be converted to a lora."
          }
        ],
        "text_encoder_diff": [
          "CLIP",
          {
            "tooltip": "The CLIPSubtract output to be converted to a lora."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "rank",
        "lora_type",
        "bias_diff"
      ],
      "optional": [
        "model_diff",
        "text_encoder_diff"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraSave",
    "display_name": "Extract and Save Lora",
    "description": "",
    "python_module": "comfy_extras.nodes_lora_extract",
    "category": "_for_testing",
    "output_node": true
  },
  "TorchCompileModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModel",
    "display_name": "TorchCompileModel",
    "description": "",
    "python_module": "comfy_extras.nodes_torch_compile",
    "category": "_for_testing",
    "output_node": false,
    "experimental": true
  },
  "EmptyMochiLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 7,
            "max": 16384,
            "step": 6
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyMochiLatentVideo",
    "display_name": "EmptyMochiLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_mochi",
    "category": "latent/video",
    "output_node": false
  },
  "SkipLayerGuidanceDiT": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "double_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "single_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "rescaling_scale": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "double_layers",
        "single_layers",
        "scale",
        "start_percent",
        "end_percent",
        "rescaling_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceDiT",
    "display_name": "SkipLayerGuidanceDiT",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_slg",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "Mahiro": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "patched_model"
    ],
    "name": "Mahiro",
    "display_name": "Mahiro is so cute that she deserves a better guidance function!! (。・ω・。)",
    "description": "Modify the guidance to scale more on the 'direction' of the positive prompt rather than the difference between the negative prompt.",
    "python_module": "comfy_extras.nodes_mahiro",
    "category": "_for_testing",
    "output_node": false
  },
  "EmptyLTXVLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLTXVLatentVideo",
    "display_name": "EmptyLTXVLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "latent/video/ltxv",
    "output_node": false
  },
  "LTXVImgToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 9,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "image",
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVImgToVideo",
    "display_name": "LTXVImgToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "ModelSamplingLTXV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingLTXV",
    "display_name": "ModelSamplingLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "advanced/model",
    "output_node": false
  },
  "LTXVConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "frame_rate": [
          "FLOAT",
          {
            "default": 25.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "frame_rate"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "LTXVConditioning",
    "display_name": "LTXVConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "stretch": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Stretch the sigmas to be in the range [terminal, 1]."
          }
        ],
        "terminal": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 0.99,
            "step": 0.01,
            "tooltip": "The terminal value of the sigmas after stretching."
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "max_shift",
        "base_shift",
        "stretch",
        "terminal"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LTXVScheduler",
    "display_name": "LTXVScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LTXVAddGuide": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "Image or video to condition the latent video on. Must be 8*n + 1 frames.If the video is not 8*n + 1 frames, it will be cropped to the nearest 8*n + 1 frames."
          }
        ],
        "frame_idx": [
          "INT",
          {
            "default": 0,
            "min": -9999,
            "max": 9999,
            "tooltip": "Frame index to start the conditioning at. Must be divisible by 8. If a frame is not divisible by 8, it will be rounded down to the nearest multiple of 8. Negative values are counted from the end of the video."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "latent",
        "image",
        "frame_idx",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVAddGuide",
    "display_name": "LTXVAddGuide",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVPreprocess": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "img_compression": [
          "INT",
          {
            "default": 35,
            "min": 0,
            "max": 100,
            "tooltip": "Amount of compression to apply on image."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "img_compression"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output_image"
    ],
    "name": "LTXVPreprocess",
    "display_name": "LTXVPreprocess",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "image",
    "output_node": false
  },
  "LTXVCropGuides": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "latent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVCropGuides",
    "display_name": "LTXVCropGuides",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "CreateHookLora": {
    "input": {
      "required": {
        "lora_name": [
          [
            "add-detail-xl.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ip-adapter-faceid_sdxl_lora.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLora",
    "display_name": "Create Hook LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookLoraModelOnly": {
    "input": {
      "required": {
        "lora_name": [
          [
            "add-detail-xl.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ip-adapter-faceid_sdxl_lora.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLoraModelOnly",
    "display_name": "Create Hook LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLora": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLora",
    "display_name": "Create Hook Model as LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLoraModelOnly": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLoraModelOnly",
    "display_name": "Create Hook Model as LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "SetHookKeyframes": {
    "input": {
      "required": {
        "hooks": [
          "HOOKS"
        ]
      },
      "optional": {
        "hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "hooks"
      ],
      "optional": [
        "hook_kf"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "SetHookKeyframes",
    "display_name": "Set Hook Keyframes",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframe": {
    "input": {
      "required": {
        "strength_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_mult",
        "start_percent"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframe",
    "display_name": "Create Hook Keyframe",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesInterpolated": {
    "input": {
      "required": {
        "strength_start": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "keyframes_count": [
          "INT",
          {
            "default": 5,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_start",
        "strength_end",
        "interpolation",
        "start_percent",
        "end_percent",
        "keyframes_count",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesInterpolated",
    "display_name": "Create Hook Keyframes Interp.",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesFromFloats": {
    "input": {
      "required": {
        "floats_strength": [
          "FLOATS",
          {
            "default": -1,
            "min": -1,
            "step": 0.001,
            "forceInput": true
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats_strength",
        "start_percent",
        "end_percent",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesFromFloats",
    "display_name": "Create Hook Keyframes From Floats",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks2": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks2",
    "display_name": "Combine Hooks [2]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks4": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks4",
    "display_name": "Combine Hooks [4]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks8": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ],
        "hooks_E": [
          "HOOKS"
        ],
        "hooks_F": [
          "HOOKS"
        ],
        "hooks_G": [
          "HOOKS"
        ],
        "hooks_H": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D",
        "hooks_E",
        "hooks_F",
        "hooks_G",
        "hooks_H"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks8",
    "display_name": "Combine Hooks [8]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetProperties": {
    "input": {
      "required": {
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetProperties",
    "display_name": "Cond Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetPropertiesAndCombine",
    "display_name": "Cond Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetProperties": {
    "input": {
      "required": {
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetProperties",
    "display_name": "Cond Pair Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetPropertiesAndCombine",
    "display_name": "Cond Pair Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetDefaultCombine",
    "display_name": "Cond Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_DEFAULT": [
          "CONDITIONING"
        ],
        "negative_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_DEFAULT",
        "negative_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetDefaultCombine",
    "display_name": "Cond Pair Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningCombine": {
    "input": {
      "required": {
        "positive_A": [
          "CONDITIONING"
        ],
        "negative_A": [
          "CONDITIONING"
        ],
        "positive_B": [
          "CONDITIONING"
        ],
        "negative_B": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_A",
        "negative_A",
        "positive_B",
        "negative_B"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningCombine",
    "display_name": "Cond Pair Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "SetClipHooks": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_conds": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "schedule_clip": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_conds",
        "schedule_clip"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SetClipHooks",
    "display_name": "Set CLIP Hooks",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/clip",
    "output_node": false,
    "experimental": true
  },
  "ConditioningTimestepsRange": {
    "input": {
      "required": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "TIMESTEPS_RANGE",
      "BEFORE_RANGE",
      "AFTER_RANGE"
    ],
    "name": "ConditioningTimestepsRange",
    "display_name": "Timesteps Range",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks",
    "output_node": false,
    "experimental": true
  },
  "Load3D": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "material": [
          [
            "original",
            "normal",
            "wireframe",
            "depth"
          ]
        ],
        "up_direction": [
          [
            "original",
            "-x",
            "+x",
            "-y",
            "+y",
            "-z",
            "+z"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height",
        "material",
        "up_direction"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path"
    ],
    "name": "Load3D",
    "display_name": "Load 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Load3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D_ANIMATION",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "material": [
          [
            "original",
            "normal",
            "wireframe",
            "depth"
          ]
        ],
        "up_direction": [
          [
            "original",
            "-x",
            "+x",
            "-y",
            "+y",
            "-z",
            "+z"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height",
        "material",
        "up_direction"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path"
    ],
    "name": "Load3DAnimation",
    "display_name": "Load 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Preview3D": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "material": [
          [
            "original",
            "normal",
            "wireframe",
            "depth"
          ]
        ],
        "up_direction": [
          [
            "original",
            "-x",
            "+x",
            "-y",
            "+y",
            "-z",
            "+z"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "material",
        "up_direction"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3D",
    "display_name": "Preview 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "Preview3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "material": [
          [
            "original",
            "normal",
            "wireframe",
            "depth"
          ]
        ],
        "up_direction": [
          [
            "original",
            "-x",
            "+x",
            "-y",
            "+y",
            "-z",
            "+z"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "material",
        "up_direction"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3DAnimation",
    "display_name": "Preview 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "EmptyCosmosLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyCosmosLatentVideo",
    "display_name": "EmptyCosmosLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "latent/video",
    "output_node": false
  },
  "CosmosImageToVideoLatent": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "CosmosImageToVideoLatent",
    "display_name": "CosmosImageToVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "SaveWEBM": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "codec": [
          [
            "vp9",
            "av1"
          ]
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "crf": [
          "FLOAT",
          {
            "default": 32.0,
            "min": 0,
            "max": 63.0,
            "step": 1,
            "tooltip": "Higher crf means lower quality with a smaller file size, lower crf means higher quality higher filesize."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "codec",
        "fps",
        "crf"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveWEBM",
    "display_name": "SaveWEBM",
    "description": "",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": true,
    "experimental": true
  },
  "CLIPTextEncodeLumina2": {
    "input": {
      "required": {
        "system_prompt": [
          [
            "superior",
            "alignment"
          ],
          {
            "tooltip": "Lumina2 provide two types of system prompts:Superior: You are an assistant designed to generate superior images with the superior degree of image-text alignment based on textual prompts or user prompts. Alignment: You are an assistant designed to generate high-quality images with the highest degree of image-text alignment based on textual prompts."
          }
        ],
        "user_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "system_prompt",
        "user_prompt",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeLumina2",
    "display_name": "CLIP Text Encode for Lumina2",
    "description": "Encodes a system prompt and a user prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "RenormCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cfg_trunc": [
          "FLOAT",
          {
            "default": 100,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "renorm_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cfg_trunc",
        "renorm_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RenormCFG",
    "display_name": "RenormCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "advanced/model",
    "output_node": false
  },
  "WanImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanImageToVideo",
    "display_name": "WanImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "InspyrenetRembg": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "torchscript_jit": [
          [
            "default",
            "on"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "torchscript_jit"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "InspyrenetRembg",
    "display_name": "Inspyrenet Rembg",
    "description": "",
    "python_module": "custom_nodes.comfyui-inspyrenet-rembg",
    "category": "image",
    "output_node": false
  },
  "InspyrenetRembgAdvanced": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "torchscript_jit": [
          [
            "default",
            "on"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold",
        "torchscript_jit"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "InspyrenetRembgAdvanced",
    "display_name": "Inspyrenet Rembg Advanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-inspyrenet-rembg",
    "category": "image",
    "output_node": false
  },
  "ConditioningBlend": {
    "input": {
      "required": {
        "conditioning_a": [
          "CONDITIONING"
        ],
        "conditioning_b": [
          "CONDITIONING"
        ],
        "blending_mode": [
          [
            "add",
            "bislerp",
            "cosine interp",
            "cuberp",
            "difference",
            "exclusion",
            "hslerp",
            "inject",
            "lerp",
            "random",
            "slerp",
            "subtract"
          ]
        ],
        "blending_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_a",
        "conditioning_b",
        "blending_mode",
        "blending_strength",
        "seed"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "conditioning"
    ],
    "name": "ConditioningBlend",
    "display_name": "Conditioning (Blend)",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "conditioning",
    "output_node": false
  },
  "DebugInput": {
    "input": {
      "required": {
        "input": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "DebugInput",
    "display_name": "Debug Input",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "debug",
    "output_node": true
  },
  "VAEEncodeForInpaint (WAS)": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "mask_offset": [
          "INT",
          {
            "default": 6,
            "min": -128,
            "max": 128,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "mask_offset"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeForInpaint (WAS)",
    "display_name": "Inpainting VAE Encode (WAS)",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "latent/inpaint",
    "output_node": false
  },
  "VividSharpen": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.01,
            "max": 64.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "radius",
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "VividSharpen",
    "display_name": "VividSharpen",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "image/postprocessing",
    "output_node": false
  },
  "CLIPTextEncodeList": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++"
          ]
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "0:A portrait of a rosebud\n5:A portrait of a blooming rosebud\n10:A portrait of a blooming rose\n15:A portrait of a rose"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "token_normalization",
        "weight_interpretation",
        "text"
      ]
    },
    "output": [
      "CONDITIONING_SEQ"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "conditioning_sequence"
    ],
    "name": "CLIPTextEncodeList",
    "display_name": "CLIP Text Encode Sequence (Advanced)",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "conditioning",
    "output_node": false
  },
  "CLIPTextEncodeSequence2": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++"
          ]
        ],
        "cond_keyframes_type": [
          [
            "linear",
            "sinus",
            "sinus_inverted",
            "half_sinus",
            "half_sinus_inverted"
          ]
        ],
        "frame_count": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 1024,
            "step": 1
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "A portrait of a rosebud\nA portrait of a blooming rosebud\nA portrait of a blooming rose\nA portrait of a rose"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "token_normalization",
        "weight_interpretation",
        "cond_keyframes_type",
        "frame_count",
        "text"
      ]
    },
    "output": [
      "CONDITIONING",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "conditioning_sequence",
      "cond_keyframes",
      "frame_count"
    ],
    "name": "CLIPTextEncodeSequence2",
    "display_name": "CLIP Text Encode Sequence (v2)",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "conditioning",
    "output_node": false
  },
  "KSamplerSeq": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "seed_mode_seq": [
          [
            "increment",
            "decrement",
            "random",
            "fixed"
          ]
        ],
        "alternate_values": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sequence_loop_count": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 1024,
            "step": 1
          }
        ],
        "positive_seq": [
          "CONDITIONING_SEQ"
        ],
        "negative_seq": [
          "CONDITIONING_SEQ"
        ],
        "use_conditioning_slerp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "cond_slerp_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "latent_image": [
          "LATENT"
        ],
        "use_latent_interpolation": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "latent_interpolation_mode": [
          [
            "Blend",
            "Slerp",
            "Cosine Interp"
          ]
        ],
        "latent_interp_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "denoise_start": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "denoise_seq": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "unsample_latents": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "seed_mode_seq",
        "alternate_values",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "sequence_loop_count",
        "positive_seq",
        "negative_seq",
        "use_conditioning_slerp",
        "cond_slerp_strength",
        "latent_image",
        "use_latent_interpolation",
        "latent_interpolation_mode",
        "latent_interp_strength",
        "denoise_start",
        "denoise_seq",
        "unsample_latents"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerSeq",
    "display_name": "KSampler Sequence",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "sampling",
    "output_node": false
  },
  "KSamplerSeq2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "seed_mode_seq": [
          [
            "increment",
            "decrement",
            "random",
            "fixed"
          ]
        ],
        "alternate_values": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "frame_count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ],
        "cond_keyframes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ],
        "positive_seq": [
          "CONDITIONING"
        ],
        "negative_seq": [
          "CONDITIONING"
        ],
        "use_conditioning_slerp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "cond_slerp_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "latent_image": [
          "LATENT"
        ],
        "use_latent_interpolation": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "latent_interpolation_mode": [
          [
            "Blend",
            "Slerp",
            "Cosine Interp"
          ]
        ],
        "latent_interp_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "denoise_start": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "denoise_seq": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "unsample_latents": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "inject_noise": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_strength": [
          "FLOAT",
          {
            "default": 0.1,
            "max": 1.0,
            "min": 0.001,
            "step": 0.001
          }
        ],
        "denoise_sine": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "denoise_max": [
          "FLOAT",
          {
            "default": 0.9,
            "max": 1.0,
            "min": 0.0,
            "step": 0.001
          }
        ],
        "seed_keying": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "seed_keying_mode": [
          [
            "sine",
            "modulo"
          ]
        ],
        "seed_divisor": [
          "INT",
          {
            "default": 4,
            "max": 1024,
            "min": 2,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "seed_mode_seq",
        "alternate_values",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "frame_count",
        "cond_keyframes",
        "positive_seq",
        "negative_seq",
        "use_conditioning_slerp",
        "cond_slerp_strength",
        "latent_image",
        "use_latent_interpolation",
        "latent_interpolation_mode",
        "latent_interp_strength",
        "denoise_start",
        "denoise_seq",
        "unsample_latents",
        "inject_noise",
        "noise_strength",
        "denoise_sine",
        "denoise_max",
        "seed_keying",
        "seed_keying_mode",
        "seed_divisor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerSeq2",
    "display_name": "KSampler Sequence (v2)",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "sampling",
    "output_node": false
  },
  "BLVAEEncode": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ],
        "store_or_load_latent": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "remove_latent_on_load": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "delete_workflow_latent": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "vae",
        "tiled",
        "tile_size",
        "store_or_load_latent",
        "remove_latent_on_load",
        "delete_workflow_latent"
      ],
      "optional": [
        "image"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent"
    ],
    "name": "BLVAEEncode",
    "display_name": "VAEEncode (Bundle Latent)",
    "description": "",
    "python_module": "custom_nodes.WAS_Extras",
    "category": "latent",
    "output_node": false
  },
  "TermsToList": {
    "input": {
      "required": {
        "terms": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "terms"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "one_list"
    ],
    "name": "TermsToList",
    "display_name": "TermsToList",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/list",
    "output_node": false
  },
  "EvaluateMultiple1": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "out1"
    ],
    "name": "EvaluateMultiple1",
    "display_name": "EvaluateMultiple1",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "EvaluateMultiple3": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ],
        "in2": [
          "*",
          {}
        ],
        "in3": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1",
        "in2",
        "in3"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "out1",
      "out2",
      "out3"
    ],
    "name": "EvaluateMultiple3",
    "display_name": "EvaluateMultiple3",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "EvaluateMultiple6": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ],
        "in2": [
          "*",
          {}
        ],
        "in3": [
          "*",
          {}
        ],
        "in4": [
          "*",
          {}
        ],
        "in5": [
          "*",
          {}
        ],
        "in6": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1",
        "in2",
        "in3",
        "in4",
        "in5",
        "in6"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "out1",
      "out2",
      "out3",
      "out4",
      "out5",
      "out6"
    ],
    "name": "EvaluateMultiple6",
    "display_name": "EvaluateMultiple6",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "EvaluateMultiple9": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ],
        "in2": [
          "*",
          {}
        ],
        "in3": [
          "*",
          {}
        ],
        "in4": [
          "*",
          {}
        ],
        "in5": [
          "*",
          {}
        ],
        "in6": [
          "*",
          {}
        ],
        "in7": [
          "*",
          {}
        ],
        "in8": [
          "*",
          {}
        ],
        "in9": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1",
        "in2",
        "in3",
        "in4",
        "in5",
        "in6",
        "in7",
        "in8",
        "in9"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "out1",
      "out2",
      "out3",
      "out4",
      "out5",
      "out6",
      "out7",
      "out8",
      "out9"
    ],
    "name": "EvaluateMultiple9",
    "display_name": "EvaluateMultiple9",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "EvaluateListMultiple1": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "# 表达式为element-wise，合并时自动跳过全None的输出",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "out1"
    ],
    "name": "EvaluateListMultiple1",
    "display_name": "EvaluateListMultiple1",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "EvaluateListMultiple3": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "# 表达式为element-wise，合并时自动跳过全None的输出",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ],
        "in2": [
          "*",
          {}
        ],
        "in3": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1",
        "in2",
        "in3"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      true,
      true,
      true
    ],
    "output_name": [
      "out1",
      "out2",
      "out3"
    ],
    "name": "EvaluateListMultiple3",
    "display_name": "EvaluateListMultiple3",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "EvaluateListMultiple6": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "# 表达式为element-wise，合并时自动跳过全None的输出",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ],
        "in2": [
          "*",
          {}
        ],
        "in3": [
          "*",
          {}
        ],
        "in4": [
          "*",
          {}
        ],
        "in5": [
          "*",
          {}
        ],
        "in6": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1",
        "in2",
        "in3",
        "in4",
        "in5",
        "in6"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      true,
      true,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "out1",
      "out2",
      "out3",
      "out4",
      "out5",
      "out6"
    ],
    "name": "EvaluateListMultiple6",
    "display_name": "EvaluateListMultiple6",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "EvaluateListMultiple9": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "default": "# 表达式为element-wise，合并时自动跳过全None的输出",
            "multiline": true
          }
        ],
        "input_count": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "in1": [
          "*",
          {}
        ],
        "in2": [
          "*",
          {}
        ],
        "in3": [
          "*",
          {}
        ],
        "in4": [
          "*",
          {}
        ],
        "in5": [
          "*",
          {}
        ],
        "in6": [
          "*",
          {}
        ],
        "in7": [
          "*",
          {}
        ],
        "in8": [
          "*",
          {}
        ],
        "in9": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "expression",
        "input_count",
        "print_to_console"
      ],
      "optional": [
        "in1",
        "in2",
        "in3",
        "in4",
        "in5",
        "in6",
        "in7",
        "in8",
        "in9"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "out1",
      "out2",
      "out3",
      "out4",
      "out5",
      "out6",
      "out7",
      "out8",
      "out9"
    ],
    "name": "EvaluateListMultiple9",
    "display_name": "EvaluateListMultiple9",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/evaluate",
    "output_node": false
  },
  "ListPath": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "delimiter": [
          "STRING",
          {
            "multiline": false,
            "default": ","
          }
        ],
        "count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path"
      ],
      "optional": [
        "prefix",
        "suffix",
        "delimiter",
        "count"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "path",
      "show_help"
    ],
    "name": "ListPath",
    "display_name": "ListPath",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/path",
    "output_node": false
  },
  "StringPathStem": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "stem"
    ],
    "name": "StringPathStem",
    "display_name": "String Get Stem From Path",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/string",
    "output_node": false
  },
  "StringAsAny": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "StringAsAny",
    "display_name": "String As Any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/any",
    "output_node": false
  },
  "StringConcat1": {
    "input": {
      "required": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "join_with_space": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prefix",
        "suffix",
        "join_with_space"
      ],
      "optional": [
        "text_1"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text_1"
    ],
    "name": "StringConcat1",
    "display_name": "String Concate 1 Parallelly",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/string",
    "output_node": false
  },
  "StringConcat3": {
    "input": {
      "required": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "join_with_space": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prefix",
        "suffix",
        "join_with_space"
      ],
      "optional": [
        "text_1",
        "text_2",
        "text_3"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "text_1",
      "text_2",
      "text_3"
    ],
    "name": "StringConcat3",
    "display_name": "String Concate 3 Parallelly",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/string",
    "output_node": false
  },
  "StringConcat6": {
    "input": {
      "required": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "join_with_space": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_6": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prefix",
        "suffix",
        "join_with_space"
      ],
      "optional": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_6"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "text_1",
      "text_2",
      "text_3",
      "text_4",
      "text_5",
      "text_6"
    ],
    "name": "StringConcat6",
    "display_name": "String Concate 6 Parallelly",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/string",
    "output_node": false
  },
  "StringConcat9": {
    "input": {
      "required": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "join_with_space": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_6": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_7": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_8": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_9": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prefix",
        "suffix",
        "join_with_space"
      ],
      "optional": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_6",
        "text_7",
        "text_8",
        "text_9"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "text_1",
      "text_2",
      "text_3",
      "text_4",
      "text_5",
      "text_6",
      "text_7",
      "text_8",
      "text_9"
    ],
    "name": "StringConcat9",
    "display_name": "String Concate 9 Parallelly",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/string",
    "output_node": false
  },
  "RangeSplit": {
    "input": {
      "required": {
        "total_begin": [
          "INT",
          {
            "default": 0,
            "min": -9999,
            "max": 9999
          }
        ],
        "total_end": [
          "INT",
          {
            "default": 1,
            "min": -9999,
            "max": 9999
          }
        ],
        "batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 9999
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "intervals": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "total_begin",
        "total_end",
        "batch",
        "overlap",
        "intervals"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      true
    ],
    "output_name": [
      "begin",
      "end",
      "length"
    ],
    "name": "RangeSplit",
    "display_name": "Split Range To Multiple Intervals",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/range",
    "output_node": false
  },
  "ImageDilate": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "kernel_height": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ],
        "kernel_width": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "kernel_height",
        "kernel_width"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageDilate",
    "display_name": "ImageDilate(膨胀)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/image",
    "output_node": false
  },
  "ImageErode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "kernel_height": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ],
        "kernel_width": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "kernel_height",
        "kernel_width"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageErode",
    "display_name": "ImageErode(腐蚀)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/image",
    "output_node": false
  },
  "MaskDilate": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "kernel_height": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ],
        "kernel_width": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "kernel_height",
        "kernel_width"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskDilate",
    "display_name": "MaskDilate(膨胀)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/mask",
    "output_node": false
  },
  "MaskErode": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "kernel_height": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ],
        "kernel_width": [
          "FLOAT",
          {
            "default": 0.005,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "kernel_height",
        "kernel_width"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskErode",
    "display_name": "MaskErode(腐蚀)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/mask",
    "output_node": false
  },
  "SaveMask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI_Mask"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "masks",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveMask",
    "display_name": "Save Mask",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/mask",
    "output_node": true
  },
  "PreviewMask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI_Mask"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "masks",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewMask",
    "display_name": "Preview Mask",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/mask",
    "output_node": true
  },
  "VAEDecodeSave": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VAEDecodeSave",
    "display_name": "VAE decode and save image to file",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-RuiquNodes",
    "category": "ruiqu/latent",
    "output_node": true
  },
  "BLIP Model Loader": {
    "input": {
      "required": {
        "blip_model": [
          "STRING",
          {
            "default": "Salesforce/blip-image-captioning-base"
          }
        ],
        "vqa_model_id": [
          "STRING",
          {
            "default": "Salesforce/blip-vqa-base"
          }
        ],
        "device": [
          [
            "cuda",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "blip_model",
        "vqa_model_id",
        "device"
      ]
    },
    "output": [
      "BLIP_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BLIP_MODEL"
    ],
    "name": "BLIP Model Loader",
    "display_name": "BLIP Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Blend Latents": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "operation": [
          [
            "add",
            "multiply",
            "divide",
            "subtract",
            "overlay",
            "hard_light",
            "soft_light",
            "screen",
            "linear_dodge",
            "difference",
            "exclusion",
            "random"
          ]
        ],
        "blend": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "operation",
        "blend"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Blend Latents",
    "display_name": "Blend Latents",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Bus Node": {
    "input": {
      "required": {},
      "optional": {
        "bus": [
          "BUS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "bus",
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BUS",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "bus",
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "Bus Node",
    "display_name": "Bus Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Cache Node": {
    "input": {
      "required": {
        "latent_suffix": [
          "STRING",
          {
            "default": "73920664_cache",
            "multiline": false
          }
        ],
        "image_suffix": [
          "STRING",
          {
            "default": "69233147_cache",
            "multiline": false
          }
        ],
        "conditioning_suffix": [
          "STRING",
          {
            "default": "73367724_cache",
            "multiline": false
          }
        ]
      },
      "optional": {
        "output_path": [
          "STRING",
          {
            "default": "/home/ren_koya/image_editor/custom_nodes/was-node-suite-comfyui/cache",
            "multiline": false
          }
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_suffix",
        "image_suffix",
        "conditioning_suffix"
      ],
      "optional": [
        "output_path",
        "latent",
        "image",
        "conditioning"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "latent_filename",
      "image_filename",
      "conditioning_filename"
    ],
    "name": "Cache Node",
    "display_name": "Cache Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Checkpoint Loader": {
    "input": {
      "required": {
        "config_name": [
          []
        ],
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader",
    "display_name": "Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Checkpoint Loader (Simple)": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader (Simple)",
    "display_name": "Checkpoint Loader (Simple)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPTextEncode (NSP)": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "conditioning",
      "parsed_text",
      "raw_text"
    ],
    "name": "CLIPTextEncode (NSP)",
    "display_name": "CLIPTextEncode (NSP)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Conditioning",
    "output_node": true
  },
  "CLIP Input Switch": {
    "input": {
      "required": {
        "clip_a": [
          "CLIP"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_a",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIP Input Switch",
    "display_name": "CLIP Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "CLIP Vision Input Switch": {
    "input": {
      "required": {
        "clip_vision_a": [
          "CLIP_VISION"
        ],
        "clip_vision_b": [
          "CLIP_VISION"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision_a",
        "clip_vision_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIP Vision Input Switch",
    "display_name": "CLIP Vision Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Conditioning Input Switch": {
    "input": {
      "required": {
        "conditioning_a": [
          "CONDITIONING"
        ],
        "conditioning_b": [
          "CONDITIONING"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_a",
        "conditioning_b",
        "boolean"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Conditioning Input Switch",
    "display_name": "Conditioning Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Constant Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "number": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "number_as_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "number"
      ],
      "optional": [
        "number_as_text"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Constant Number",
    "display_name": "Constant Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Create Grid Image": {
    "input": {
      "required": {
        "images_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/",
            "multiline": false
          }
        ],
        "pattern_glob": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "include_subfolders": [
          [
            "false",
            "true"
          ]
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 1280,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_path",
        "pattern_glob",
        "include_subfolders",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image",
    "display_name": "Create Grid Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Grid Image from Batch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 2048,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image from Batch",
    "display_name": "Create Grid Image from Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Morph Image": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image_a_pass",
      "image_b_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image",
    "display_name": "Create Morph Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Morph Image from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI",
            "multiline": false
          }
        ],
        "input_pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "input_path",
        "input_pattern",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image from Path",
    "display_name": "Create Morph Image from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Video from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.01,
            "max": 60000.0,
            "step": 0.01
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60.0,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI/input",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_video",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "input_path",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Video from Path",
    "display_name": "Create Video from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSeg Masking": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MASK",
      "MASK_IMAGE"
    ],
    "name": "CLIPSeg Masking",
    "display_name": "CLIPSeg Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "CLIPSeg Model Loader": {
    "input": {
      "required": {
        "model": [
          "STRING",
          {
            "default": "CIDAS/clipseg-rd64-refined",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CLIPSEG_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "clipseg_model"
    ],
    "name": "CLIPSeg Model Loader",
    "display_name": "CLIPSeg Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPSeg Batch Masking": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "text_a": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "image_c": [
          "IMAGE"
        ],
        "image_d": [
          "IMAGE"
        ],
        "image_e": [
          "IMAGE"
        ],
        "image_f": [
          "IMAGE"
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_e": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_f": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "text_a",
        "text_b"
      ],
      "optional": [
        "image_c",
        "image_d",
        "image_e",
        "image_f",
        "text_c",
        "text_d",
        "text_e",
        "text_f"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGES_BATCH",
      "MASKS_BATCH",
      "MASK_IMAGES_BATCH"
    ],
    "name": "CLIPSeg Batch Masking",
    "display_name": "CLIPSeg Batch Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Convert Masks to Images": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "Convert Masks to Images",
    "display_name": "Convert Masks to Images",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Control Net Model Input Switch": {
    "input": {
      "required": {
        "control_net_a": [
          "CONTROL_NET"
        ],
        "control_net_b": [
          "CONTROL_NET"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_a",
        "control_net_b",
        "boolean"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "Control Net Model Input Switch",
    "display_name": "Control Net Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Debug Number to Console": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "label"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Debug Number to Console",
    "display_name": "Debug Number to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Dictionary to Console": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "label": [
          "STRING",
          {
            "default": "Dictionary Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "label"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Dictionary to Console",
    "display_name": "Dictionary to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Diffusers Model Loader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Model Loader",
    "display_name": "Diffusers Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Diffusers Hub Model Down-Loader": {
    "input": {
      "required": {
        "repo_id": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "revision": [
          "STRING",
          {
            "default": "None",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "repo_id",
        "revision"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Hub Model Down-Loader",
    "display_name": "Diffusers Hub Model Down-Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Export API": {
    "input": {
      "required": {
        "save_prompt_api": [
          [
            "true",
            "true"
          ]
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output/",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI_Prompt"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 2,
            "max": 9,
            "step": 1
          }
        ],
        "parse_text_tokens": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "save_prompt_api",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "parse_text_tokens"
      ],
      "hidden": [
        "prompt"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Export API",
    "display_name": "Export API",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Latent Input Switch": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "boolean"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Input Switch",
    "display_name": "Latent Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Load Cache": {
    "input": {
      "required": {
        "latent_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "image_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "conditioning_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_path",
        "image_path",
        "conditioning_path"
      ]
    },
    "output": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "name": "Load Cache",
    "display_name": "Load Cache",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Logic Boolean": {
    "input": {
      "required": {
        "boolean": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "name": "Logic Boolean",
    "display_name": "Logic Boolean",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Boolean Primitive": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Boolean Primitive",
    "display_name": "Logic Boolean Primitive",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison OR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison OR",
    "display_name": "Logic Comparison OR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison AND": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison AND",
    "display_name": "Logic Comparison AND",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison XOR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison XOR",
    "display_name": "Logic Comparison XOR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic NOT": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic NOT",
    "display_name": "Logic NOT",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Lora Loader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None",
            "add-detail-xl.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ip-adapter-faceid_sdxl_lora.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Lora Loader",
    "display_name": "Lora Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Hex to HSL": {
    "input": {
      "required": {
        "hex_color": [
          "STRING",
          {
            "default": "#FF0000"
          }
        ]
      },
      "optional": {
        "include_alpha": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hex_color"
      ],
      "optional": [
        "include_alpha"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "hue",
      "saturation",
      "lightness",
      "alpha",
      "hsl"
    ],
    "name": "Hex to HSL",
    "display_name": "Hex to HSL",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "HSL to Hex": {
    "input": {
      "required": {
        "hsl_color": [
          "STRING",
          {
            "default": "hsl(0, 100%, 50%)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hsl_color"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "hex_color"
    ],
    "name": "HSL to Hex",
    "display_name": "HSL to Hex",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Image SSAO (Ambient Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0.0,
            "max": 5.0,
            "default": 1.0,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "ao_blur": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 2.5,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 25,
            "step": 1
          }
        ],
        "enable_specular_masking": [
          [
            "True",
            "False"
          ]
        ],
        "tile_size": [
          "INT",
          {
            "min": 1,
            "max": 512,
            "default": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "ao_blur",
        "specular_threshold",
        "enable_specular_masking",
        "tile_size"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "composited_images",
      "ssao_images",
      "specular_mask_images"
    ],
    "name": "Image SSAO (Ambient Occlusion)",
    "display_name": "Image SSAO (Ambient Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image SSDO (Direct Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0.0,
            "max": 5.0,
            "default": 1.0,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 128,
            "step": 1
          }
        ],
        "colored_occlusion": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "specular_threshold",
        "colored_occlusion"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "composited_images",
      "ssdo_images",
      "ssdo_image_masks",
      "light_source_image_masks"
    ],
    "name": "Image SSDO (Direct Occlusion)",
    "display_name": "Image SSDO (Direct Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Analyze": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Black White Levels",
            "RGB Levels"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Analyze",
    "display_name": "Image Analyze",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Aspect Ratio": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "NUMBER"
        ],
        "height": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "NUMBER",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "aspect_number",
      "aspect_float",
      "is_landscape_bool",
      "aspect_ratio_common",
      "aspect_type"
    ],
    "name": "Image Aspect Ratio",
    "display_name": "Image Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Batch": {
    "input": {
      "required": {},
      "optional": {
        "images_a": [
          "IMAGE"
        ],
        "images_b": [
          "IMAGE"
        ],
        "images_c": [
          "IMAGE"
        ],
        "images_d": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "images_a",
        "images_b",
        "images_c",
        "images_d"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Batch",
    "display_name": "Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blank": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "red",
        "green",
        "blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blank",
    "display_name": "Image Blank",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend by Mask": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mask",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blend by Mask",
    "display_name": "Image Blend by Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Blend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blending Mode": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mode": [
          [
            "add",
            "color",
            "color_burn",
            "color_dodge",
            "darken",
            "difference",
            "exclusion",
            "hard_light",
            "hue",
            "lighten",
            "multiply",
            "overlay",
            "screen",
            "soft_light"
          ]
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mode",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Blending Mode",
    "display_name": "Image Blending Mode",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Bloom Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 10,
            "min": 0.0,
            "max": 1024,
            "step": 0.1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "radius",
        "intensity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Bloom Filter",
    "display_name": "Image Bloom Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Canny Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "enable_threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "enable_threshold",
        "threshold_low",
        "threshold_high"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Canny Filter",
    "display_name": "Image Canny Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Chromatic Aberration": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red_offset": [
          "INT",
          {
            "default": 2,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "green_offset": [
          "INT",
          {
            "default": -1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "blue_offset": [
          "INT",
          {
            "default": 1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fade_radius": [
          "INT",
          {
            "default": 12,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red_offset",
        "green_offset",
        "blue_offset",
        "intensity",
        "fade_radius"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Chromatic Aberration",
    "display_name": "Image Chromatic Aberration",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Color Palette": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 16,
            "min": 8,
            "max": 256,
            "step": 1
          }
        ],
        "mode": [
          [
            "Chart",
            "back_to_back"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "LIST"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "color_palettes"
    ],
    "name": "Image Color Palette",
    "display_name": "Image Color Palette",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Crop Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_padding_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "cascade_xml": [
          [
            "lbpcascade_animeface.xml",
            "haarcascade_frontalface_default.xml",
            "haarcascade_frontalface_alt.xml",
            "haarcascade_frontalface_alt2.xml",
            "haarcascade_frontalface_alt_tree.xml",
            "haarcascade_profileface.xml",
            "haarcascade_upperbody.xml",
            "haarcascade_eye.xml"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_padding_factor",
        "cascade_xml"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Face",
    "display_name": "Image Crop Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top",
        "left",
        "right",
        "bottom"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Location",
    "display_name": "Image Crop Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Square Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "max": 4096,
            "min": 5,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x",
        "y",
        "size"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Square Location",
    "display_name": "Image Crop Square Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Displacement Warp": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "displacement_maps": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 25.0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "displacement_maps",
        "amplitude"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Displacement Warp",
    "display_name": "Image Displacement Warp",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Lucy Sharpen": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "iterations": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "iterations",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Lucy Sharpen",
    "display_name": "Image Lucy Sharpen",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Paste Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK_IMAGE"
    ],
    "name": "Image Paste Face",
    "display_name": "Image Paste Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop",
    "display_name": "Image Paste Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop by Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "top",
        "left",
        "right",
        "bottom",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop by Location",
    "display_name": "Image Paste Crop by Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Pixelate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "pixelation_size": [
          "FLOAT",
          {
            "default": 164,
            "min": 16,
            "max": 480,
            "step": 1
          }
        ],
        "num_colors": [
          "FLOAT",
          {
            "default": 16,
            "min": 2,
            "max": 256,
            "step": 1
          }
        ],
        "init_mode": [
          [
            "k-means++",
            "random",
            "none"
          ]
        ],
        "max_iterations": [
          "FLOAT",
          {
            "default": 100,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "False",
            "True"
          ]
        ],
        "dither_mode": [
          [
            "FloydSteinberg",
            "Ordered"
          ]
        ]
      },
      "optional": {
        "color_palettes": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "color_palette_mode": [
          [
            "Brightness",
            "BrightnessAndTonal",
            "Linear",
            "Tonal"
          ]
        ],
        "reverse_palette": [
          [
            "False",
            "True"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "pixelation_size",
        "num_colors",
        "init_mode",
        "max_iterations",
        "dither",
        "dither_mode"
      ],
      "optional": [
        "color_palettes",
        "color_palette_mode",
        "reverse_palette"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Pixelate",
    "display_name": "Image Pixelate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Power Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "attenuation": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "noise_type": [
          [
            "grey",
            "white",
            "pink",
            "blue",
            "green",
            "mix"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frequency",
        "attenuation",
        "noise_type",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Power Noise",
    "display_name": "Image Power Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Dragan Photography Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 6.0,
            "step": 0.01
          }
        ],
        "highpass_radius": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.01
          }
        ],
        "highpass_samples": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 6.0,
            "step": 1
          }
        ],
        "highpass_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 3.0,
            "step": 0.01
          }
        ],
        "colorize": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "saturation",
        "contrast",
        "brightness",
        "sharpness",
        "highpass_radius",
        "highpass_samples",
        "highpass_strength",
        "colorize"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Dragan Photography Filter",
    "display_name": "Image Dragan Photography Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Edge Detection Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "normal",
            "laplacian"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Edge Detection Filter",
    "display_name": "Image Edge Detection Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Film Grain": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "density": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "highlights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 255.0,
            "step": 0.01
          }
        ],
        "supersample_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 8,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "density",
        "intensity",
        "highlights",
        "supersample_factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Film Grain",
    "display_name": "Image Film Grain",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Filter Adjustments": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "gaussian_blur": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1024.0,
            "step": 0.1
          }
        ],
        "edge_enhance": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "detail_enhance": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "brightness",
        "contrast",
        "saturation",
        "sharpness",
        "blur",
        "gaussian_blur",
        "edge_enhance",
        "detail_enhance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Filter Adjustments",
    "display_name": "Image Filter Adjustments",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Flip": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "horizontal",
            "vertical"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Flip",
    "display_name": "Image Flip",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Gradient Map": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "gradient_image": [
          "IMAGE"
        ],
        "flip_left_right": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "gradient_image",
        "flip_left_right"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Gradient Map",
    "display_name": "Image Gradient Map",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Generate Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ]
        ],
        "tolerance": [
          "INT",
          {
            "default": 0,
            "max": 255,
            "min": 0,
            "step": 1
          }
        ],
        "gradient_stops": [
          "STRING",
          {
            "default": "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "direction",
        "tolerance",
        "gradient_stops"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Generate Gradient",
    "display_name": "Image Generate Gradient",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate",
    "output_node": false
  },
  "Image High Pass Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "radius": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 500,
            "step": 1
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "color_output": [
          [
            "true",
            "false"
          ]
        ],
        "neutral_background": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "radius",
        "strength",
        "color_output",
        "neutral_background"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image High Pass Filter",
    "display_name": "Image High Pass Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image History Loader": {
    "input": {
      "required": {
        "image": [
          [
            "No History"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Image History Loader",
    "display_name": "Image History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Image Input Switch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Input Switch",
    "display_name": "Image Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Levels Adjustment": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "black_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "mid_level": [
          "FLOAT",
          {
            "default": 127.5,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "white_level": [
          "FLOAT",
          {
            "default": 255,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "black_level",
        "mid_level",
        "white_level"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Levels Adjustment",
    "display_name": "Image Levels Adjustment",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Load": {
    "input": {
      "required": {
        "image_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/example.png",
            "multiline": false
          }
        ],
        "RGBA": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_path",
        "RGBA"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "filename_text"
    ],
    "name": "Image Load",
    "display_name": "Image Load",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Image Median Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "diameter": [
          "INT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 255,
            "step": 1
          }
        ],
        "sigma_color": [
          "FLOAT",
          {
            "default": 10.0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "sigma_space": [
          "FLOAT",
          {
            "default": 10.0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "diameter",
        "sigma_color",
        "sigma_space"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Median Filter",
    "display_name": "Image Median Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Mix RGB Channels": {
    "input": {
      "required": {
        "red_channel": [
          "IMAGE"
        ],
        "green_channel": [
          "IMAGE"
        ],
        "blue_channel": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "red_channel",
        "green_channel",
        "blue_channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Mix RGB Channels",
    "display_name": "Image Mix RGB Channels",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Monitor Effects Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Digital Distortion",
            "Signal Distortion",
            "TV Distortion"
          ]
        ],
        "amplitude": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "offset": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "amplitude",
        "offset"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Monitor Effects Filter",
    "display_name": "Image Monitor Effects Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Nova Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 3.14,
            "min": 0.0,
            "max": 100.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amplitude",
        "frequency"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Nova Filter",
    "display_name": "Image Nova Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Padding": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "feathering": [
          "INT",
          {
            "default": 120,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ],
        "feather_second_pass": [
          [
            "true",
            "false"
          ]
        ],
        "left_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "right_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "top_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "bottom_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "feathering",
        "feather_second_pass",
        "left_padding",
        "right_padding",
        "top_padding",
        "bottom_padding"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Padding",
    "display_name": "Image Padding",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Perlin Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Noise",
    "display_name": "Image Perlin Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Rembg (Remove Background)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "transparency": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model": [
          [
            "u2net",
            "u2netp",
            "u2net_human_seg",
            "silueta",
            "isnet-general-use",
            "isnet-anime"
          ]
        ],
        "post_processing": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "only_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting_foreground_threshold": [
          "INT",
          {
            "default": 240,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_background_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_erode_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "background_color": [
          [
            "none",
            "black",
            "white",
            "magenta",
            "chroma green",
            "chroma blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "transparency",
        "model",
        "post_processing",
        "only_mask",
        "alpha_matting",
        "alpha_matting_foreground_threshold",
        "alpha_matting_background_threshold",
        "alpha_matting_erode_size",
        "background_color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Rembg (Remove Background)",
    "display_name": "Image Rembg (Remove Background)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Image Perlin Power Fractal": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "lacunarity": [
          "FLOAT",
          {
            "default": 2.0,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 2.0,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "lacunarity",
        "exponent",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Power Fractal",
    "display_name": "Image Perlin Power Fractal",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Remove Background (Alpha)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "background",
            "foreground"
          ]
        ],
        "threshold": [
          "INT",
          {
            "default": 127,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_tolerance": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "threshold",
        "threshold_tolerance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Remove Background (Alpha)",
    "display_name": "Image Remove Background (Alpha)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Remove Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "clip_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_red",
        "target_green",
        "target_blue",
        "replace_red",
        "replace_green",
        "replace_blue",
        "clip_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Remove Color",
    "display_name": "Image Remove Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Resize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "rescale",
            "resize"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "resampling": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "resize_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ],
        "resize_height": [
          "INT",
          {
            "default": 1536,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "supersample",
        "resampling",
        "rescale_factor",
        "resize_width",
        "resize_height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Resize",
    "display_name": "Image Resize",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "transpose",
            "internal"
          ]
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 360,
            "step": 90
          }
        ],
        "sampler": [
          [
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "rotation",
        "sampler"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Rotate",
    "display_name": "Image Rotate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate Hue": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "hue_shift": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "hue_shift"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Rotate Hue",
    "display_name": "Image Rotate Hue",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Send HTTP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "url": [
          "STRING",
          {
            "default": "example.com"
          }
        ],
        "method_type": [
          [
            "post",
            "put",
            "patch"
          ],
          {
            "default": "post"
          }
        ],
        "request_field_name": [
          "STRING",
          {
            "default": "image"
          }
        ]
      },
      "optional": {
        "additional_request_headers": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "url",
        "method_type",
        "request_field_name"
      ],
      "optional": [
        "additional_request_headers"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "status_code",
      "result_text"
    ],
    "name": "Image Send HTTP",
    "display_name": "Image Send HTTP",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Save": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "output_path": [
          "STRING",
          {
            "default": "[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 9,
            "step": 1
          }
        ],
        "filename_number_start": [
          [
            "false",
            "true"
          ]
        ],
        "extension": [
          [
            "png",
            "jpg",
            "jpeg",
            "gif",
            "tiff",
            "webp",
            "bmp"
          ]
        ],
        "dpi": [
          "INT",
          {
            "default": 300,
            "min": 1,
            "max": 2400,
            "step": 1
          }
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "optimize_image": [
          [
            "true",
            "false"
          ]
        ],
        "lossless_webp": [
          [
            "false",
            "true"
          ]
        ],
        "overwrite_mode": [
          [
            "false",
            "prefix_as_filename"
          ]
        ],
        "show_history": [
          [
            "false",
            "true"
          ]
        ],
        "show_history_by_prefix": [
          [
            "true",
            "false"
          ]
        ],
        "embed_workflow": [
          [
            "true",
            "false"
          ]
        ],
        "show_previews": [
          [
            "true",
            "false"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "filename_number_start",
        "extension",
        "dpi",
        "quality",
        "optimize_image",
        "lossless_webp",
        "overwrite_mode",
        "show_history",
        "show_history_by_prefix",
        "embed_workflow",
        "show_previews"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "files"
    ],
    "name": "Image Save",
    "display_name": "Image Save",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Seamless Texture": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "blending": [
          "FLOAT",
          {
            "default": 0.4,
            "max": 1.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "tiled": [
          [
            "true",
            "false"
          ]
        ],
        "tiles": [
          "INT",
          {
            "default": 2,
            "max": 6,
            "min": 2,
            "step": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "blending",
        "tiled",
        "tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Seamless Texture",
    "display_name": "Image Seamless Texture",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Channel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Channel",
    "display_name": "Image Select Channel",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "variance": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "variance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Color",
    "display_name": "Image Select Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Shadows and Highlights": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "shadow_threshold": [
          "FLOAT",
          {
            "default": 75,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "shadow_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": -12.0,
            "max": 12.0,
            "step": 0.1
          }
        ],
        "shadow_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "highlight_threshold": [
          "FLOAT",
          {
            "default": 175,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "highlight_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -12.0,
            "max": 12.0,
            "step": 0.1
          }
        ],
        "highlight_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "simplify_isolation": [
          "FLOAT",
          {
            "default": 0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "shadow_threshold",
        "shadow_factor",
        "shadow_smoothing",
        "highlight_threshold",
        "highlight_factor",
        "highlight_smoothing",
        "simplify_isolation"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "shadow_map",
      "highlight_map"
    ],
    "name": "Image Shadows and Highlights",
    "display_name": "Image Shadows and Highlights",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Size to Number": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width_num",
      "height_num",
      "width_float",
      "height_float",
      "width_int",
      "height_int"
    ],
    "name": "Image Size to Number",
    "display_name": "Image Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Image Stitch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "stitch": [
          [
            "top",
            "left",
            "bottom",
            "right"
          ]
        ],
        "feathering": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "stitch",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Stitch",
    "display_name": "Image Stitch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Style Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "style": [
          [
            "1977",
            "aden",
            "brannan",
            "brooklyn",
            "clarendon",
            "earlybird",
            "fairy tale",
            "gingham",
            "hudson",
            "inkwell",
            "kelvin",
            "lark",
            "lofi",
            "maven",
            "mayfair",
            "moon",
            "nashville",
            "perpetua",
            "reyes",
            "rise",
            "slumber",
            "stinson",
            "toaster",
            "valencia",
            "walden",
            "willow",
            "xpro2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "style"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Style Filter",
    "display_name": "Image Style Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Threshold": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Threshold",
    "display_name": "Image Threshold",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Tiled": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "num_tiles": [
          "INT",
          {
            "default": 4,
            "max": 64,
            "min": 2,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "num_tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "Image Tiled",
    "display_name": "Image Tiled",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Transpose": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_overlay": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "X": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "Y": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_overlay",
        "width",
        "height",
        "X",
        "Y",
        "rotation",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Transpose",
    "display_name": "Image Transpose",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image fDOF Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "depth": [
          "IMAGE"
        ],
        "mode": [
          [
            "mock",
            "gaussian",
            "box"
          ]
        ],
        "radius": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 128,
            "step": 1
          }
        ],
        "samples": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "depth",
        "mode",
        "radius",
        "samples"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image fDOF Filter",
    "display_name": "Image fDOF Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image to Latent Mask": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Image to Latent Mask",
    "display_name": "Image to Latent Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Image to Noise": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "num_colors": [
          "INT",
          {
            "default": 16,
            "max": 256,
            "min": 2,
            "step": 2
          }
        ],
        "black_mix": [
          "INT",
          {
            "default": 0,
            "max": 20,
            "min": 0,
            "step": 1
          }
        ],
        "gaussian_mix": [
          "FLOAT",
          {
            "default": 0.0,
            "max": 1024,
            "min": 0,
            "step": 0.1
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1.0,
            "max": 2.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "output_mode": [
          [
            "batch",
            "list"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "num_colors",
        "black_mix",
        "gaussian_mix",
        "brightness",
        "output_mode",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image to Noise",
    "display_name": "Image to Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image to Seed": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "INT"
    ],
    "name": "Image to Seed",
    "display_name": "Image to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Images to RGB": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to RGB",
    "display_name": "Images to RGB",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Images to Linear": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to Linear",
    "display_name": "Images to Linear",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Integer place counter": {
    "input": {
      "required": {
        "int_input": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int_input"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT_PLACES"
    ],
    "name": "Integer place counter",
    "display_name": "Integer place counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Integer",
    "output_node": false
  },
  "Image Voronoi Noise Filter": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "density": [
          "INT",
          {
            "default": 50,
            "max": 256,
            "min": 10,
            "step": 2
          }
        ],
        "modulator": [
          "INT",
          {
            "default": 0,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "flat": [
          [
            "False",
            "True"
          ]
        ],
        "RGB_output": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "density",
        "modulator",
        "seed"
      ],
      "optional": [
        "flat",
        "RGB_output"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Voronoi Noise Filter",
    "display_name": "Image Voronoi Noise Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "KSampler (WAS)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "SEED"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler (WAS)",
    "display_name": "KSampler (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "KSampler Cycle": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "tiled_vae": [
          [
            "disable",
            "enable"
          ]
        ],
        "latent_upscale": [
          [
            "disable",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.1
          }
        ],
        "upscale_cycles": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 12,
            "step": 1
          }
        ],
        "starting_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cycle_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_denoise": [
          [
            "enable",
            "disable"
          ]
        ],
        "scale_sampling": [
          [
            "bilinear",
            "bicubic",
            "nearest",
            "lanczos"
          ]
        ],
        "vae": [
          "VAE"
        ]
      },
      "optional": {
        "secondary_model": [
          "MODEL"
        ],
        "secondary_start_cycle": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 16,
            "step": 1
          }
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "processor_model": [
          "UPSCALE_MODEL"
        ],
        "pos_additive": [
          "CONDITIONING"
        ],
        "neg_additive": [
          "CONDITIONING"
        ],
        "pos_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "pos_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "pos_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "pos_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "neg_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "neg_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "neg_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "neg_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "sharpen_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "steps_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "steps_control": [
          [
            "decrement",
            "increment"
          ]
        ],
        "steps_scaling_value": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "steps_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 4,
            "max": 1000,
            "step": 1
          }
        ],
        "denoise_cutoff": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "tiled_vae",
        "latent_upscale",
        "upscale_factor",
        "upscale_cycles",
        "starting_denoise",
        "cycle_denoise",
        "scale_denoise",
        "scale_sampling",
        "vae"
      ],
      "optional": [
        "secondary_model",
        "secondary_start_cycle",
        "upscale_model",
        "processor_model",
        "pos_additive",
        "neg_additive",
        "pos_add_mode",
        "pos_add_strength",
        "pos_add_strength_scaling",
        "pos_add_strength_cutoff",
        "neg_add_mode",
        "neg_add_strength",
        "neg_add_strength_scaling",
        "neg_add_strength_cutoff",
        "sharpen_strength",
        "sharpen_radius",
        "steps_scaling",
        "steps_control",
        "steps_scaling_value",
        "steps_cutoff",
        "denoise_cutoff"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent(s)"
    ],
    "name": "KSampler Cycle",
    "display_name": "KSampler Cycle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "Latent Batch": {
    "input": {
      "required": {},
      "optional": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "latent_c": [
          "LATENT"
        ],
        "latent_d": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "latent_a",
        "latent_b",
        "latent_c",
        "latent_d"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent"
    ],
    "name": "Latent Batch",
    "display_name": "Latent Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Latent Noise Injection": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "noise_std": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "noise_std"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Noise Injection",
    "display_name": "Latent Noise Injection",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Generate",
    "output_node": false
  },
  "Latent Size to Number": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "tensor_w_num",
      "tensor_h_num",
      "tensor_w_float",
      "tensor_h_float",
      "tensor_w_int",
      "tensor_h_int"
    ],
    "name": "Latent Size to Number",
    "display_name": "Latent Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Latent Upscale by Factor (WAS)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mode": [
          [
            "area",
            "bicubic",
            "bilinear",
            "nearest"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "align": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mode",
        "factor",
        "align"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Upscale by Factor (WAS)",
    "display_name": "Latent Upscale by Factor (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "Load Image Batch": {
    "input": {
      "required": {
        "mode": [
          [
            "single_image",
            "incremental_image",
            "random"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 150000,
            "step": 1
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Batch 001",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "allow_RGBA_output": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "seed",
        "index",
        "label",
        "path",
        "pattern",
        "allow_RGBA_output"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Load Image Batch",
    "display_name": "Load Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Text File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Load Text File",
    "display_name": "Load Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Lora": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None",
            "add-detail-xl.safetensors",
            "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
            "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
            "ip-adapter-faceid_sd15_lora.safetensors",
            "ip-adapter-faceid_sdxl_lora.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Load Lora",
    "display_name": "Load Lora",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Lora Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "clip_a": [
          "CLIP"
        ],
        "model_b": [
          "MODEL"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "clip_a",
        "model_b",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Input Switch",
    "display_name": "Lora Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Masks Add": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Add",
    "display_name": "Masks Add",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Subtract": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Subtract",
    "display_name": "Masks Subtract",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Arbitrary Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "size",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Arbitrary Region",
    "display_name": "Mask Arbitrary Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch to Mask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "batch_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "batch_number"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Mask Batch to Mask",
    "display_name": "Mask Batch to Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch": {
    "input": {
      "optional": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ],
        "masks_c": [
          "MASK"
        ],
        "masks_d": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "optional": [
        "masks_a",
        "masks_b",
        "masks_c",
        "masks_d"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "masks"
    ],
    "name": "Mask Batch",
    "display_name": "Mask Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Ceiling Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Ceiling Region",
    "display_name": "Mask Ceiling Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Dominant Region",
    "display_name": "Mask Crop Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Minority Region",
    "display_name": "Mask Crop Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "region_type": [
          [
            "dominant",
            "minority"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "region_type"
      ]
    },
    "output": [
      "MASK",
      "CROP_DATA",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "cropped_mask",
      "crop_data",
      "top_int",
      "left_int",
      "right_int",
      "bottom_int",
      "width_int",
      "height_int"
    ],
    "name": "Mask Crop Region",
    "display_name": "Mask Crop Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Paste Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "crop_mask": [
          "MASK"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "crop_mask",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "RESULT_MASK",
      "CROP_MASK"
    ],
    "name": "Mask Paste Region",
    "display_name": "Mask Paste Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dilate Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dilate Region",
    "display_name": "Mask Dilate Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dominant Region",
    "display_name": "Mask Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Erode Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Erode Region",
    "display_name": "Mask Erode Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Fill Holes": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Fill Holes",
    "display_name": "Mask Fill Holes",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Floor Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Floor Region",
    "display_name": "Mask Floor Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Gaussian Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 1024,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "radius"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Gaussian Region",
    "display_name": "Mask Gaussian Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Invert": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Invert",
    "display_name": "Mask Invert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Minority Region",
    "display_name": "Mask Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area",
    "display_name": "Mask Rect Area",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area (Advanced)": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "image_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "image_width",
        "image_height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area (Advanced)",
    "display_name": "Mask Rect Area (Advanced)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Smooth Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 128.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "sigma"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Smooth Region",
    "display_name": "Mask Smooth Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Threshold Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "black_threshold": [
          "INT",
          {
            "default": 75,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "white_threshold": [
          "INT",
          {
            "default": 175,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "black_threshold",
        "white_threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Threshold Region",
    "display_name": "Mask Threshold Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Regions": {
    "input": {
      "required": {
        "mask_a": [
          "MASK"
        ],
        "mask_b": [
          "MASK"
        ]
      },
      "optional": {
        "mask_c": [
          "MASK"
        ],
        "mask_d": [
          "MASK"
        ],
        "mask_e": [
          "MASK"
        ],
        "mask_f": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_a",
        "mask_b"
      ],
      "optional": [
        "mask_c",
        "mask_d",
        "mask_e",
        "mask_f"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Regions",
    "display_name": "Masks Combine Regions",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Batch": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Batch",
    "display_name": "Masks Combine Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "MiDaS Model Loader": {
    "input": {
      "required": {
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "midas_model"
      ]
    },
    "output": [
      "MIDAS_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "midas_model"
    ],
    "name": "MiDaS Model Loader",
    "display_name": "MiDaS Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "MiDaS Depth Approximation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_type": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ],
        "invert_depth": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "midas_model": [
          "MIDAS_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_type",
        "invert_depth"
      ],
      "optional": [
        "midas_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "MiDaS Depth Approximation",
    "display_name": "MiDaS Depth Approximation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "MiDaS Mask Image": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid",
            "DPT_Small"
          ]
        ],
        "remove": [
          [
            "background",
            "foregroud"
          ]
        ],
        "threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_mid": [
          "FLOAT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 210,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "background_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_model",
        "remove",
        "threshold",
        "threshold_low",
        "threshold_mid",
        "threshold_high",
        "smoothing",
        "background_red",
        "background_green",
        "background_blue"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "RESULT",
      "DEPTH"
    ],
    "name": "MiDaS Mask Image",
    "display_name": "MiDaS Mask Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Model Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "model_b": [
          "MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "model_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Model Input Switch",
    "display_name": "Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Counter": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float"
          ]
        ],
        "mode": [
          [
            "increment",
            "decrement",
            "increment_to_stop",
            "decrement_to_stop"
          ]
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "stop": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 99999,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "reset_bool": [
          "NUMBER"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "mode",
        "start",
        "stop",
        "step"
      ],
      "optional": [
        "reset_bool"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "number",
      "float",
      "int"
    ],
    "name": "Number Counter",
    "display_name": "Number Counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number Operation": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "operation": [
          [
            "addition",
            "subtraction",
            "division",
            "floor division",
            "multiplication",
            "exponentiation",
            "modulus",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "operation"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Operation",
    "display_name": "Number Operation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Float": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "Number to Float",
    "display_name": "Number to Float",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number Input Switch": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "boolean"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Switch",
    "display_name": "Number Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Input Condition": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "return_boolean": [
          [
            "false",
            "true"
          ]
        ],
        "comparison": [
          [
            "and",
            "or",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal",
            "divisible by",
            "if A odd",
            "if A even",
            "if A prime",
            "factor of"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "return_boolean",
        "comparison"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Condition",
    "display_name": "Number Input Condition",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Multiple Of": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "multiple": [
          "INT",
          {
            "default": 8,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "multiple"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Multiple Of",
    "display_name": "Number Multiple Of",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Functions",
    "output_node": false
  },
  "Number PI": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NUMBER",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT"
    ],
    "name": "Number PI",
    "display_name": "Number PI",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number to Int": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Number to Int",
    "display_name": "Number to Int",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Seed": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "SEED"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEED"
    ],
    "name": "Number to Seed",
    "display_name": "Number to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to String": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Number to String",
    "display_name": "Number to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Text": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Number to Text",
    "display_name": "Number to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Boolean To Text": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Boolean To Text",
    "display_name": "Boolean To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Prompt Styles Selector": {
    "input": {
      "required": {
        "style": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Styles Selector",
    "display_name": "Prompt Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Prompt Multiple Styles Selector": {
    "input": {
      "required": {
        "style1": [
          [
            "None"
          ]
        ],
        "style2": [
          [
            "None"
          ]
        ],
        "style3": [
          [
            "None"
          ]
        ],
        "style4": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style1",
        "style2",
        "style3",
        "style4"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Multiple Styles Selector",
    "display_name": "Prompt Multiple Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Random Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "minimum",
        "maximum",
        "seed"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Random Number",
    "display_name": "Random Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Save Text File": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "path": [
          "STRING",
          {
            "default": "./ComfyUI/output/[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "file_extension": [
          "STRING",
          {
            "default": ".txt"
          }
        ],
        "encoding": [
          "STRING",
          {
            "default": "utf-8"
          }
        ],
        "filename_suffix": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding"
      ],
      "optional": [
        "file_extension",
        "encoding",
        "filename_suffix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Text File",
    "display_name": "Save Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "SEED",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "seed",
      "number",
      "float",
      "int"
    ],
    "name": "Seed",
    "display_name": "Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Tensor Batch to Image": {
    "input": {
      "required": {
        "images_batch": [
          "IMAGE"
        ],
        "batch_image_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_batch",
        "batch_image_number"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Tensor Batch to Image",
    "display_name": "Tensor Batch to Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "BLIP Analyze Image": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "caption",
            "interrogate"
          ]
        ],
        "question": [
          "STRING",
          {
            "default": "What does the background consist of?",
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "blip_model": [
          "BLIP_MODEL"
        ]
      },
      "optional": {
        "min_length": [
          "INT",
          {
            "min": 1,
            "max": 1024,
            "default": 24
          }
        ],
        "max_length": [
          "INT",
          {
            "min": 2,
            "max": 1024,
            "default": 64
          }
        ],
        "num_beams": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 5
          }
        ],
        "no_repeat_ngram_size": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 3
          }
        ],
        "early_stopping": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "question",
        "blip_model"
      ],
      "optional": [
        "min_length",
        "max_length",
        "num_beams",
        "no_repeat_ngram_size",
        "early_stopping"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "FULL_CAPTIONS",
      "CAPTIONS"
    ],
    "name": "BLIP Analyze Image",
    "display_name": "BLIP Analyze Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/AI",
    "output_node": false
  },
  "SAM Model Loader": {
    "input": {
      "required": {
        "model_size": [
          [
            "ViT-H",
            "ViT-L",
            "ViT-B"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_size"
      ]
    },
    "output": [
      "SAM_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_MODEL"
    ],
    "name": "SAM Model Loader",
    "display_name": "SAM Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters": {
    "input": {
      "required": {
        "points": [
          "STRING",
          {
            "default": "[128, 128]; [0, 0]",
            "multiline": false
          }
        ],
        "labels": [
          "STRING",
          {
            "default": "[1, 0]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "points",
        "labels"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters",
    "display_name": "SAM Parameters",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters Combine": {
    "input": {
      "required": {
        "sam_parameters_a": [
          "SAM_PARAMETERS"
        ],
        "sam_parameters_b": [
          "SAM_PARAMETERS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_parameters_a",
        "sam_parameters_b"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters Combine",
    "display_name": "SAM Parameters Combine",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Image Mask": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL"
        ],
        "sam_parameters": [
          "SAM_PARAMETERS"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "sam_parameters",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SAM Image Mask",
    "display_name": "SAM Image Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Samples Passthrough (Stat System)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "samples"
    ],
    "name": "Samples Passthrough (Stat System)",
    "display_name": "Samples Passthrough (Stat System)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": false
  },
  "String to Text": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "String to Text",
    "display_name": "String to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Image Bounds": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds",
    "display_name": "Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Inset Image Bounds": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "inset_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "inset_left",
        "inset_right",
        "inset_top",
        "inset_bottom"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Inset Image Bounds",
    "display_name": "Inset Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend",
    "display_name": "Bounded Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend with Mask": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_mask": [
          "MASK"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_mask",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend with Mask",
    "display_name": "Bounded Image Blend with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_bounds": [
          "IMAGE_BOUNDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_bounds"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Crop",
    "display_name": "Bounded Image Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop with Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "padding_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "return_list": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "padding_left",
        "padding_right",
        "padding_top",
        "padding_bottom"
      ],
      "optional": [
        "return_list"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "name": "Bounded Image Crop with Mask",
    "display_name": "Bounded Image Crop with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Image Bounds to Console": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "label"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds to Console",
    "display_name": "Image Bounds to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text Dictionary Update": {
    "input": {
      "required": {
        "dictionary_a": [
          "DICT"
        ],
        "dictionary_b": [
          "DICT"
        ]
      },
      "optional": {
        "dictionary_c": [
          "DICT"
        ],
        "dictionary_d": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_a",
        "dictionary_b"
      ],
      "optional": [
        "dictionary_c",
        "dictionary_d"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Update",
    "display_name": "Text Dictionary Update",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Get": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "default_value": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "key"
      ],
      "optional": [
        "default_value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary Get",
    "display_name": "Text Dictionary Get",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Convert": {
    "input": {
      "required": {
        "dictionary_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_text"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Convert",
    "display_name": "Text Dictionary Convert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary New": {
    "input": {
      "required": {
        "key_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "key_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "key_1",
        "value_1"
      ],
      "optional": [
        "key_2",
        "value_2",
        "key_3",
        "value_3",
        "key_4",
        "value_4",
        "key_5",
        "value_5"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary New",
    "display_name": "Text Dictionary New",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Keys": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text Dictionary Keys",
    "display_name": "Text Dictionary Keys",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary To Text": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary To Text",
    "display_name": "Text Dictionary To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Add Tokens": {
    "input": {
      "required": {
        "tokens": [
          "STRING",
          {
            "default": "[hello]: world",
            "multiline": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "tokens",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Tokens",
    "display_name": "Text Add Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Add Token by Input": {
    "input": {
      "required": {
        "token_name": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "token_value": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "token_name",
        "token_value",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Token by Input",
    "display_name": "Text Add Token by Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Compare": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mode": [
          [
            "similarity",
            "difference"
          ]
        ],
        "tolerance": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "mode",
        "tolerance"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "BOOLEAN",
      "NUMBER",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT_A_PASS",
      "TEXT_B_PASS",
      "BOOLEAN",
      "SCORE_NUMBER",
      "COMPARISON_TEXT"
    ],
    "name": "Text Compare",
    "display_name": "Text Compare",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Concatenate": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "clean_whitespace": [
          [
            "true",
            "false"
          ]
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "clean_whitespace"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Concatenate",
    "display_name": "Text Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text File History Loader": {
    "input": {
      "required": {
        "file": [
          [
            "No History"
          ]
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Text File History Loader",
    "display_name": "Text File History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Text Find and Replace by Dictionary": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "dictionary": [
          "DICT"
        ],
        "replacement_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "dictionary",
        "replacement_key",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Find and Replace by Dictionary",
    "display_name": "Text Find and Replace by Dictionary",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace Input": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "replace": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace Input",
    "display_name": "Text Find and Replace Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace",
    "display_name": "Text Find and Replace",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "substring": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "substring",
        "pattern"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "found"
    ],
    "name": "Text Find",
    "display_name": "Text Find",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Input Switch": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Input Switch",
    "display_name": "Text Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text List": {
    "input": {
      "required": {},
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_e": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_f": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_g": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d",
        "text_e",
        "text_f",
        "text_g"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text List",
    "display_name": "Text List",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List Concatenate": {
    "input": {
      "required": {},
      "optional": {
        "list_a": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_b": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_c": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_d": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "list_a",
        "list_b",
        "list_c",
        "list_d"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text List Concatenate",
    "display_name": "Text List Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List to Text": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "text_list": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "text_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text List to Text",
    "display_name": "Text List to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Load Line From File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ],
        "label": [
          "STRING",
          {
            "default": "TextBatch",
            "multiline": false
          }
        ],
        "mode": [
          [
            "automatic",
            "index"
          ]
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ]
      },
      "optional": {
        "multiline_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name",
        "label",
        "mode",
        "index"
      ],
      "optional": [
        "multiline_text"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "line_text",
      "dictionary"
    ],
    "name": "Text Load Line From File",
    "display_name": "Text Load Line From File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline",
    "display_name": "Text Multiline",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline (Code Compatible)": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline (Code Compatible)",
    "display_name": "Text Multiline (Code Compatible)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Parse A1111 Embeddings": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse A1111 Embeddings",
    "display_name": "Text Parse A1111 Embeddings",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": false
  },
  "Text Parse Noodle Soup Prompts": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Noodle Soup Prompts",
    "display_name": "Text Parse Noodle Soup Prompts",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": true
  },
  "Text Parse Tokens": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Tokens",
    "display_name": "Text Parse Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": false
  },
  "Text Random Line": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Line",
    "display_name": "Text Random Line",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Random Prompt": {
    "input": {
      "required": {
        "search_seed": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "search_seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Prompt",
    "display_name": "Text Random Prompt",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String",
    "display_name": "Text String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Contains": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "sub_text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "case_insensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "sub_text"
      ],
      "optional": [
        "case_insensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Text Contains",
    "display_name": "Text Contains",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text Shuffle": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Shuffle",
    "display_name": "Text Shuffle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text Sort": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ", ",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Sort",
    "display_name": "Text Sort",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Conditioning": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Text to Conditioning",
    "display_name": "Text to Conditioning",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Console": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Text Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "label"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text to Console",
    "display_name": "Text to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text to Number": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Text to Number",
    "display_name": "Text to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text to String",
    "display_name": "Text to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text String Truncate": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "truncate_by": [
          [
            "characters",
            "words"
          ]
        ],
        "truncate_from": [
          [
            "end",
            "beginning"
          ]
        ],
        "truncate_to": [
          "INT",
          {
            "default": 10,
            "min": -99999999,
            "max": 99999999,
            "step": 1
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "truncate_by",
        "truncate_from",
        "truncate_to"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String Truncate",
    "display_name": "Text String Truncate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "True Random.org Number Generator": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "default": "00000000-0000-0000-0000-000000000000",
            "multiline": false
          }
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 10000000,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "mode": [
          [
            "random",
            "fixed"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "minimum",
        "maximum",
        "mode"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "True Random.org Number Generator",
    "display_name": "True Random.org Number Generator",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "unCLIP Checkpoint Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "NAME_STRING"
    ],
    "name": "unCLIP Checkpoint Loader",
    "display_name": "unCLIP Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Loader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x_NickelbackFS_72000_G.pth",
            "RealESRGAN_x2.pth",
            "RealESRGAN_x4plus.pth",
            "RealESRGAN_x4plus_anime_6B.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "UPSCALE_MODEL",
      "MODEL_NAME_TEXT"
    ],
    "name": "Upscale Model Loader",
    "display_name": "Upscale Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Switch": {
    "input": {
      "required": {
        "upscale_model_a": [
          "UPSCALE_MODEL"
        ],
        "upscale_model_b": [
          "UPSCALE_MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model_a",
        "upscale_model_b",
        "boolean"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "Upscale Model Switch",
    "display_name": "Upscale Model Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Write to GIF": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "/home/ren_koya/image_editor/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph_writer",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to GIF",
    "display_name": "Write to GIF",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "Write to Video": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60.0,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_writer",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE_PASS",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to Video",
    "display_name": "Write to Video",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "VAE Input Switch": {
    "input": {
      "required": {
        "vae_a": [
          "VAE"
        ],
        "vae_b": [
          "VAE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_a",
        "vae_b",
        "boolean"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAE Input Switch",
    "display_name": "VAE Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Video Dump Frames": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo.mp4",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo",
            "multiline": false
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "frame_",
            "multiline": false
          }
        ],
        "filenumber_digits": [
          "INT",
          {
            "default": 4,
            "min": -1,
            "max": 8,
            "step": 1
          }
        ],
        "extension": [
          [
            "png",
            "jpg",
            "gif",
            "tiff"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path",
        "output_path",
        "prefix",
        "filenumber_digits",
        "extension"
      ]
    },
    "output": [
      "STRING",
      "NUMBER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output_path",
      "processed_count"
    ],
    "name": "Video Dump Frames",
    "display_name": "Video Dump Frames",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSEG2": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "use_cuda": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "use_cuda"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CLIPSEG2",
    "display_name": "CLIPSEG2",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "image/transformation",
    "output_node": false
  },
  "DepthAnything_V2": {
    "input": {
      "required": {
        "da_model": [
          "DAMODEL"
        ],
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "da_model",
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "DepthAnything_V2",
    "display_name": "Depth Anything V2",
    "description": "\nhttps://depth-anything-v2.github.io\n",
    "python_module": "custom_nodes.comfyui-depthanythingv2",
    "category": "DepthAnythingV2",
    "output_node": false
  },
  "DownloadAndLoadDepthAnythingV2Model": {
    "input": {
      "required": {
        "model": [
          [
            "depth_anything_v2_vits_fp16.safetensors",
            "depth_anything_v2_vits_fp32.safetensors",
            "depth_anything_v2_vitb_fp16.safetensors",
            "depth_anything_v2_vitb_fp32.safetensors",
            "depth_anything_v2_vitl_fp16.safetensors",
            "depth_anything_v2_vitl_fp32.safetensors",
            "depth_anything_v2_metric_hypersim_vitl_fp32.safetensors",
            "depth_anything_v2_metric_vkitti_vitl_fp32.safetensors"
          ],
          {
            "default": "depth_anything_v2_vitl_fp32.safetensors"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "DAMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "da_v2_model"
    ],
    "name": "DownloadAndLoadDepthAnythingV2Model",
    "display_name": "DownloadAndLoadDepthAnythingV2Model",
    "description": "\nModels autodownload to `ComfyUI\\models\\depthanything` from   \nhttps://huggingface.co/Kijai/DepthAnythingV2-safetensors/tree/main   \n   \nfp16 reduces quality by a LOT, not recommended.\n",
    "python_module": "custom_nodes.comfyui-depthanythingv2",
    "category": "DepthAnythingV2",
    "output_node": false
  },
  "SaveImageWebsocket": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWebsocket",
    "display_name": "SaveImageWebsocket",
    "description": "",
    "python_module": "custom_nodes.websocket_image_save",
    "category": "api/image",
    "output_node": true
  },
  "WD14Tagger|pysssss": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          [
            "wd-vit-tagger-v3",
            "wd-swinv2-tagger-v3",
            "wd-convnext-tagger-v3",
            "wd-v1-4-moat-tagger-v2",
            "wd-v1-4-convnextv2-tagger-v2",
            "wd-v1-4-convnext-tagger-v2",
            "wd-v1-4-convnext-tagger",
            "wd-v1-4-vit-tagger-v2",
            "wd-v1-4-swinv2-tagger-v2",
            "wd-v1-4-vit-tagger"
          ],
          {
            "default": "wd-v1-4-moat-tagger-v2"
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "character_threshold": [
          "FLOAT",
          {
            "default": 0.85,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "replace_underscore": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "trailing_comma": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "exclude_tags": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "threshold",
        "character_threshold",
        "replace_underscore",
        "trailing_comma",
        "exclude_tags"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "WD14Tagger|pysssss",
    "display_name": "WD14 Tagger 🐍",
    "description": "",
    "python_module": "custom_nodes.comfyui-wd14-tagger",
    "category": "image",
    "output_node": true
  },
  "base64 to image": {
    "input": {
      "required": {
        "image_base64": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_base64"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "base64 to image",
    "display_name": "base64 to image",
    "description": "",
    "python_module": "custom_nodes.base64_to_image",
    "category": "image",
    "output_node": false
  },
  "SAMPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SAMPreprocessor",
    "display_name": "SAM Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "OneFormer-COCO-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-COCO-SemSegPreprocessor",
    "display_name": "OneFormer COCO Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "OneFormer-ADE20K-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-ADE20K-SemSegPreprocessor",
    "display_name": "OneFormer ADE20K Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "MeshGraphormer-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "detect_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "presence_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask_bbox_padding",
        "resolution",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "detect_thr",
        "presence_thr"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ]
      },
      "optional": {
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "drop_size": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "bbox_detector"
      ],
      "optional": [
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "drop_size",
        "mask_bbox_padding",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner With External Detector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_vitl14.pth",
            "depth_anything_vitb14.pth",
            "depth_anything_vits14.pth"
          ],
          {
            "default": "depth_anything_vitl14.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingPreprocessor",
    "display_name": "Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Zoe_DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "outdoor"
          ],
          {
            "default": "indoor"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe_DepthAnythingPreprocessor",
    "display_name": "Zoe Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DepthAnythingV2Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_v2_vitg.pth",
            "depth_anything_v2_vitl.pth",
            "depth_anything_v2_vitb.pth",
            "depth_anything_v2_vits.pth"
          ],
          {
            "default": "depth_anything_v2_vitl.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingV2Preprocessor",
    "display_name": "Depth Anything V2 - Relative",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "AnyLineArtPreprocessor_aux": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "merge_with_lineart": [
          [
            "lineart_standard",
            "lineart_realisitic",
            "lineart_anime",
            "manga_line"
          ],
          {
            "default": "lineart_standard"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 1280,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "lineart_lower_bound": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "lineart_upper_bound": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "object_min_size": [
          "INT",
          {
            "default": 36,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "object_connectivity": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "merge_with_lineart",
        "resolution",
        "lineart_lower_bound",
        "lineart_upper_bound",
        "object_min_size",
        "object_connectivity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "AnyLineArtPreprocessor_aux",
    "display_name": "AnyLine Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ShufflePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShufflePreprocessor",
    "display_name": "Content Shuffle",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "CannyEdgePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CannyEdgePreprocessor",
    "display_name": "Canny Edge",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ScribblePreprocessor",
    "display_name": "Scribble Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_XDoG_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "threshold": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_XDoG_Preprocessor",
    "display_name": "Scribble XDoG Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_PiDiNet_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ]
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_PiDiNet_Preprocessor",
    "display_name": "Scribble PiDiNet Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "BAE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BAE-NormalMapPreprocessor",
    "display_name": "BAE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "BinaryPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bin_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bin_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BinaryPreprocessor",
    "display_name": "Binary Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "LeReS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "rm_nearest": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "rm_background": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "boost": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "rm_nearest",
        "rm_background",
        "boost",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LeReS-DepthMapPreprocessor",
    "display_name": "LeReS Depth Map (enable boost for leres++)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "UniFormer-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UniFormer-SemSegPreprocessor",
    "display_name": "UniFormer Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SemSegPreprocessor",
    "display_name": "Semantic Segmentor (legacy, alias for UniFormer)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "DWPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.onnx"
          }
        ],
        "pose_estimator": [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx"
          ],
          {
            "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "bbox_detector",
        "pose_estimator",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "DWPreprocessor",
    "display_name": "DWPose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnimalPosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.torchscript.pt"
          }
        ],
        "pose_estimator": [
          [
            "rtmpose-m_ap10k_256_bs5.torchscript.pt",
            "rtmpose-m_ap10k_256.onnx"
          ],
          {
            "default": "rtmpose-m_ap10k_256_bs5.torchscript.pt"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bbox_detector",
        "pose_estimator",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "AnimalPosePreprocessor",
    "display_name": "AnimalPose Estimator (AP10K)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "LineartStandardPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "guassian_sigma": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "intensity_threshold": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "guassian_sigma",
        "intensity_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineartStandardPreprocessor",
    "display_name": "Standard Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "OpenposePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "OpenposePreprocessor",
    "display_name": "OpenPose Pose",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "MiDaS-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-NormalMapPreprocessor",
    "display_name": "MiDaS Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MiDaS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-DepthMapPreprocessor",
    "display_name": "MiDaS Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "PiDiNetPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PiDiNetPreprocessor",
    "display_name": "PiDiNet Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "M-LSDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "dist_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "score_threshold",
        "dist_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "M-LSDPreprocessor",
    "display_name": "M-LSD Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "TilePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "pyrUp_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "pyrUp_iters",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TilePreprocessor",
    "display_name": "Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileGF_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "eps": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.001,
            "max": 0.1,
            "step": 0.001
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength",
        "radius",
        "eps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileGF_Preprocessor",
    "display_name": "TTPlanet Tile GuidedFilter",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileSimple_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileSimple_Preprocessor",
    "display_name": "TTPlanet Tile Simple",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "InpaintPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "optional": {
        "black_pixel_for_xinsir_cn": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ],
      "optional": [
        "black_pixel_for_xinsir_cn"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "InpaintPreprocessor",
    "display_name": "Inpaint Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "Zoe-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe-DepthMapPreprocessor",
    "display_name": "Zoe Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-DepthMapPreprocessor",
    "display_name": "Metric3D Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-NormalMapPreprocessor",
    "display_name": "Metric3D Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "HEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HEDPreprocessor",
    "display_name": "HED Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "FakeScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FakeScribblePreprocessor",
    "display_name": "Fake Scribble Lines (aka scribble_hed)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Manga2Anime_LineArt_Preprocessor",
    "display_name": "Manga Lineart (aka lineart_anime_denoise)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DensePosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "model": [
          [
            "densepose_r50_fpn_dl.torchscript",
            "densepose_r101_fpn_dl.torchscript"
          ],
          {
            "default": "densepose_r50_fpn_dl.torchscript"
          }
        ],
        "cmap": [
          [
            "Viridis (MagicAnimate)",
            "Parula (CivitAI)"
          ],
          {
            "default": "Viridis (MagicAnimate)"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "model",
        "cmap",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DensePosePreprocessor",
    "display_name": "DensePose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "Unimatch_OptFlowPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "ckpt_name": [
          [
            "gmflow-scale1-mixdata.pth",
            "gmflow-scale2-mixdata.pth",
            "gmflow-scale2-regrefine6-mixdata.pth"
          ],
          {
            "default": "gmflow-scale2-regrefine6-mixdata.pth"
          }
        ],
        "backward_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bidirectional_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "ckpt_name",
        "backward_flow",
        "bidirectional_flow"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "Unimatch_OptFlowPreprocessor",
    "display_name": "Unimatch Optical Flow",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "MaskOptFlow": {
    "input": {
      "required": {
        "optical_flow": [
          "OPTICAL_FLOW"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "optical_flow",
        "mask"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "MaskOptFlow",
    "display_name": "Mask Optical Flow (DragNUWA)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "SavePoseKpsAsJsonFile": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "PoseKeypoint"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SavePoseKpsAsJsonFile",
    "display_name": "Save Pose Keypoints",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": true
  },
  "FacialPartColoringFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "mode": [
          [
            "point",
            "polygon"
          ],
          {
            "default": "polygon"
          }
        ],
        "skin": [
          "STRING",
          {
            "default": "rgb(0, 153, 255)",
            "multiline": false
          }
        ],
        "left_eye": [
          "STRING",
          {
            "default": "rgb(0, 204, 153)",
            "multiline": false
          }
        ],
        "right_eye": [
          "STRING",
          {
            "default": "rgb(255, 153, 0)",
            "multiline": false
          }
        ],
        "nose": [
          "STRING",
          {
            "default": "rgb(255, 102, 255)",
            "multiline": false
          }
        ],
        "upper_lip": [
          "STRING",
          {
            "default": "rgb(102, 0, 51)",
            "multiline": false
          }
        ],
        "inner_mouth": [
          "STRING",
          {
            "default": "rgb(255, 204, 255)",
            "multiline": false
          }
        ],
        "lower_lip": [
          "STRING",
          {
            "default": "rgb(255, 0, 102)",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "mode",
        "skin",
        "left_eye",
        "right_eye",
        "nose",
        "upper_lip",
        "inner_mouth",
        "lower_lip"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FacialPartColoringFromPoseKps",
    "display_name": "Colorize Facial Parts from PoseKPS",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "UpperBodyTrackingFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "id_include": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Head_width_height": [
          "STRING",
          {
            "default": "256, 256",
            "multiline": false
          }
        ],
        "Neck_width_height": [
          "STRING",
          {
            "default": "100, 100",
            "multiline": false
          }
        ],
        "Shoulder_width_height": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Torso_width_height": [
          "STRING",
          {
            "default": "350, 450",
            "multiline": false
          }
        ],
        "RArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "RForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "id_include",
        "Head_width_height",
        "Neck_width_height",
        "Shoulder_width_height",
        "Torso_width_height",
        "RArm_width_height",
        "RForearm_width_height",
        "LArm_width_height",
        "LForearm_width_height"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "UpperBodyTrackingFromPoseKps",
    "display_name": "Upper Body Tracking From PoseKps (InstanceDiffusion)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderPeopleKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ],
        "render_body": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_hand": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_face": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kps",
        "render_body",
        "render_hand",
        "render_face"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderPeopleKps",
    "display_name": "Render Pose JSON (Human)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderAnimalKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ]
      }
    },
    "input_order": {
      "required": [
        "kps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderAnimalKps",
    "display_name": "Render Pose JSON (Animal)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "AnimeFace_SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "remove_background_using_abg": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 512,
            "max": 512,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "remove_background_using_abg",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "ABG_CHARACTER_MASK (MASK)"
    ],
    "name": "AnimeFace_SemSegPreprocessor",
    "display_name": "Anime Face Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "MediaPipe-FaceMeshPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "min_confidence": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "max_faces",
        "min_confidence",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MediaPipe-FaceMeshPreprocessor",
    "display_name": "MediaPipe Face Mesh",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnimeLineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AnimeLineArtPreprocessor",
    "display_name": "Anime Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ColorPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ColorPreprocessor",
    "display_name": "Color Pallete",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "TEEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe_steps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TEEDPreprocessor",
    "display_name": "TEEDPreprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DSINE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "fov": [
          "FLOAT",
          {
            "default": 60.0,
            "min": 0,
            "max": 365.0,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "fov",
        "iterations",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DSINE-NormalMapPreprocessor",
    "display_name": "DSINE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DiffusionEdge_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "urban",
            "natrual"
          ],
          {
            "default": "indoor"
          }
        ],
        "patch_batch_size": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "patch_batch_size",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DiffusionEdge_Preprocessor",
    "display_name": "Diffusion Edge (batch size ↑ => speed ↑, VRAM ↑)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "PyraCannyPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PyraCannyPreprocessor",
    "display_name": "PyraCanny",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ImageLuminanceDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageLuminanceDetector",
    "display_name": "Image Luminance",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "ImageIntensityDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageIntensityDetector",
    "display_name": "Image Intensity",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "LineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "coarse": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "coarse",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineArtPreprocessor",
    "display_name": "Realistic Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AIO_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "preprocessor": [
          [
            "none",
            "SAMPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DepthAnythingV2Preprocessor",
            "AnyLineArtPreprocessor_aux",
            "ShufflePreprocessor",
            "CannyEdgePreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "BAE-NormalMapPreprocessor",
            "BinaryPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "LineartStandardPreprocessor",
            "OpenposePreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "PiDiNetPreprocessor",
            "M-LSDPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "Zoe-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "DensePosePreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "AnimeLineArtPreprocessor",
            "ColorPreprocessor",
            "TEEDPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "PyraCannyPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "LineArtPreprocessor"
          ],
          {
            "default": "none"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "preprocessor",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AIO_Preprocessor",
    "display_name": "AIO Aux Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetPreprocessorSelector": {
    "input": {
      "required": {
        "preprocessor": [
          [
            "none",
            "SAMPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DepthAnythingV2Preprocessor",
            "AnyLineArtPreprocessor_aux",
            "ShufflePreprocessor",
            "CannyEdgePreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "BAE-NormalMapPreprocessor",
            "BinaryPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "LineartStandardPreprocessor",
            "OpenposePreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "PiDiNetPreprocessor",
            "M-LSDPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "Zoe-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "DensePosePreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "AnimeLineArtPreprocessor",
            "ColorPreprocessor",
            "TEEDPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "PyraCannyPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "LineArtPreprocessor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preprocessor"
      ]
    },
    "output": [
      [
        "none",
        "SAMPreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "DepthAnythingV2Preprocessor",
        "AnyLineArtPreprocessor_aux",
        "ShufflePreprocessor",
        "CannyEdgePreprocessor",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "BAE-NormalMapPreprocessor",
        "BinaryPreprocessor",
        "LeReS-DepthMapPreprocessor",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "LineartStandardPreprocessor",
        "OpenposePreprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "PiDiNetPreprocessor",
        "M-LSDPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "Zoe-DepthMapPreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "DensePosePreprocessor",
        "AnimeFace_SemSegPreprocessor",
        "MediaPipe-FaceMeshPreprocessor",
        "AnimeLineArtPreprocessor",
        "ColorPreprocessor",
        "TEEDPreprocessor",
        "DSINE-NormalMapPreprocessor",
        "PyraCannyPreprocessor",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "LineArtPreprocessor"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "preprocessor"
    ],
    "name": "ControlNetPreprocessorSelector",
    "display_name": "Preprocessor Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "PixelPerfectResolution": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RESOLUTION (INT)"
    ],
    "name": "PixelPerfectResolution",
    "display_name": "Pixel Perfect Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromImage",
    "display_name": "Generation Resolution From Image",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromLatent",
    "display_name": "Generation Resolution From Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "HintImageEnchance": {
    "input": {
      "required": {
        "hint_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hint_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HintImageEnchance",
    "display_name": "Enchance And Resize Hint Images",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ExecuteAllControlNetPreprocessors": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ExecuteAllControlNetPreprocessors",
    "display_name": "Execute All ControlNet Preprocessors",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetAuxSimpleAddText": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ControlNetAuxSimpleAddText",
    "display_name": "ControlNetAuxSimpleAddText",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "SimpleGenImageInterface": {
    "input": {
      "required": {
        "model": [
          [
            "Chitose.safetensors",
            "SDXL/dreamshaper_xl_v2.1.safetensors",
            "SDXL/sd_xl_base_1.0.safetensors",
            "SDXL/sd_xl_refiner_1.0.safetensors",
            "absolutereality_v181.safetensors",
            "dreamshaperXL_turboDPMSDE.safetensors",
            "dreamshaper_8.safetensors",
            "realisticVisionV51_v51VAE.safetensors",
            "sd15/v1-5-pruned-emaonly.safetensors",
            "sd35m/sd3.5_medium_incl_clips_t5xxlfp8scaled.safetensors",
            "sdxl/sd_xl_base_1.0.safetensors",
            "sdxl/sd_xl_base_1.0_0.9vae.safetensors",
            "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors",
            "none"
          ]
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "img2img_base64": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "prompt",
        "negative_prompt",
        "width",
        "height",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "img2img_base64"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "INT",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      "STRING",
      "STRING",
      "FLOAT",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "prompt",
      "negative_prompt",
      "width",
      "height",
      "seed",
      "steps",
      "cfg",
      "sampler_name",
      "scheduler",
      "denoise",
      "image",
      "mask"
    ],
    "name": "SimpleGenImageInterface",
    "display_name": "Simple Gen Image Interface",
    "description": "",
    "python_module": "custom_nodes.comfyui_extra_api",
    "category": "extrapi",
    "output_node": false
  },
  "inspyrenet Rembg advanced base64": {
    "input": {
      "required": {
        "image_base64": [
          "STRING",
          {
            "default": ""
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "torchscript_jit": [
          [
            "default",
            "on"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_base64",
        "threshold",
        "torchscript_jit"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "inspyrenet Rembg advanced base64",
    "display_name": "inspyrenet Rembg advanced base64",
    "description": "",
    "python_module": "custom_nodes.base64_rembg",
    "category": "image",
    "output_node": false
  },
  "ReActorFaceSwap": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "input_image": [
          "IMAGE"
        ],
        "swap_model": [
          []
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "face_restore_model": [
          [
            "none",
            "codeformer.pth",
            "GFPGANv1.4.pth"
          ]
        ],
        "face_restore_visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "detect_gender_input": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "detect_gender_source": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "input_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "source_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "console_log_level": [
          [
            0,
            1,
            2
          ],
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ],
        "face_boost": [
          "FACE_BOOST"
        ]
      },
      "hidden": {
        "faces_order": "FACES_ORDER"
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "input_image",
        "swap_model",
        "facedetection",
        "face_restore_model",
        "face_restore_visibility",
        "codeformer_weight",
        "detect_gender_input",
        "detect_gender_source",
        "input_faces_index",
        "source_faces_index",
        "console_log_level"
      ],
      "optional": [
        "source_image",
        "face_model",
        "face_boost"
      ],
      "hidden": [
        "faces_order"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "name": "ReActorFaceSwap",
    "display_name": "ReActor 🌌 Fast Face Swap",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorFaceSwapOpt": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "input_image": [
          "IMAGE"
        ],
        "swap_model": [
          []
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "face_restore_model": [
          [
            "none",
            "codeformer.pth",
            "GFPGANv1.4.pth"
          ]
        ],
        "face_restore_visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ],
        "options": [
          "OPTIONS"
        ],
        "face_boost": [
          "FACE_BOOST"
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "input_image",
        "swap_model",
        "facedetection",
        "face_restore_model",
        "face_restore_visibility",
        "codeformer_weight"
      ],
      "optional": [
        "source_image",
        "face_model",
        "options",
        "face_boost"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "name": "ReActorFaceSwapOpt",
    "display_name": "ReActor 🌌 Fast Face Swap [OPTIONS]",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorOptions": {
    "input": {
      "required": {
        "input_faces_order": [
          [
            "left-right",
            "right-left",
            "top-bottom",
            "bottom-top",
            "small-large",
            "large-small"
          ],
          {
            "default": "large-small"
          }
        ],
        "input_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "detect_gender_input": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "source_faces_order": [
          [
            "left-right",
            "right-left",
            "top-bottom",
            "bottom-top",
            "small-large",
            "large-small"
          ],
          {
            "default": "large-small"
          }
        ],
        "source_faces_index": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "detect_gender_source": [
          [
            "no",
            "female",
            "male"
          ],
          {
            "default": "no"
          }
        ],
        "console_log_level": [
          [
            0,
            1,
            2
          ],
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_faces_order",
        "input_faces_index",
        "detect_gender_input",
        "source_faces_order",
        "source_faces_index",
        "detect_gender_source",
        "console_log_level"
      ]
    },
    "output": [
      "OPTIONS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OPTIONS"
    ],
    "name": "ReActorOptions",
    "display_name": "ReActor 🌌 Options",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorFaceBoost": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "boost_model": [
          [
            "none",
            "codeformer.pth",
            "GFPGANv1.4.pth"
          ]
        ],
        "interpolation": [
          [
            "Nearest",
            "Bilinear",
            "Bicubic",
            "Lanczos"
          ],
          {
            "default": "Bicubic"
          }
        ],
        "visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.1,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "restore_with_main_after": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "boost_model",
        "interpolation",
        "visibility",
        "codeformer_weight",
        "restore_with_main_after"
      ]
    },
    "output": [
      "FACE_BOOST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_BOOST"
    ],
    "name": "ReActorFaceBoost",
    "display_name": "ReActor 🌌 Face Booster",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorMaskHelper": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "swapped_image": [
          "IMAGE"
        ],
        "bbox_model_name": [
          []
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_drop_size": [
          "INT",
          {
            "min": 1,
            "max": 8192,
            "step": 1,
            "default": 10
          }
        ],
        "sam_model_name": [
          [
            "sam_vit_b_01ec64.pth"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ],
        "morphology_operation": [
          [
            "dilate",
            "erode",
            "open",
            "close"
          ]
        ],
        "morphology_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 9,
            "min": 0,
            "max": 48,
            "step": 1
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 3.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "swapped_image",
        "bbox_model_name",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "bbox_drop_size",
        "sam_model_name",
        "sam_dilation",
        "sam_threshold",
        "bbox_expansion",
        "mask_hint_threshold",
        "mask_hint_use_negative",
        "morphology_operation",
        "morphology_distance",
        "blur_radius",
        "sigma_factor"
      ],
      "optional": [
        "mask_optional"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "MASK_PREVIEW",
      "SWAPPED_FACE"
    ],
    "name": "ReActorMaskHelper",
    "display_name": "ReActor 🌌 Masking Helper",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorSetWeight": {
    "input": {
      "required": {
        "input_image": [
          "IMAGE"
        ],
        "faceswap_weight": [
          [
            "0%",
            "12.5%",
            "25%",
            "37.5%",
            "50%",
            "62.5%",
            "75%",
            "87.5%",
            "100%"
          ],
          {
            "default": "50%"
          }
        ]
      },
      "optional": {
        "source_image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_image",
        "faceswap_weight"
      ],
      "optional": [
        "source_image",
        "face_model"
      ]
    },
    "output": [
      "IMAGE",
      "FACE_MODEL"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INPUT_IMAGE",
      "FACE_MODEL"
    ],
    "name": "ReActorSetWeight",
    "display_name": "ReActor 🌌 Set Face Swap Weight",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": true
  },
  "ReActorSaveFaceModel": {
    "input": {
      "required": {
        "save_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "face_model_name": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "select_face_index": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "face_model": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "save_mode",
        "face_model_name",
        "select_face_index"
      ],
      "optional": [
        "image",
        "face_model"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ReActorSaveFaceModel",
    "display_name": "Save Face Model 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": true
  },
  "ReActorLoadFaceModel": {
    "input": {
      "required": {
        "face_model": [
          [
            "none"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "face_model"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_MODEL"
    ],
    "name": "ReActorLoadFaceModel",
    "display_name": "Load Face Model 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorBuildFaceModel": {
    "input": {
      "required": {
        "save_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_off": "OFF",
            "label_on": "ON"
          }
        ],
        "send_only": [
          "BOOLEAN",
          {
            "default": false,
            "label_off": "NO",
            "label_on": "YES"
          }
        ],
        "face_model_name": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "compute_method": [
          [
            "Mean",
            "Median",
            "Mode"
          ],
          {
            "default": "Mean"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "face_models": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "save_mode",
        "send_only",
        "face_model_name",
        "compute_method"
      ],
      "optional": [
        "images",
        "face_models"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_MODEL"
    ],
    "name": "ReActorBuildFaceModel",
    "display_name": "Build Blended Face Model 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": true
  },
  "ReActorMakeFaceModelBatch": {
    "input": {
      "required": {
        "face_model1": [
          "FACE_MODEL"
        ]
      },
      "optional": {
        "face_model2": [
          "FACE_MODEL"
        ],
        "face_model3": [
          "FACE_MODEL"
        ],
        "face_model4": [
          "FACE_MODEL"
        ],
        "face_model5": [
          "FACE_MODEL"
        ],
        "face_model6": [
          "FACE_MODEL"
        ],
        "face_model7": [
          "FACE_MODEL"
        ],
        "face_model8": [
          "FACE_MODEL"
        ],
        "face_model9": [
          "FACE_MODEL"
        ],
        "face_model10": [
          "FACE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "face_model1"
      ],
      "optional": [
        "face_model2",
        "face_model3",
        "face_model4",
        "face_model5",
        "face_model6",
        "face_model7",
        "face_model8",
        "face_model9",
        "face_model10"
      ]
    },
    "output": [
      "FACE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACE_MODELS"
    ],
    "name": "ReActorMakeFaceModelBatch",
    "display_name": "Make Face Model Batch 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorRestoreFace": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "model": [
          [
            "none",
            "codeformer.pth",
            "GFPGANv1.4.pth"
          ]
        ],
        "visibility": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "codeformer_weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "facedetection",
        "model",
        "visibility",
        "codeformer_weight"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReActorRestoreFace",
    "display_name": "Restore Face 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorImageDublicator": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "count": [
          "INT",
          {
            "default": 1,
            "min": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "count"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "ReActorImageDublicator",
    "display_name": "Image Dublicator (List) 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ImageRGBA2RGB": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRGBA2RGB",
    "display_name": "Convert RGBA to RGB 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "ReActorUnload": {
    "input": {
      "required": {
        "trigger": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "trigger"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReActorUnload",
    "display_name": "Unload ReActor Models 🌌 ReActor",
    "description": "",
    "python_module": "custom_nodes.comfyui-reactor",
    "category": "🌌 ReActor",
    "output_node": false
  },
  "LoadImageByUrl //Browser": {
    "input": {
      "required": {
        "url": [
          "STRING",
          {}
        ]
      },
      "optional": {
        "cache": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "url"
      ],
      "optional": [
        "cache"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LoadImageByUrl //Browser",
    "display_name": "Load Image By URL",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": false
  },
  "SelectInputs //Browser": {
    "input": {
      "required": {
        "input_1": [
          [
            "none"
          ],
          {}
        ],
        "input_2": [
          [
            "none"
          ],
          {}
        ],
        "input_3": [
          [
            "none"
          ],
          {}
        ],
        "input_4": [
          [
            "none"
          ],
          {}
        ],
        "preview": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_1",
        "input_2",
        "input_3",
        "input_4",
        "preview"
      ]
    },
    "output": [
      "INPUT",
      "INPUT",
      "INPUT",
      "INPUT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "input_1",
      "input_2",
      "input_3",
      "input_4"
    ],
    "name": "SelectInputs //Browser",
    "display_name": "Select Node Inputs",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "XyzPlot //Browser": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {}
        ],
        "input_x": [
          "INPUT",
          {}
        ],
        "input_y": [
          "INPUT",
          {}
        ],
        "value_x": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "X values split by semicolon such as \"1girl; 1boy\""
          }
        ],
        "value_y": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "Y values split by semicolon such as \"1girl; 1boy\""
          }
        ],
        "value_z": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "Z values split by semicolon such as \"1girl; 1boy\""
          }
        ],
        "output_folder_name": [
          "STRING",
          {
            "default": "xyz_plot"
          }
        ]
      },
      "optional": {
        "input_z": [
          "INPUT",
          {}
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "input_x",
        "input_y",
        "value_x",
        "value_y",
        "value_z",
        "output_folder_name"
      ],
      "optional": [
        "input_z"
      ],
      "hidden": [
        "prompt",
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "XyzPlot //Browser",
    "display_name": "XYZ Plot",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "DifyTextGenerator //Browser": {
    "input": {
      "required": {
        "dify_api_endpoint": [
          "STRING",
          {}
        ],
        "api_key": [
          "STRING",
          {}
        ]
      },
      "optional": {
        "query": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "Input as the Query field."
          }
        ],
        "inputs_json_str": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "JSON format. It will overwrite the query field above."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dify_api_endpoint",
        "api_key"
      ],
      "optional": [
        "query",
        "inputs_json_str"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "DifyTextGenerator //Browser",
    "display_name": "Dify Text Generator",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "UploadToRemote //Browser": {
    "input": {
      "required": {
        "remote_url": [
          "STRING",
          {}
        ],
        "extension": [
          [
            "jpeg",
            "webp",
            "png",
            "jpg",
            "gif"
          ]
        ],
        "quality": [
          "INT",
          {
            "default": 85,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "embed_workflow": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "images": [
          "IMAGE",
          {}
        ],
        "extra": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "track_id": [
          "STRING",
          {
            "placeholder": "Optional. Post it as the track_id field."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "remote_url",
        "extension",
        "quality",
        "embed_workflow"
      ],
      "optional": [
        "images",
        "extra",
        "track_id"
      ],
      "hidden": [
        "unique_id",
        "prompt"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "UploadToRemote //Browser",
    "display_name": "Upload To Remote",
    "description": "",
    "python_module": "custom_nodes.comfyui-browser",
    "category": "Browser",
    "output_node": true
  },
  "CLIPTextEncodeBLIP": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "image": [
          "IMAGE"
        ],
        "min_length": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 200,
            "step": 1
          }
        ],
        "max_length": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 200,
            "step": 1
          }
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++"
          ]
        ],
        "string_field": [
          "STRING",
          {
            "multiline": true,
            "default": "{{BLIP_TEXT}}"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "image",
        "min_length",
        "max_length",
        "token_normalization",
        "weight_interpretation",
        "string_field"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeBLIP",
    "display_name": "CLIPTextEncodeBLIP",
    "description": "",
    "python_module": "custom_nodes.blip",
    "category": "conditioning",
    "output_node": false
  },
  "IPAdapter": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "weight_type": [
          [
            "standard",
            "prompt is more important",
            "style transfer"
          ]
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "start_at",
        "end_at",
        "weight_type"
      ],
      "optional": [
        "attn_mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapter",
    "display_name": "IPAdapter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterAdvanced",
    "display_name": "IPAdapter Advanced",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterBatch",
    "display_name": "IPAdapter Batch (Adv.)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterFaceID": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAdapterFaceID",
    "display_name": "IPAdapter FaceID",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterFaceIDKolors": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_kolors": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_kolors",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAdapterFaceIDKolors",
    "display_name": "IPAdapter FaceID Kolors",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAAdapterFaceIDBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAAdapterFaceIDBatch",
    "display_name": "IPAdapter FaceID Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterTiled": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "sharpening",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "tiles",
      "masks"
    ],
    "name": "IPAdapterTiled",
    "display_name": "IPAdapter Tiled",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/tiled",
    "output_node": false
  },
  "IPAdapterTiledBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "sharpening",
        "embeds_scaling",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "tiles",
      "masks"
    ],
    "name": "IPAdapterTiledBatch",
    "display_name": "IPAdapter Tiled Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/tiled",
    "output_node": false
  },
  "IPAdapterEmbeds": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterEmbeds",
    "display_name": "IPAdapter Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterEmbedsBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterEmbedsBatch",
    "display_name": "IPAdapter Embeds Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterStyleComposition": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image_style": [
          "IMAGE"
        ],
        "image_composition": [
          "IMAGE"
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ],
          {
            "default": "average"
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image_style",
        "image_composition",
        "weight_style",
        "weight_composition",
        "expand_style",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterStyleComposition",
    "display_name": "IPAdapter Style & Composition SDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/style_composition",
    "output_node": false
  },
  "IPAdapterStyleCompositionBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image_style": [
          "IMAGE"
        ],
        "image_composition": [
          "IMAGE"
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image_style",
        "image_composition",
        "weight_style",
        "weight_composition",
        "expand_style",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterStyleCompositionBatch",
    "display_name": "IPAdapter Style & Composition Batch SDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/style_composition",
    "output_node": false
  },
  "IPAdapterMS": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "layer_weights": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "layer_weights"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterMS",
    "display_name": "IPAdapter Mad Scientist",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/dev",
    "output_node": false
  },
  "IPAdapterClipVisionEnhancer": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "enhance_tiles": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16
          }
        ],
        "enhance_ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "enhance_tiles",
        "enhance_ratio"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterClipVisionEnhancer",
    "display_name": "IPAdapter ClipVision Enhancer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/dev",
    "output_node": false
  },
  "IPAdapterClipVisionEnhancerBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "enhance_tiles": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16
          }
        ],
        "enhance_ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling",
        "enhance_tiles",
        "enhance_ratio",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterClipVisionEnhancerBatch",
    "display_name": "IPAdapter ClipVision Enhancer Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/dev",
    "output_node": false
  },
  "IPAdapterFromParams": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "ipadapter_params": [
          "IPADAPTER_PARAMS"
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "ipadapter_params",
        "combine_embeds",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterFromParams",
    "display_name": "IPAdapter from Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "IPAdapterPreciseStyleTransfer": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "style_boost": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "style_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseStyleTransfer",
    "display_name": "IPAdapter Precise Style Transfer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterPreciseStyleTransferBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "style_boost": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "style_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseStyleTransferBatch",
    "display_name": "IPAdapter Precise Style Transfer Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterPreciseComposition": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "composition_boost": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "composition_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseComposition",
    "display_name": "IPAdapter Precise Composition",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterPreciseCompositionBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "composition_boost": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -5,
            "max": 5,
            "step": 0.05
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "composition_boost",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterPreciseCompositionBatch",
    "display_name": "IPAdapter Precise Composition Batch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterUnifiedLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoader",
    "display_name": "IPAdapter Unified Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterUnifiedLoaderFaceID": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset",
        "lora_strength",
        "provider"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoaderFaceID",
    "display_name": "IPAdapter Unified Loader FaceID",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterModelLoader": {
    "input": {
      "required": {
        "ipadapter_file": [
          [
            "ip-adapter-faceid-plusv2_sd15.bin",
            "ip-adapter-faceid-plusv2_sdxl.bin",
            "ip-adapter-faceid-portrait-v11_sd15.bin",
            "ip-adapter-faceid-portrait_sdxl.bin",
            "ip-adapter-faceid-portrait_sdxl_unnorm.bin",
            "ip-adapter-faceid_sd15.bin",
            "ip-adapter-faceid_sdxl.bin",
            "ip-adapter-full-face_sd15.safetensors",
            "ip-adapter-plus-face_sd15.safetensors",
            "ip-adapter-plus-face_sdxl_vit-h.safetensors",
            "ip-adapter-plus_sd15.safetensors",
            "ip-adapter-plus_sdxl_vit-h.safetensors",
            "ip-adapter_sd15.safetensors",
            "ip-adapter_sd15_light_v11.bin",
            "ip-adapter_sd15_vit-G.safetensors",
            "ip-adapter_sdxl.safetensors",
            "ip-adapter_sdxl_vit-h.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter_file"
      ]
    },
    "output": [
      "IPADAPTER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IPADAPTER"
    ],
    "name": "IPAdapterModelLoader",
    "display_name": "IPAdapter Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterInsightFaceLoader": {
    "input": {
      "required": {
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "model_name": [
          [
            "buffalo_l",
            "antelopev2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "provider",
        "model_name"
      ]
    },
    "output": [
      "INSIGHTFACE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INSIGHTFACE"
    ],
    "name": "IPAdapterInsightFaceLoader",
    "display_name": "IPAdapter InsightFace Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterUnifiedLoaderCommunity": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "Composition",
            "Kolors"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoaderCommunity",
    "display_name": "IPAdapter Unified Loader Community",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterEncoder": {
    "input": {
      "required": {
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter",
        "image",
        "weight"
      ],
      "optional": [
        "mask",
        "clip_vision"
      ]
    },
    "output": [
      "EMBEDS",
      "EMBEDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pos_embed",
      "neg_embed"
    ],
    "name": "IPAdapterEncoder",
    "display_name": "IPAdapter Encoder",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterCombineEmbeds": {
    "input": {
      "required": {
        "embed1": [
          "EMBEDS"
        ],
        "method": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min"
          ]
        ]
      },
      "optional": {
        "embed2": [
          "EMBEDS"
        ],
        "embed3": [
          "EMBEDS"
        ],
        "embed4": [
          "EMBEDS"
        ],
        "embed5": [
          "EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "embed1",
        "method"
      ],
      "optional": [
        "embed2",
        "embed3",
        "embed4",
        "embed5"
      ]
    },
    "output": [
      "EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "EMBEDS"
    ],
    "name": "IPAdapterCombineEmbeds",
    "display_name": "IPAdapter Combine Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterNoise": {
    "input": {
      "required": {
        "type": [
          [
            "fade",
            "dissolve",
            "gaussian",
            "shuffle"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "type",
        "strength",
        "blur"
      ],
      "optional": [
        "image_optional"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "IPAdapterNoise",
    "display_name": "IPAdapter Noise",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "PrepImageForClipVision": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "LANCZOS",
            "BICUBIC",
            "HAMMING",
            "BILINEAR",
            "BOX",
            "NEAREST"
          ]
        ],
        "crop_position": [
          [
            "top",
            "bottom",
            "left",
            "right",
            "center",
            "pad"
          ]
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "interpolation",
        "crop_position",
        "sharpening"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PrepImageForClipVision",
    "display_name": "Prep Image For ClipVision",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "IPAdapterSaveEmbeds": {
    "input": {
      "required": {
        "embeds": [
          "EMBEDS"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "IP_embeds"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "embeds",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "IPAdapterSaveEmbeds",
    "display_name": "IPAdapter Save Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": true
  },
  "IPAdapterLoadEmbeds": {
    "input": {
      "required": {
        "embeds": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "embeds"
      ]
    },
    "output": [
      "EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "EMBEDS"
    ],
    "name": "IPAdapterLoadEmbeds",
    "display_name": "IPAdapter Load Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterWeights": {
    "input": {
      "required": {
        "weights": [
          "STRING",
          {
            "default": "1.0, 0.0",
            "multiline": true
          }
        ],
        "timing": [
          [
            "custom",
            "linear",
            "ease_in_out",
            "ease_in",
            "ease_out",
            "random"
          ],
          {
            "default": "linear"
          }
        ],
        "frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "end_frame": [
          "INT",
          {
            "default": 9999,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "add_starting_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "add_ending_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "method": [
          [
            "full batch",
            "shift batches",
            "alternate batches"
          ],
          {
            "default": "full batch"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "weights",
        "timing",
        "frames",
        "start_frame",
        "end_frame",
        "add_starting_frames",
        "add_ending_frames",
        "method"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "INT",
      "IMAGE",
      "IMAGE",
      "WEIGHTS_STRATEGY"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy"
    ],
    "name": "IPAdapterWeights",
    "display_name": "IPAdapter Weights",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterCombineWeights": {
    "input": {
      "required": {
        "weights_1": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "weights_2": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_1",
        "weights_2"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "weights",
      "count"
    ],
    "name": "IPAdapterCombineWeights",
    "display_name": "IPAdapter Combine Weights",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "IPAdapterWeightsFromStrategy": {
    "input": {
      "required": {
        "weights_strategy": [
          "WEIGHTS_STRATEGY"
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_strategy"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "INT",
      "IMAGE",
      "IMAGE",
      "WEIGHTS_STRATEGY"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy"
    ],
    "name": "IPAdapterWeightsFromStrategy",
    "display_name": "IPAdapter Weights From Strategy",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterPromptScheduleFromWeightsStrategy": {
    "input": {
      "required": {
        "weights_strategy": [
          "WEIGHTS_STRATEGY"
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_strategy",
        "prompt"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt_schedule"
    ],
    "name": "IPAdapterPromptScheduleFromWeightsStrategy",
    "display_name": "Prompt Schedule From Weights Strategy",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterRegionalConditioning": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.05
          }
        ],
        "prompt_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise",
            "composition precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_weight",
        "prompt_weight",
        "weight_type",
        "start_at",
        "end_at"
      ],
      "optional": [
        "mask",
        "positive",
        "negative"
      ]
    },
    "output": [
      "IPADAPTER_PARAMS",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IPADAPTER_PARAMS",
      "POSITIVE",
      "NEGATIVE"
    ],
    "name": "IPAdapterRegionalConditioning",
    "display_name": "IPAdapter Regional Conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "IPAdapterCombineParams": {
    "input": {
      "required": {
        "params_1": [
          "IPADAPTER_PARAMS"
        ],
        "params_2": [
          "IPADAPTER_PARAMS"
        ]
      },
      "optional": {
        "params_3": [
          "IPADAPTER_PARAMS"
        ],
        "params_4": [
          "IPADAPTER_PARAMS"
        ],
        "params_5": [
          "IPADAPTER_PARAMS"
        ]
      }
    },
    "input_order": {
      "required": [
        "params_1",
        "params_2"
      ],
      "optional": [
        "params_3",
        "params_4",
        "params_5"
      ]
    },
    "output": [
      "IPADAPTER_PARAMS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IPADAPTER_PARAMS"
    ],
    "name": "IPAdapterCombineParams",
    "display_name": "IPAdapter Combine Params",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "Image to base64 Output": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Image to base64 Output",
    "display_name": "Image to base64 Output",
    "description": "",
    "python_module": "custom_nodes.image_to_base64",
    "category": "image",
    "output_node": true
  },
  "Dir_Gir_Picker": {
    "input": {
      "required": {},
      "hidden": {
        "prompt": "PROMPT",
        "id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "hidden": [
        "prompt",
        "id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "directory"
    ],
    "name": "Dir_Gir_Picker",
    "display_name": "GIR Dir Picker",
    "description": "",
    "python_module": "custom_nodes.comfyui-dirgir",
    "category": "Dir Gir",
    "output_node": true
  },
  "Dir_Gir_Looper": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "forceInput": true,
            "default": "",
            "dynamicPrompts": false
          }
        ],
        "filter_type": [
          [
            "regex",
            "extension"
          ],
          {
            "default": "extension"
          }
        ],
        "filter_value": [
          "STRING",
          {
            "default": "",
            "dynamicPrompts": false
          }
        ],
        "sort_by": [
          [
            "name",
            "date_modified",
            "date_created"
          ],
          {
            "default": "name"
          }
        ],
        "sort_order": [
          [
            "asc",
            "desc",
            "random"
          ],
          {
            "default": "asc"
          }
        ],
        "loop_index": [
          "INT",
          {
            "default": 0
          }
        ],
        "pause_loop": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "directory",
        "filter_type",
        "filter_value",
        "sort_by",
        "sort_order",
        "loop_index",
        "pause_loop"
      ],
      "hidden": [
        "prompt",
        "id"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING",
      "STRING",
      "COMBO"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "file_count",
      "current_index",
      "current_file",
      "current_file_path",
      "all_files"
    ],
    "name": "Dir_Gir_Looper",
    "display_name": "GIR Loopy Dir",
    "description": "",
    "python_module": "custom_nodes.comfyui-dirgir",
    "category": "Dir Gir",
    "output_node": true
  },
  "Gir_Image_Nabber": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "forceInput": true,
            "default": "",
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Gir_Image_Nabber",
    "display_name": "GIR Image (Path) Nabber",
    "description": "",
    "python_module": "custom_nodes.comfyui-dirgir",
    "category": "image",
    "output_node": true
  },
  "SDXLPromptStyler": {
    "input": {
      "required": {
        "text_positive": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "text_negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "style": [
          [
            "base",
            "ads-advertising",
            "ads-automotive",
            "ads-corporate",
            "ads-fashion editorial",
            "ads-food photography",
            "ads-gourmet food photography",
            "ads-luxury",
            "ads-real estate",
            "ads-retail",
            "artstyle-abstract",
            "artstyle-abstract expressionism",
            "artstyle-art deco",
            "artstyle-art nouveau",
            "artstyle-constructivist",
            "artstyle-cubist",
            "artstyle-expressionist",
            "artstyle-graffiti",
            "artstyle-hyperrealism",
            "artstyle-impressionist",
            "artstyle-pointillism",
            "artstyle-pop art",
            "artstyle-psychedelic",
            "artstyle-renaissance",
            "artstyle-steampunk",
            "artstyle-surrealist",
            "artstyle-typography",
            "artstyle-watercolor",
            "futuristic-biomechanical",
            "futuristic-biomechanical cyberpunk",
            "futuristic-cybernetic",
            "futuristic-cybernetic robot",
            "futuristic-cyberpunk cityscape",
            "futuristic-futuristic",
            "futuristic-retro cyberpunk",
            "futuristic-retro futurism",
            "futuristic-sci-fi",
            "futuristic-vaporwave",
            "game-bubble bobble",
            "game-cyberpunk game",
            "game-fighting game",
            "game-gta",
            "game-mario",
            "game-minecraft",
            "game-pokemon",
            "game-retro arcade",
            "game-retro game",
            "game-rpg fantasy game",
            "game-strategy game",
            "game-streetfighter",
            "game-zelda",
            "misc-architectural",
            "misc-disco",
            "misc-dreamscape",
            "misc-dystopian",
            "misc-fairy tale",
            "misc-gothic",
            "misc-grunge",
            "misc-horror",
            "misc-kawaii",
            "misc-lovecraftian",
            "misc-macabre",
            "misc-manga",
            "misc-metropolis",
            "misc-minimalist",
            "misc-monochrome",
            "misc-nautical",
            "misc-space",
            "misc-stained glass",
            "misc-techwear fashion",
            "misc-tribal",
            "misc-zentangle",
            "papercraft-collage",
            "papercraft-flat papercut",
            "papercraft-kirigami",
            "papercraft-paper mache",
            "papercraft-paper quilling",
            "papercraft-papercut collage",
            "papercraft-papercut shadow box",
            "papercraft-stacked papercut",
            "papercraft-thick layered papercut",
            "photo-alien",
            "photo-film noir",
            "photo-glamour",
            "photo-hdr",
            "photo-iphone photographic",
            "photo-long exposure",
            "photo-neon noir",
            "photo-silhouette",
            "photo-tilt-shift",
            "sai-3d-model",
            "sai-analog film",
            "sai-anime",
            "sai-cinematic",
            "sai-comic book",
            "sai-craft clay",
            "sai-digital art",
            "sai-enhance",
            "sai-fantasy art",
            "sai-isometric",
            "sai-line art",
            "sai-lowpoly",
            "sai-neonpunk",
            "sai-origami",
            "sai-photographic",
            "sai-pixel art",
            "sai-texture"
          ]
        ],
        "log_prompt": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "yes",
            "label_off": "no"
          }
        ],
        "style_positive": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "yes",
            "label_off": "no"
          }
        ],
        "style_negative": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "yes",
            "label_off": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_positive",
        "text_negative",
        "style",
        "log_prompt",
        "style_positive",
        "style_negative"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "text_positive",
      "text_negative"
    ],
    "name": "SDXLPromptStyler",
    "display_name": "SDXL Prompt Styler",
    "description": "",
    "python_module": "custom_nodes.sdxl_prompt_styler",
    "category": "utils",
    "output_node": false
  },
  "SDXLPromptStylerAdvanced": {
    "input": {
      "required": {
        "text_positive_g": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "text_positive_l": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "text_negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "style": [
          [
            "base",
            "ads-advertising",
            "ads-automotive",
            "ads-corporate",
            "ads-fashion editorial",
            "ads-food photography",
            "ads-gourmet food photography",
            "ads-luxury",
            "ads-real estate",
            "ads-retail",
            "artstyle-abstract",
            "artstyle-abstract expressionism",
            "artstyle-art deco",
            "artstyle-art nouveau",
            "artstyle-constructivist",
            "artstyle-cubist",
            "artstyle-expressionist",
            "artstyle-graffiti",
            "artstyle-hyperrealism",
            "artstyle-impressionist",
            "artstyle-pointillism",
            "artstyle-pop art",
            "artstyle-psychedelic",
            "artstyle-renaissance",
            "artstyle-steampunk",
            "artstyle-surrealist",
            "artstyle-typography",
            "artstyle-watercolor",
            "futuristic-biomechanical",
            "futuristic-biomechanical cyberpunk",
            "futuristic-cybernetic",
            "futuristic-cybernetic robot",
            "futuristic-cyberpunk cityscape",
            "futuristic-futuristic",
            "futuristic-retro cyberpunk",
            "futuristic-retro futurism",
            "futuristic-sci-fi",
            "futuristic-vaporwave",
            "game-bubble bobble",
            "game-cyberpunk game",
            "game-fighting game",
            "game-gta",
            "game-mario",
            "game-minecraft",
            "game-pokemon",
            "game-retro arcade",
            "game-retro game",
            "game-rpg fantasy game",
            "game-strategy game",
            "game-streetfighter",
            "game-zelda",
            "misc-architectural",
            "misc-disco",
            "misc-dreamscape",
            "misc-dystopian",
            "misc-fairy tale",
            "misc-gothic",
            "misc-grunge",
            "misc-horror",
            "misc-kawaii",
            "misc-lovecraftian",
            "misc-macabre",
            "misc-manga",
            "misc-metropolis",
            "misc-minimalist",
            "misc-monochrome",
            "misc-nautical",
            "misc-space",
            "misc-stained glass",
            "misc-techwear fashion",
            "misc-tribal",
            "misc-zentangle",
            "papercraft-collage",
            "papercraft-flat papercut",
            "papercraft-kirigami",
            "papercraft-paper mache",
            "papercraft-paper quilling",
            "papercraft-papercut collage",
            "papercraft-papercut shadow box",
            "papercraft-stacked papercut",
            "papercraft-thick layered papercut",
            "photo-alien",
            "photo-film noir",
            "photo-glamour",
            "photo-hdr",
            "photo-iphone photographic",
            "photo-long exposure",
            "photo-neon noir",
            "photo-silhouette",
            "photo-tilt-shift",
            "sai-3d-model",
            "sai-analog film",
            "sai-anime",
            "sai-cinematic",
            "sai-comic book",
            "sai-craft clay",
            "sai-digital art",
            "sai-enhance",
            "sai-fantasy art",
            "sai-isometric",
            "sai-line art",
            "sai-lowpoly",
            "sai-neonpunk",
            "sai-origami",
            "sai-photographic",
            "sai-pixel art",
            "sai-texture"
          ]
        ],
        "negative_prompt_to": [
          [
            "Both",
            "G only",
            "L only"
          ],
          {
            "default": "Both"
          }
        ],
        "copy_to_l": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "yes",
            "label_off": "no"
          }
        ],
        "log_prompt": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "yes",
            "label_off": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_positive_g",
        "text_positive_l",
        "text_negative",
        "style",
        "negative_prompt_to",
        "copy_to_l",
        "log_prompt"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "text_positive_g",
      "text_positive_l",
      "text_positive",
      "text_negative_g",
      "text_negative_l",
      "text_negative"
    ],
    "name": "SDXLPromptStylerAdvanced",
    "display_name": "SDXL Prompt Styler Advanced",
    "description": "",
    "python_module": "custom_nodes.sdxl_prompt_styler",
    "category": "utils",
    "output_node": false
  },
  "FL_ImageRandomizer": {
    "input": {
      "required": {
        "mode": [
          [
            "Image",
            "Video"
          ],
          {
            "default": "Image"
          }
        ],
        "directory_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "search_subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "directory_path",
        "seed",
        "search_subdirectories"
      ]
    },
    "output": [
      "IMAGE",
      "PATH"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "PATH"
    ],
    "name": "FL_ImageRandomizer",
    "display_name": "FL Image Randomizer",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_ImageCaptionSaver": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {}
        ],
        "folder_name": [
          "STRING",
          {
            "default": "output_folder"
          }
        ],
        "caption_text": [
          "STRING",
          {
            "default": "Your caption here"
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "folder_name",
        "caption_text",
        "overwrite"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_ImageCaptionSaver",
    "display_name": "FL Image Caption Saver",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_VideoCaptionSaver": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {}
        ],
        "folder_name": [
          "STRING",
          {
            "default": "output_videos"
          }
        ],
        "caption_text": [
          "STRING",
          {
            "default": "Your caption here"
          }
        ],
        "video_name": [
          "STRING",
          {
            "default": "video"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24.0,
            "min": 1.0,
            "max": 60.0,
            "step": 1.0
          }
        ],
        "format": [
          [
            "mp4",
            "avi"
          ],
          {
            "default": "mp4"
          }
        ],
        "quality": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "folder_name",
        "caption_text",
        "video_name",
        "fps",
        "format",
        "quality",
        "overwrite"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_VideoCaptionSaver",
    "display_name": "FL Video Caption Saver",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_ImageDimensionDisplay": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_ImageDimensionDisplay",
    "display_name": "FL Image Size",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_GeminiVideoCaptioner": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "model": [
          [
            "gemini-1.0-pro-vision",
            "gemini-1.5-pro",
            "gemini-1.5-flash",
            "gemini-2.0-flash"
          ],
          {
            "default": "gemini-1.5-flash"
          }
        ],
        "frames_per_second": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "max_duration_minutes": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 45.0,
            "step": 0.1
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "Describe this video scene in detail. Include any important actions, subjects, settings, and atmosphere.",
            "multiline": true
          }
        ],
        "process_audio": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "max_output_tokens": [
          "INT",
          {
            "default": 1024,
            "min": 50,
            "max": 8192,
            "step": 10
          }
        ],
        "top_p": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "top_k": [
          "INT",
          {
            "default": 64,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "video_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "image": [
          "IMAGE",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "model",
        "frames_per_second",
        "max_duration_minutes",
        "prompt",
        "process_audio",
        "temperature",
        "max_output_tokens",
        "top_p",
        "top_k",
        "seed"
      ],
      "optional": [
        "video_path",
        "image"
      ]
    },
    "output": [
      "STRING",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "caption",
      "sampled_frame"
    ],
    "name": "FL_GeminiVideoCaptioner",
    "display_name": "FL Gemini Video Captioner",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/AI",
    "output_node": false
  },
  "FL_GeminiImageEditor": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "api_key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "model": [
          [
            "models/gemini-2.0-flash-exp"
          ],
          {
            "default": "models/gemini-2.0-flash-exp"
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "max_retries": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 5,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 66666666,
            "min": 0,
            "max": 2147483647
          }
        ],
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "api_key",
        "model",
        "temperature",
        "max_retries",
        "batch_size"
      ],
      "optional": [
        "seed",
        "image1",
        "image2",
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "API Respond"
    ],
    "name": "FL_GeminiImageEditor",
    "display_name": "FL Gemini Image Editor",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/AI",
    "output_node": false
  },
  "FL_CodeNode": {
    "input": {
      "required": {},
      "optional": {
        "code_input": [
          "STRING",
          {
            "default": "outputs[0] = 'hello, world!'",
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "file": [
          "STRING",
          {
            "default": "./res/hello.py",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "use_file": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "run_always": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "code_input",
        "file",
        "use_file",
        "run_always"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "output_0",
      "output_1",
      "output_2",
      "output_3"
    ],
    "name": "FL_CodeNode",
    "display_name": "FL Code Node",
    "description": "\nFL_CodeNode is designed to execute custom user-provided Python code. The code can be directly entered as a string input or loaded from a specified file. This class processes dynamic inputs and provides four generic output slots. The execution environment includes predefined 'inputs' and 'outputs' dictionaries to facilitate interaction with the code. Proper error handling is included to ensure informative feedback in case of execution failures. This node is ideal for users needing to integrate custom logic or algorithms into their workflows.\n",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_ImagePixelator": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {}
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.01,
            "max": 0.2,
            "step": 0.01
          }
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "max": 10,
            "step": 1
          }
        ],
        "modulation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "scale_factor",
        "kernel_size",
        "modulation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImagePixelator",
    "display_name": "FL Image Pixelator",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_DirectoryCrawl": {
    "input": {
      "required": {
        "directory_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "file_type": [
          [
            "images",
            "text"
          ]
        ],
        "max_files": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory_path",
        "file_type",
        "max_files"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "STRING"
    ],
    "name": "FL_DirectoryCrawl",
    "display_name": "FL Directory Crawl",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_Ascii": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "spacing": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "step": 1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "step": 1
          }
        ],
        "characters": [
          "STRING",
          {
            "default": "\\._♥♦♣MachineDelusions♣♦♥_./",
            "description": "characters to use"
          }
        ],
        "font": [
          [
            "arial",
            "Barcode",
            "Circles",
            "Fancy",
            "Pattern"
          ],
          {
            "default": "combo+"
          }
        ],
        "sequence_toggle": [
          [
            "off",
            "on"
          ],
          {
            "default": "off",
            "description": "toggle to type characters in sequence"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "spacing",
        "font_size",
        "characters",
        "font",
        "sequence_toggle"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_Ascii",
    "display_name": "FL Ascii",
    "description": "\nFL_Ascii is a class that converts an image into ASCII art using specified characters, font, spacing, and font size.\nYou can select either local or system fonts based on an environment variable. The class provides customization options\nsuch as using a sequence of characters or mapping characters based on pixel intensity. The spacing and font size can\nbe specified as single values or lists to vary across the image. This tool is useful for creating stylized visual\nrepresentations of images with ASCII characters.\n",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_Glitch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "glitch_amount": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "color_offset": [
          [
            "Disable",
            "Enable"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "glitch_amount",
        "color_offset",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_Glitch",
    "display_name": "FL Glitch",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_Ripple": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "amplitude": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.1,
            "max": 50.0,
            "step": 0.1
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 20.0,
            "min": 1.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "phase": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 360.0,
            "step": 1.0
          }
        ],
        "center_x": [
          "FLOAT",
          {
            "default": 50.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "center_y": [
          "FLOAT",
          {
            "default": 50.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "modulation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "amplitude",
        "frequency",
        "phase",
        "center_x",
        "center_y",
        "modulation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_Ripple",
    "display_name": "FL Ripple",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_PixelSort": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "direction": [
          [
            "Horizontal",
            "Vertical"
          ]
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "smoothing": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "direction",
        "threshold",
        "smoothing",
        "rotation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_PixelSort",
    "display_name": "FL PixelSort",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_HexagonalPattern": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "hexagon_size": [
          "INT",
          {
            "default": 100,
            "min": 50,
            "max": 500,
            "step": 10
          }
        ],
        "shadow_offset": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 20,
            "step": 1
          }
        ],
        "shadow_color": [
          "STRING",
          {
            "default": "purple"
          }
        ],
        "background_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 360.0,
            "step": 1.0
          }
        ],
        "spacing": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.5,
            "max": 2.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "hexagon_size",
        "shadow_offset",
        "shadow_color",
        "background_color",
        "rotation",
        "spacing"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_HexagonalPattern",
    "display_name": "FL Hexagonal Pattern",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_NFTGenerator": {
    "input": {
      "required": {
        "folder_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "dummy_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder_path",
        "dummy_seed"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "IMAGE"
    ],
    "name": "FL_NFTGenerator",
    "display_name": "FL NFT Generator",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/experiments",
    "output_node": false
  },
  "FL_HalftonePattern": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "dot_size": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "dot_spacing": [
          "INT",
          {
            "default": 10,
            "min": 5,
            "max": 50,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "dot_size",
        "dot_spacing"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_HalftonePattern",
    "display_name": "FL Halftone",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_RandomNumber": {
    "input": {
      "required": {},
      "optional": {
        "min_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1000000.0,
            "max": 1000000.0,
            "step": 0.1
          }
        ],
        "max_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1000000.0,
            "max": 1000000.0,
            "step": 0.1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000000
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "min_value",
        "max_value",
        "seed"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "FL_RandomNumber",
    "display_name": "FL Random Number",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_PromptSelector": {
    "input": {
      "required": {
        "prepend_text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompts": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "append_text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "prepend_text",
        "prompts",
        "append_text",
        "index"
      ],
      "optional": []
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_PromptSelector",
    "display_name": "FL Prompt Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Prompting",
    "output_node": false
  },
  "FL_Shadertoy": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 15360,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 15360,
            "step": 8
          }
        ],
        "frame_count": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 262144
          }
        ],
        "fps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 120
          }
        ],
        "source": [
          "STRING",
          {
            "default": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      },
      "optional": {
        "channel_0": [
          "IMAGE"
        ],
        "channel_1": [
          "IMAGE"
        ],
        "channel_2": [
          "IMAGE"
        ],
        "channel_3": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frame_count",
        "fps",
        "source"
      ],
      "optional": [
        "channel_0",
        "channel_1",
        "channel_2",
        "channel_3"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_Shadertoy",
    "display_name": "FL Shadertoy",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_PixelArtShader": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "pixel_size": [
          "FLOAT",
          {
            "default": 15.0,
            "min": 1.0,
            "max": 100.0,
            "step": 1.0
          }
        ],
        "color_depth": [
          "FLOAT",
          {
            "default": 50.0,
            "min": 1.0,
            "max": 255.0,
            "step": 1.0
          }
        ],
        "use_aspect_ratio": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "palette_image": [
          "IMAGE",
          {
            "default": null
          }
        ],
        "palette_colors": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 15,
            "step": 1
          }
        ],
        "mask": [
          "IMAGE",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "pixel_size",
        "color_depth",
        "use_aspect_ratio",
        "palette_image",
        "palette_colors",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_PixelArtShader",
    "display_name": "FL Pixel Art",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_InfiniteZoom": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.1,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "mirror": [
          [
            "on",
            "off"
          ]
        ],
        "mirror_warp": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.5,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "speed": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 120,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "scale",
        "mirror",
        "mirror_warp",
        "iterations",
        "speed",
        "fps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_InfiniteZoom",
    "display_name": "FL Infinite Zoom",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_PaperDrawn": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "angle_num": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10.0,
            "step": 1.0
          }
        ],
        "samp_num": [
          "FLOAT",
          {
            "default": 2.2,
            "min": 1.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "line_width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "vignette": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 120,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "angle_num",
        "samp_num",
        "line_width",
        "vignette",
        "fps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_PaperDrawn",
    "display_name": "FL Paper Drawn",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_ImageNotes": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "Text Here",
            "multiline": false
          }
        ],
        "bar_height": [
          "INT",
          {
            "default": 50,
            "min": 10,
            "max": 200,
            "step": 2
          }
        ],
        "text_size": [
          "INT",
          {
            "default": 24,
            "min": 10,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "text",
        "bar_height",
        "text_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageNotes",
    "display_name": "FL Image Notes",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_ImageCollage": {
    "input": {
      "required": {
        "base_image": [
          "IMAGE"
        ],
        "tile_image": [
          "IMAGE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 32,
            "min": 8,
            "max": 256,
            "step": 8
          }
        ],
        "spacing": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_image",
        "tile_image",
        "tile_size",
        "spacing"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageCollage",
    "display_name": "FL Image Collage",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_KsamplerSettings": {
    "input": {
      "required": {
        "Aspect_Ratio": [
          [
            "1:1___SD 512x512",
            "4:3___SD 682x512",
            "3:2___SD 768x512",
            "16:9__SD 910x512",
            "1:85:1 SD 952x512",
            "2:1___SD 1024x512",
            "1:1_SV3D 576x576",
            "16:9_SVD 576x1024",
            "1:1__SD2 768x768",
            "1:1___XL 1024x1024",
            "16:15_XL 1024x960",
            "17:15_XL 1088x960",
            "17:14_XL 1088x896",
            "4:3___XL 1152x896",
            "18:13_XL 1152x832",
            "3:2___XL 1216x832",
            "5:3___XL 1280x768",
            "7:4___XL 1344x768",
            "21:11_XL 1344x704",
            "2:1___XL 1408x704",
            "23:11_XL 1472x704",
            "21:9__XL 1536x640",
            "5:2___XL 1600x640",
            "26:9__XL 1664x576",
            "3:1___XL 1728x576",
            "28:9__XL 1792x576",
            "29:8__XL 1856x512",
            "15:4__XL 1920x512",
            "31:8__XL 1984x512",
            "4:1___XL 2048x512"
          ],
          {
            "default": "1:1___XL 1024x1024"
          }
        ],
        "rotation": [
          [
            "landscape",
            "portrait"
          ]
        ]
      },
      "optional": {
        "batch": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "Pass_1_steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "Pass_2_steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "Pass_1_CFG": [
          "FLOAT",
          {
            "default": 6.0,
            "min": -10.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.1
          }
        ],
        "Pass_2_CFG": [
          "FLOAT",
          {
            "default": 6.0,
            "min": -10.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.1
          }
        ],
        "Pass_2_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -10.0,
            "max": 100.0,
            "step": 0.001,
            "round": 0.01
          }
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 1.0,
            "max": 10.0,
            "step": 0.1,
            "round": 0.1
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "Aspect_Ratio",
        "rotation"
      ],
      "optional": [
        "batch",
        "Pass_1_steps",
        "Pass_2_steps",
        "Pass_1_CFG",
        "Pass_2_CFG",
        "Pass_2_denoise",
        "scale_factor",
        "sampler",
        "scheduler"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "FLOAT",
      "FLOAT",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "WIDTH",
      "HEIGHT",
      "BATCH_SIZE",
      "Pass_1_steps",
      "Pass_2_steps",
      "Pass_1_CFG",
      "Pass_2_CFG",
      "Pass_2_denoise",
      "SCALE",
      "SAMPLER",
      "SCHEDULER"
    ],
    "name": "FL_KsamplerSettings",
    "display_name": "FL KSampler Settings",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Ksamplers",
    "output_node": false
  },
  "FL_RetroEffect": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "color_offset": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scanline_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "vignette_strength": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_strength": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "color_offset",
        "scanline_strength",
        "vignette_strength",
        "noise_strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_RetroEffect",
    "display_name": "FL Retro Effect",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_InpaintCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "context_expand_pixels": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "context_expand_factor": [
          "FLOAT",
          {
            "default": 1.01,
            "min": 1.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "invert_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "fill_mask_holes": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "mode": [
          [
            "free size",
            "forced size"
          ],
          {
            "default": "free size"
          }
        ],
        "force_size": [
          [
            512,
            768,
            1024,
            1344,
            2048,
            4096,
            8192
          ],
          {
            "default": 1024
          }
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "padding": [
          [
            8,
            16,
            32,
            64,
            128,
            256,
            512
          ],
          {
            "default": 32
          }
        ]
      },
      "optional": {
        "optional_context_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "context_expand_pixels",
        "context_expand_factor",
        "invert_mask",
        "fill_mask_holes",
        "mode",
        "force_size",
        "rescale_factor",
        "padding"
      ],
      "optional": [
        "optional_context_mask"
      ]
    },
    "output": [
      "STITCH",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "stitch",
      "cropped_image",
      "cropped_mask"
    ],
    "name": "FL_InpaintCrop",
    "display_name": "FL Inpaint Crop",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_Inpaint_Stitch": {
    "input": {
      "required": {
        "stitch": [
          "STITCH"
        ],
        "inpainted_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "stitch",
        "inpainted_image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "FL_Inpaint_Stitch",
    "display_name": "FL Inpaint Stitch",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_SDUltimate_Slices": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "slicing": [
          [
            "1x1",
            "1x2",
            "1x3",
            "1x4",
            "2x1",
            "2x2",
            "2x3",
            "2x4",
            "3x1",
            "3x2",
            "3x3",
            "3x4",
            "4x1",
            "4x2",
            "4x3",
            "4x4"
          ]
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 4.0,
            "step": 0.25
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "slicing",
        "multiplier"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "slice_width",
      "slice_height",
      "multiplier"
    ],
    "name": "FL_SDUltimate_Slices",
    "display_name": "FL SDUltimate Slices",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_BatchAlign": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "share_norm": [
          [
            "both",
            "group",
            "layer",
            "disabled"
          ]
        ],
        "share_attn": [
          [
            "q+k",
            "q+k+v",
            "disabled"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": -2,
            "max": 2,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "share_norm",
        "share_attn",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FL_BatchAlign",
    "display_name": "FL Batch Align",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/experiments",
    "output_node": false
  },
  "FL_VideoRecompose": {
    "input": {
      "required": {
        "original_video": [
          "IMAGE"
        ],
        "cropped_video": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ]
      }
    },
    "input_order": {
      "required": [
        "original_video",
        "cropped_video",
        "crop_data"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output_video"
    ],
    "name": "FL_VideoRecompose",
    "display_name": "FL Video Recompose",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/experiments",
    "output_node": false
  },
  "FL_VideoCropMask": {
    "input": {
      "required": {
        "video": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "output_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "step": 64
          }
        ],
        "output_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "step": 64
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "smoothing_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video",
        "mask",
        "output_width",
        "output_height",
        "padding",
        "smoothing_factor"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "cropped_video",
      "mask",
      "original_video",
      "crop_data"
    ],
    "name": "FL_VideoCropMask",
    "display_name": "FL Video CropMask",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_SeparateMaskComponents": {
    "input": {
      "required": {
        "mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK_MAPPING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK_MAPPING"
    ],
    "name": "FL_SeparateMaskComponents",
    "display_name": "FL Separate Mask Components",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_PasteOnCanvas": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "canvas_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 32
          }
        ],
        "canvas_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 32
          }
        ],
        "background_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ],
        "resize_algorithm": [
          [
            "bilinear",
            "nearest",
            "bicubic",
            "lanczos"
          ]
        ],
        "include_alpha": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "bg_image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "canvas_width",
        "canvas_height",
        "background_red",
        "background_green",
        "background_blue",
        "padding",
        "resize_algorithm",
        "include_alpha"
      ],
      "optional": [
        "bg_image_optional"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_PasteOnCanvas",
    "display_name": "FL Paste On Canvas",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_BulletHellGame": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FL_BulletHellGame",
    "display_name": "FL BulletHell Game",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/games",
    "output_node": false
  },
  "FL_TetrisGame": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FL_TetrisGame",
    "display_name": "FL Tetris Game",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/games",
    "output_node": false
  },
  "FL_Dither": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "dither_method": [
          [
            "Floyd-Steinberg",
            "Random",
            "Ordered",
            "Bayer"
          ]
        ],
        "num_colors": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "dither_method",
        "num_colors"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_Dither",
    "display_name": "FL Dither",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/VFX",
    "output_node": false
  },
  "FL_SystemCheck": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FL_SystemCheck",
    "display_name": "FL System Check",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": true
  },
  "FL_ColorPicker": {
    "input": {
      "required": {
        "selected_color": [
          "STRING",
          {
            "default": "#FF0000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "selected_color"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_ColorPicker",
    "display_name": "FL Color Picker",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/experiments",
    "output_node": false
  },
  "FL_GradGenerator": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "color_mode": [
          [
            "RGB",
            "HSV"
          ]
        ],
        "interpolation": [
          [
            "Linear",
            "Ease In",
            "Ease Out",
            "Ease In-Out"
          ]
        ],
        "gradient_colors": [
          "STRING",
          {
            "default": "[]"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "color_mode",
        "interpolation",
        "gradient_colors"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_GradGenerator",
    "display_name": "FL Grad Generator",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/experiments",
    "output_node": false
  },
  "FL_MirrorAndAppendCaptions": {
    "input": {
      "required": {
        "image_directory": [
          "STRING",
          {
            "default": "X://path/to/images"
          }
        ],
        "caption_extension": [
          [
            ".caption",
            ".txt"
          ],
          {
            "default": ".txt"
          }
        ],
        "additional_text": [
          "STRING",
          {
            "default": "Frame"
          }
        ],
        "text_position": [
          [
            "append",
            "prepend"
          ],
          {
            "default": "append"
          }
        ],
        "create_mirrors": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_directory",
        "caption_extension",
        "additional_text",
        "text_position",
        "create_mirrors"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "directory"
    ],
    "name": "FL_MirrorAndAppendCaptions",
    "display_name": "FL Mirror And Append Captions",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_ImageCaptionLayout": {
    "input": {
      "required": {
        "image_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "images_per_row": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10
          }
        ],
        "image_size": [
          "INT",
          {
            "default": 256,
            "min": 64,
            "max": 1024
          }
        ],
        "caption_height": [
          "INT",
          {
            "default": 64,
            "min": 32,
            "max": 256
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 12,
            "min": 8,
            "max": 32
          }
        ],
        "padding": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_directory",
        "images_per_row",
        "image_size",
        "caption_height",
        "font_size",
        "padding"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageCaptionLayout",
    "display_name": "FL Image Caption Layout",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_HFHubModelUploader": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "owner": [
          "STRING",
          {
            "default": ""
          }
        ],
        "repo_name": [
          "STRING",
          {
            "default": "my-awesome-model"
          }
        ],
        "readme_content": [
          "STRING",
          {
            "multiline": true,
            "default": "# My Awesome Model\n\nThis is a great model!"
          }
        ],
        "create_new_repo": [
          [
            "True",
            "False"
          ]
        ],
        "image_folder_path": [
          "STRING",
          {
            "default": "images"
          }
        ],
        "repo_type": [
          [
            "model",
            "dataset",
            "space"
          ]
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "model_card_header": [
          "IMAGE"
        ],
        "zip_file": [
          "ZIP"
        ],
        "zip_filename": [
          "STRING",
          {
            "default": "archive"
          }
        ],
        "zip_folder_path": [
          "STRING",
          {
            "default": "zipped_content"
          }
        ],
        "model_file_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "model_repo_path": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "owner",
        "repo_name",
        "readme_content",
        "create_new_repo",
        "image_folder_path",
        "repo_type"
      ],
      "optional": [
        "image",
        "model_card_header",
        "zip_file",
        "zip_filename",
        "zip_folder_path",
        "model_file_path",
        "model_repo_path"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_HFHubModelUploader",
    "display_name": "FL HFHub Model Uploader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Hugging Face",
    "output_node": false
  },
  "FL_ZipDirectory": {
    "input": {
      "required": {
        "directory_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "zip_filename": [
          "STRING",
          {
            "default": "archive.zip"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory_path",
        "zip_filename"
      ]
    },
    "output": [
      "ZIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ZIP"
    ],
    "name": "FL_ZipDirectory",
    "display_name": "FL Zip Directory",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/File Operations",
    "output_node": false
  },
  "FL_ZipSave": {
    "input": {
      "required": {
        "input_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "output_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "zip_filename": [
          "STRING",
          {
            "default": "archive.zip"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_directory",
        "output_directory",
        "zip_filename"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "zip_path"
    ],
    "name": "FL_ZipSave",
    "display_name": "FL_ZipSave",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/File Operations",
    "output_node": true
  },
  "FL_GPT_Vision": {
    "input": {
      "required": {
        "model": [
          [
            "gpt-4o-mini",
            "gpt-4o",
            "gpt-4-vision-preview"
          ]
        ],
        "system_prompt": [
          "STRING",
          {
            "default": "You are a helpful assistant that describes images accurately and concisely.",
            "multiline": true
          }
        ],
        "request_prompt": [
          "STRING",
          {
            "default": "Describe this image in detail.",
            "multiline": true
          }
        ],
        "output_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "max_tokens": [
          "INT",
          {
            "default": 300,
            "min": 1,
            "max": 4096
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 2.0,
            "step": 0.1
          }
        ],
        "detail": [
          [
            "auto",
            "low",
            "high"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "input_directory": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "system_prompt",
        "request_prompt",
        "output_directory",
        "overwrite",
        "max_tokens",
        "temperature",
        "detail",
        "batch_size"
      ],
      "optional": [
        "images",
        "input_directory"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "message",
      "output_directory"
    ],
    "name": "FL_GPT_Vision",
    "display_name": "FL GPT Captions",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/GPT",
    "output_node": false
  },
  "FL_TimeLine": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "timeline_data": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "ipadapter_preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)"
          ],
          {
            "default": "LIGHT - SD1.5 only (low strength)"
          }
        ],
        "video_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "step": 8
          }
        ],
        "video_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "step": 8
          }
        ],
        "interpolation_mode": [
          [
            "Linear",
            "Ease_in",
            "Ease_out",
            "Ease_in_out"
          ],
          {
            "default": "Linear"
          }
        ],
        "number_animation_frames": [
          "INT",
          {
            "default": 96,
            "min": 1,
            "max": 1000,
            "step": 1
          }
        ],
        "frames_per_second": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 60,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "timeline_data"
      ],
      "optional": [
        "ipadapter_preset",
        "video_width",
        "video_height",
        "interpolation_mode",
        "number_animation_frames",
        "frames_per_second"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FL_TimeLine",
    "display_name": "FL Time Line",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/WIP",
    "output_node": false
  },
  "FL_SimpleGPTVision": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          [
            "gpt-4o-mini",
            "gpt-4o",
            "gpt-4-vision-preview"
          ]
        ],
        "system_prompt": [
          "STRING",
          {
            "default": "You are a helpful assistant that describes images accurately and concisely.",
            "multiline": true
          }
        ],
        "request_prompt": [
          "STRING",
          {
            "default": "Describe this image in detail.",
            "multiline": true
          }
        ],
        "max_tokens": [
          "INT",
          {
            "default": 300,
            "min": 1,
            "max": 4096
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 2.0,
            "step": 0.1
          }
        ],
        "detail": [
          [
            "auto",
            "low",
            "high"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "system_prompt",
        "request_prompt",
        "max_tokens",
        "temperature",
        "detail"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_SimpleGPTVision",
    "display_name": "FL Simple GPT Vision",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/GPT",
    "output_node": false
  },
  "FL_SendToDiscordWebhook": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "webhook_url": [
          "STRING",
          {
            "default": "https://discord.com/api/webhooks/YOUR_WEBHOOK_HASH"
          }
        ],
        "frame_rate": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 60,
            "step": 1
          }
        ],
        "save_locally": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "bot_username": [
          "STRING",
          {
            "default": "ComfyUI Bot"
          }
        ],
        "message": [
          "STRING",
          {
            "default": "Here's your image/video:",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "webhook_url",
        "frame_rate",
        "save_locally",
        "bot_username",
        "message"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_SendToDiscordWebhook",
    "display_name": "FL Kytra Discord Webhook",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Discord",
    "output_node": true
  },
  "FL_HF_Character": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "owner": [
          "STRING",
          {
            "default": ""
          }
        ],
        "repo_name": [
          "STRING",
          {
            "default": "my-awesome-model"
          }
        ],
        "studio_name": [
          "STRING",
          {
            "default": ""
          }
        ],
        "project_name": [
          "STRING",
          {
            "default": ""
          }
        ],
        "character_name": [
          "STRING",
          {
            "default": ""
          }
        ],
        "create_new_repo": [
          [
            "True",
            "False"
          ]
        ],
        "repo_type": [
          [
            "model",
            "dataset",
            "space"
          ]
        ]
      },
      "optional": {
        "lora_file": [
          "STRING",
          {
            "default": ""
          }
        ],
        "dataset_zip": [
          "ZIP"
        ],
        "caption_layout": [
          "IMAGE"
        ],
        "caption_PDF_layout": [
          "PDF"
        ],
        "csv_file": [
          "CSV"
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "owner",
        "repo_name",
        "studio_name",
        "project_name",
        "character_name",
        "create_new_repo",
        "repo_type"
      ],
      "optional": [
        "lora_file",
        "dataset_zip",
        "caption_layout",
        "caption_PDF_layout",
        "csv_file"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_HF_Character",
    "display_name": "FL HF Character",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Hugging Face",
    "output_node": false
  },
  "FL_CaptionToCSV": {
    "input": {
      "required": {
        "image_directory": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_directory"
      ]
    },
    "output": [
      "CSV"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CSV"
    ],
    "name": "FL_CaptionToCSV",
    "display_name": "FL Caption To CSV",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_KsamplerPlus": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_type": [
          [
            "latent",
            "image"
          ]
        ],
        "x_slices": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 8
          }
        ],
        "y_slices": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 8
          }
        ],
        "overlap": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 0.9,
            "step": 0.01
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ],
        "use_sliced_conditioning": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "latent_image": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "input_type",
        "x_slices",
        "y_slices",
        "overlap",
        "batch_size",
        "use_sliced_conditioning"
      ],
      "optional": [
        "latent_image",
        "vae",
        "image"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "image"
    ],
    "name": "FL_KsamplerPlus",
    "display_name": "FL KSampler Plus",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Ksamplers",
    "output_node": false
  },
  "FL_KsamplerBasic": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "latent_image": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise"
      ],
      "optional": [
        "latent_image",
        "vae",
        "image"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "image"
    ],
    "name": "FL_KsamplerBasic",
    "display_name": "FL KSampler Basic",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Ksamplers",
    "output_node": false
  },
  "FL_FractalKSampler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 1.1,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "fractal_levels": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 5
          }
        ]
      },
      "optional": {
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "vae",
        "positive",
        "negative",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "scale_factor",
        "blend_factor",
        "fractal_levels"
      ],
      "optional": [
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "VAE"
    ],
    "name": "FL_FractalKSampler",
    "display_name": "FL Fractal KSampler",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/WIP",
    "output_node": false
  },
  "FL_UpscaleModel": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "downscale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.25,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "rescale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "precision": [
          [
            "auto",
            "32",
            "16",
            "bfloat16"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image",
        "downscale_by",
        "rescale_method",
        "precision",
        "batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_UpscaleModel",
    "display_name": "FL Upscale Model",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Loaders",
    "output_node": false
  },
  "FL_SaveCSV": {
    "input": {
      "required": {
        "csv_data": [
          "CSV"
        ],
        "output_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "captions.csv"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "csv_data",
        "output_directory",
        "filename"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FL_SaveCSV",
    "display_name": "FL Save CSV",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_KSamplerXYZPlot": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "input_type": [
          [
            "latent",
            "image"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_axis": [
          [
            "steps",
            "cfg",
            "denoise",
            "sampler_name",
            "scheduler"
          ]
        ],
        "x_values": [
          "STRING",
          {
            "default": "20,30,40"
          }
        ],
        "y_axis": [
          [
            "steps",
            "cfg",
            "denoise",
            "sampler_name",
            "scheduler"
          ]
        ],
        "y_values": [
          "STRING",
          {
            "default": "7,8,9"
          }
        ],
        "z_axis": [
          [
            "none",
            "steps",
            "cfg",
            "denoise",
            "sampler_name",
            "scheduler"
          ]
        ],
        "z_values": [
          "STRING",
          {
            "default": ""
          }
        ],
        "z_stack_mode": [
          [
            "vertical",
            "horizontal"
          ]
        ]
      },
      "optional": {
        "latent_image": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "seed",
        "input_type",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "x_axis",
        "x_values",
        "y_axis",
        "y_values",
        "z_axis",
        "z_values",
        "z_stack_mode"
      ],
      "optional": [
        "latent_image",
        "vae",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_KSamplerXYZPlot",
    "display_name": "FL KSampler XYZ Plot",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Ksamplers",
    "output_node": false
  },
  "FL_SamplerStrings": {
    "input": {
      "required": {
        "euler": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "euler_ancestral_cfg_pp": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heun": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "heunpp2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_2_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lms": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_fast": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpm_adaptive": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2s_ancestral": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_2m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dpmpp_3m_sde_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddpm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "lcm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ipndm_v": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "deis": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "uni_pc_bh2": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_SamplerStrings",
    "display_name": "FL Sampler String XYZ",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Ksamplers",
    "output_node": false
  },
  "FL_SchedulerStrings": {
    "input": {
      "required": {
        "normal": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "karras": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "exponential": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sgm_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "simple": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ddim_uniform": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "beta": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_SchedulerStrings",
    "display_name": "FL Scheduler String XYZ",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Ksamplers",
    "output_node": false
  },
  "FL_ImageCaptionLayoutPDF": {
    "input": {
      "required": {
        "image_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "images_per_row": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 10
          }
        ],
        "display_size": [
          "INT",
          {
            "default": 100,
            "min": 64,
            "max": 512
          }
        ],
        "caption_height": [
          "INT",
          {
            "default": 80,
            "min": 32,
            "max": 256
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 4,
            "min": 4,
            "max": 32
          }
        ],
        "padding": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 100
          }
        ],
        "output_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "output_filename": [
          "STRING",
          {
            "default": "output"
          }
        ],
        "orientation": [
          [
            "horizontal",
            "vertical"
          ],
          {
            "default": "horizontal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_directory",
        "images_per_row",
        "display_size",
        "caption_height",
        "font_size",
        "padding",
        "output_directory",
        "output_filename",
        "orientation"
      ]
    },
    "output": [
      "STRING",
      "IMAGE",
      "PDF"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "STRING",
      "IMAGE",
      "PDF"
    ],
    "name": "FL_ImageCaptionLayoutPDF",
    "display_name": "FL Image Caption Layout PDF",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_Dalle3": {
    "input": {
      "required": {
        "resolution": [
          [
            "1024x1024",
            "1024x1792",
            "1792x1024"
          ]
        ],
        "dummy_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "great picture"
          }
        ],
        "quality": [
          [
            "HD",
            "Standard"
          ]
        ],
        "style": [
          [
            "vivid",
            "natural"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "retry": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 5
          }
        ]
      },
      "optional": {
        "auto_save": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "auto_save_dir": [
          "STRING",
          {
            "default": "./output_dalle3"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "dummy_seed",
        "prompt",
        "quality",
        "style",
        "batch_size",
        "retry"
      ],
      "optional": [
        "auto_save",
        "auto_save_dir"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGES",
      "WIDTH",
      "HEIGHT",
      "REVISED_PROMPTS"
    ],
    "name": "FL_Dalle3",
    "display_name": "FL Dalle 3",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/GPT",
    "output_node": true
  },
  "FL_SaveImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "base_directory": [
          "STRING",
          {
            "default": "./output"
          }
        ],
        "folder_structure": [
          "STRING",
          {
            "default": "[]"
          }
        ],
        "file_name_template": [
          "STRING",
          {
            "default": "image_{index}.png"
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 1000000
          }
        ]
      },
      "optional": {
        "metadata": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "base_directory",
        "folder_structure",
        "file_name_template",
        "start_index"
      ],
      "optional": [
        "metadata"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_SaveImages",
    "display_name": "FL Save Images",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": true
  },
  "FL_LoadImage": {
    "input": {
      "required": {
        "root_directory": [
          "STRING",
          {
            "default": "./"
          }
        ]
      },
      "optional": {
        "selected_file": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "root_directory"
      ],
      "optional": [
        "selected_file"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "STRING"
    ],
    "name": "FL_LoadImage",
    "display_name": "FL Load Image",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": true
  },
  "FL_PDFLoader": {
    "input": {
      "required": {
        "pdf_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pdf_path"
      ]
    },
    "output": [
      "PDF"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PDF"
    ],
    "name": "FL_PDFLoader",
    "display_name": "FL PDF Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": false
  },
  "FL_PDFToImages": {
    "input": {
      "required": {
        "pdf": [
          "PDF"
        ],
        "dpi": [
          "INT",
          {
            "default": 200,
            "min": 72,
            "max": 600
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pdf",
        "dpi"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_PDFToImages",
    "display_name": "FL PDF To Images",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": false
  },
  "FL_PDFSaver": {
    "input": {
      "required": {
        "pdf": [
          "PDF"
        ],
        "output_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "output"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pdf",
        "output_directory",
        "filename"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_PDFSaver",
    "display_name": "FL PDF Saver",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": true
  },
  "FL_ImagesToPDF": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "dpi": [
          "INT",
          {
            "default": 300,
            "min": 72,
            "max": 600
          }
        ],
        "page_size": [
          [
            "A4",
            "Letter",
            "Legal"
          ],
          {
            "default": "A4"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "dpi",
        "page_size"
      ]
    },
    "output": [
      "PDF"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PDF"
    ],
    "name": "FL_ImagesToPDF",
    "display_name": "FL Images To PDF",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": false
  },
  "FL_PDFMerger": {
    "input": {
      "required": {
        "pdf1": [
          "PDF"
        ],
        "pdf2": [
          "PDF"
        ]
      }
    },
    "input_order": {
      "required": [
        "pdf1",
        "pdf2"
      ]
    },
    "output": [
      "PDF"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PDF"
    ],
    "name": "FL_PDFMerger",
    "display_name": "FL PDF Merger",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": false
  },
  "FL_PDFTextExtractor": {
    "input": {
      "required": {
        "pdf": [
          "PDF"
        ]
      }
    },
    "input_order": {
      "required": [
        "pdf"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_PDFTextExtractor",
    "display_name": "FL PDF Text Extractor",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": false
  },
  "FL_PDFImageExtractor": {
    "input": {
      "required": {
        "pdf": [
          "PDF"
        ],
        "min_width": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 1000
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 1000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pdf",
        "min_width",
        "min_height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "FL_PDFImageExtractor",
    "display_name": "FL PDF Image Extractor",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": true
  },
  "FL_BulkPDFLoader": {
    "input": {
      "required": {
        "directory_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory_path"
      ]
    },
    "output": [
      "PDF"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pdfs"
    ],
    "name": "FL_BulkPDFLoader",
    "display_name": "FL Bulk PDF Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": true
  },
  "FL_TextToPDF": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "page_size": [
          [
            "A4",
            "Letter"
          ],
          {
            "default": "A4"
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 12,
            "min": 6,
            "max": 36
          }
        ],
        "margin": [
          "INT",
          {
            "default": 72,
            "min": 36,
            "max": 144,
            "step": 6
          }
        ],
        "title": [
          "STRING",
          {
            "default": "Generated Document"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "page_size",
        "font_size",
        "margin",
        "title"
      ]
    },
    "output": [
      "PDF"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PDF"
    ],
    "name": "FL_TextToPDF",
    "display_name": "FL Text To PDF",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": false
  },
  "FL_PDFEncryptor": {
    "input": {
      "required": {
        "pdf": [
          "PDF"
        ],
        "user_password": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "owner_password": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "encryption_level": [
          [
            "40-bit",
            "128-bit"
          ],
          {
            "default": "128-bit"
          }
        ]
      },
      "optional": {
        "allow_printing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "allow_commenting": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "allow_copying": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "allow_content_extraction": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "allow_form_filling": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "allow_document_assembly": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "allow_page_extraction": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pdf",
        "user_password",
        "owner_password",
        "encryption_level"
      ],
      "optional": [
        "allow_printing",
        "allow_commenting",
        "allow_copying",
        "allow_content_extraction",
        "allow_form_filling",
        "allow_document_assembly",
        "allow_page_extraction"
      ]
    },
    "output": [
      "PDF"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PDF"
    ],
    "name": "FL_PDFEncryptor",
    "display_name": "FL PDF Encryptor",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/PDF",
    "output_node": false
  },
  "FL_SaveAndDisplayImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_SaveAndDisplayImage",
    "display_name": "FL Save And Display Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": true
  },
  "FL_OllamaCaptioner": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {}
        ],
        "folder_name": [
          "STRING",
          {
            "default": "output_folder"
          }
        ],
        "use_llm": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "url": [
          "STRING",
          {
            "default": "http://127.0.0.1:11434"
          }
        ],
        "model": [
          "STRING",
          {
            "default": "default_model"
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "folder_name",
        "use_llm",
        "url",
        "model",
        "overwrite"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_OllamaCaptioner",
    "display_name": "FL Ollama Captioner by Cosmic",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_ImageAdjuster": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "hue": [
          "FLOAT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 1
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 0,
            "min": -100,
            "max": 100,
            "step": 1
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 0,
            "min": -100,
            "max": 100,
            "step": 1
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 0,
            "min": -100,
            "max": 100,
            "step": 1
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "hue",
        "saturation",
        "brightness",
        "contrast",
        "sharpness"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageAdjuster",
    "display_name": "FL Image Adjuster",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": true
  },
  "FL_CaptionSaver_V2": {
    "input": {
      "required": {
        "input_type": [
          [
            "Image Input",
            "Directory Input"
          ],
          {
            "default": "Image Input"
          }
        ],
        "caption_input_type": [
          [
            "Single Caption",
            "Multiple Captions"
          ],
          {
            "default": "Single Caption"
          }
        ],
        "folder_name": [
          "STRING",
          {
            "default": "output_folder"
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downsize_factor": [
          [
            1,
            2,
            3
          ],
          {
            "default": 1
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE",
          {}
        ],
        "input_directory": [
          "STRING",
          {
            "default": ""
          }
        ],
        "single_caption": [
          "STRING",
          {
            "default": "Your caption here"
          }
        ],
        "multiple_captions": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_type",
        "caption_input_type",
        "folder_name",
        "overwrite",
        "downsize_factor"
      ],
      "optional": [
        "images",
        "input_directory",
        "single_caption",
        "multiple_captions"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_CaptionSaver_V2",
    "display_name": "FL Caption Saver V2",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Captioning",
    "output_node": true
  },
  "FL_PathTypeChecker": {
    "input": {
      "required": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_path"
      ]
    },
    "output": [
      "PATH"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PATH"
    ],
    "name": "FL_PathTypeChecker",
    "display_name": "FL Path Type Checker",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Utils",
    "output_node": false
  },
  "FL_SaveWebPImage(SaveImage)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "quality": [
          "INT",
          {
            "default": 80,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "quality"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "STRING"
    ],
    "name": "FL_SaveWebPImage(SaveImage)",
    "display_name": "FL Save WebP Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": true
  },
  "FL_MadLibGenerator": {
    "input": {
      "required": {
        "template": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "delimiter_1": [
          "STRING",
          {
            "default": "(1)"
          }
        ],
        "delimiter_2": [
          "STRING",
          {
            "default": "(2)"
          }
        ],
        "delimiter_3": [
          "STRING",
          {
            "default": "(3)"
          }
        ],
        "delimiter_4": [
          "STRING",
          {
            "default": "(4)"
          }
        ],
        "delimiter_5": [
          "STRING",
          {
            "default": "(5)"
          }
        ],
        "word_list_1": [
          "STRING",
          {}
        ],
        "word_list_2": [
          "STRING",
          {}
        ],
        "word_list_3": [
          "STRING",
          {}
        ],
        "word_list_4": [
          "STRING",
          {}
        ],
        "word_list_5": [
          "STRING",
          {}
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "template",
        "delimiter_1",
        "delimiter_2",
        "delimiter_3",
        "delimiter_4",
        "delimiter_5",
        "word_list_1",
        "word_list_2",
        "word_list_3",
        "word_list_4",
        "word_list_5"
      ],
      "optional": [
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_MadLibGenerator",
    "display_name": "FL MadLib Generator",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Prompting",
    "output_node": false
  },
  "FL_Math": {
    "input": {
      "required": {
        "A": [
          "FLOAT",
          {
            "default": 0,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "B": [
          "FLOAT",
          {
            "default": 0,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "C": [
          "FLOAT",
          {
            "default": 0,
            "min": -1000000,
            "max": 1000000,
            "step": 0.01
          }
        ],
        "equation": [
          "STRING",
          {
            "multiline": true,
            "default": "A + B * C"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "A",
        "B",
        "C",
        "equation"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "FL_Math",
    "display_name": "FL Math",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/math",
    "output_node": false
  },
  "FL_ImageSlicer": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x_subdivisions": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "y_subdivisions": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x_subdivisions",
        "y_subdivisions"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageSlicer",
    "display_name": "FL Image Slicer",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_HF_UploaderAbsolute": {
    "input": {
      "required": {
        "owner": [
          "STRING",
          {
            "default": ""
          }
        ],
        "repo_name": [
          "STRING",
          {
            "default": "my-awesome-model"
          }
        ],
        "upload_path": [
          "STRING",
          {
            "default": "folder1/folder2/folder3"
          }
        ],
        "create_new_repo": [
          [
            "True",
            "False"
          ]
        ],
        "repo_type": [
          [
            "model",
            "dataset",
            "space"
          ]
        ]
      },
      "optional": {
        "lora_file": [
          "STRING",
          {
            "default": ""
          }
        ],
        "dataset_zip": [
          "ZIP"
        ],
        "caption_layout": [
          "IMAGE"
        ],
        "caption_PDF_layout": [
          "PDF"
        ],
        "csv_file": [
          "CSV"
        ]
      }
    },
    "input_order": {
      "required": [
        "owner",
        "repo_name",
        "upload_path",
        "create_new_repo",
        "repo_type"
      ],
      "optional": [
        "lora_file",
        "dataset_zip",
        "caption_layout",
        "caption_PDF_layout",
        "csv_file"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_HF_UploaderAbsolute",
    "display_name": "FL HF Uploader Absolute",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Hugging Face",
    "output_node": false
  },
  "FL_ImageListToImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageListToImageBatch",
    "display_name": "FL Image List To Image Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_ImageBatchToImageList": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageBatchToImageList",
    "display_name": "FL Image Batch To Image List",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_ImageBatchToGrid": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "images_per_row": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "images_per_row"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ImageBatchToGrid",
    "display_name": "FL Image Batch To Grid",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_ApplyMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_ApplyMask",
    "display_name": "FL Apply Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_ProResVideo": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "fps": [
          "FLOAT",
          {
            "default": 30,
            "min": 1,
            "max": 120,
            "step": 1
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "prores_output",
            "multiline": false
          }
        ],
        "save_directory": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "fps",
        "filename",
        "save_directory"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_ProResVideo",
    "display_name": "FL ProRes Video",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Video",
    "output_node": true
  },
  "FL_Padding": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "padding_left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "padding_right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "padding_top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "padding_bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "include_alpha": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "padding_left",
        "padding_right",
        "padding_top",
        "padding_bottom",
        "red",
        "green",
        "blue",
        "include_alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_Padding",
    "display_name": "FL Padding",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/utility",
    "output_node": false
  },
  "FL_GoogleDriveDownloader": {
    "input": {
      "required": {
        "google_drive_link": [
          "STRING",
          {
            "default": ""
          }
        ],
        "output_folder_name": [
          "STRING",
          {
            "default": "gdrive_download"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "google_drive_link",
        "output_folder_name"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_GoogleDriveDownloader",
    "display_name": "FL Google Drive Downloader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Google Drive",
    "output_node": true
  },
  "FL_NodeLoader": {
    "input": {
      "required": {
        "trigger": "TRIGGER"
      }
    },
    "input_order": {
      "required": [
        "trigger"
      ]
    },
    "output": [
      "TRIGGER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "TRIGGER"
    ],
    "name": "FL_NodeLoader",
    "display_name": "FL Node Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Loaders",
    "output_node": false
  },
  "FL_NodePackLoader": {
    "input": {
      "required": {
        "trigger": "TRIGGER"
      }
    },
    "input_order": {
      "required": [
        "trigger"
      ]
    },
    "output": [
      "TRIGGER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "TRIGGER"
    ],
    "name": "FL_NodePackLoader",
    "display_name": "FL Node Pack Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "utils",
    "output_node": false
  },
  "FL_API_Base64_ImageLoader": {
    "input": {
      "required": {
        "base64_string": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "job_id": [
          "STRING",
          {
            "default": ""
          }
        ],
        "user_id": [
          "STRING",
          {
            "default": ""
          }
        ],
        "category": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "resize_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "maintain_aspect_ratio": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "auto_clean_base64": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base64_string",
        "job_id",
        "user_id",
        "category"
      ],
      "optional": [
        "resize_width",
        "resize_height",
        "maintain_aspect_ratio",
        "auto_clean_base64"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "width",
      "height",
      "job_id",
      "user_id",
      "category"
    ],
    "name": "FL_API_Base64_ImageLoader",
    "display_name": "FL API Base64 Image Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/API Tools",
    "output_node": false
  },
  "FL_API_ImageSaver": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "job_id": [
          "STRING"
        ],
        "user_id": [
          "STRING"
        ],
        "category": [
          "STRING"
        ],
        "base_output_dir": [
          "STRING",
          {
            "default": "/absolute/path/to/output"
          }
        ],
        "image_format": [
          "STRING",
          {
            "default": "png",
            "choices": [
              "png",
              "jpg",
              "jpeg",
              "webp"
            ]
          }
        ],
        "image_quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "job_id",
        "user_id",
        "category",
        "base_output_dir",
        "image_format",
        "image_quality"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "saved_path",
      "job_id",
      "user_id",
      "category"
    ],
    "name": "FL_API_ImageSaver",
    "display_name": "FL API Image Saver",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/API Tools",
    "output_node": true
  },
  "FL_GoogleDriveImageDownloader": {
    "input": {
      "required": {
        "google_drive_link": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "Enter Google Drive image link"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "google_drive_link"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_GoogleDriveImageDownloader",
    "display_name": "FL Google Drive Image Downloader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Google Drive",
    "output_node": false
  },
  "FL_AnimeLineExtractor": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {}
        ],
        "line_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "display": "slider"
          }
        ],
        "line_width": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 5,
            "step": 1
          }
        ],
        "detail_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1.0,
            "step": 0.01,
            "display": "slider"
          }
        ],
        "noise_reduction": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "display": "slider"
          }
        ],
        "invert_output": [
          "BOOLEAN",
          {
            "default": false,
            "label": "White Background"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "line_threshold",
        "line_width",
        "detail_level",
        "noise_reduction",
        "invert_output"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_AnimeLineExtractor",
    "display_name": "FL Anime Line Extractor",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image",
    "output_node": false
  },
  "FL_HunyuanDelight": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "cfg_image": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 42,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "cfg_image",
        "steps",
        "seed",
        "loops"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FL_HunyuanDelight",
    "display_name": "FL Hunyuan Delight",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/AI",
    "output_node": false
  },
  "FL_ClipScanner": {
    "input": {
      "required": {
        "model_type": [
          [
            "SDXL (ViT-G/14)",
            "SD 1.5 (ViT-L/14)",
            "FLUX (ViT-L/14)"
          ]
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "FL_ClipScanner",
    "display_name": "FL Clip Scanner (Kytra)",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Analysis",
    "output_node": true
  },
  "FL_SceneCut": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "output_folder": [
          "STRING",
          {
            "default": "./output/scene_cuts"
          }
        ],
        "fps": [
          "INT",
          {
            "default": 24,
            "min": 1,
            "max": 120,
            "step": 1
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 30.0,
            "min": 1.0,
            "max": 100.0,
            "step": 0.1,
            "description": "Threshold for scene change detection (higher = less sensitive)"
          }
        ],
        "min_scene_length": [
          "INT",
          {
            "default": 12,
            "min": 2,
            "max": 1000,
            "step": 1,
            "description": "Minimum number of frames required per scene segment (frames between scene boundaries)"
          }
        ],
        "output_quality": [
          "INT",
          {
            "default": 85,
            "min": 1,
            "max": 100,
            "step": 1,
            "description": "Video quality for output clips (1-100)"
          }
        ],
        "detection_method": [
          [
            "intensity",
            "histogram",
            "hybrid"
          ],
          {
            "default": "hybrid",
            "description": "Method used for scene detection - hybrid is faster and more accurate"
          }
        ],
        "max_workers": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16,
            "step": 1,
            "description": "Maximum number of parallel workers for video creation"
          }
        ],
        "downsample_detection": [
          "BOOLEAN",
          {
            "default": true,
            "description": "Downsample frames for faster detection"
          }
        ],
        "use_gpu_acceleration": [
          "BOOLEAN",
          {
            "default": true,
            "description": "Use GPU acceleration for detection when possible"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "output_folder",
        "fps",
        "threshold",
        "min_scene_length",
        "output_quality",
        "detection_method",
        "max_workers",
        "downsample_detection",
        "use_gpu_acceleration"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "video_paths",
      "output_folder"
    ],
    "name": "FL_SceneCut",
    "display_name": "FL Scene Cut Detector",
    "description": "\n    FL_SceneCut analyzes a batch of images representing video frames to detect scene cuts.\n    It uses optimized intensity thresholding and histogram comparison to identify significant changes\n    between frames that likely represent scene transitions. The node saves each detected scene\n    as an individual MP4 file in the specified output folder and returns the paths to these files.\n    You can adjust sensitivity parameters to fine-tune detection for different types of content.\n    ",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Video",
    "output_node": false
  },
  "FL_GeminiTextAPI": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "api_key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "model": [
          [
            "gemini-2.0-flash",
            "gemini-1.5-pro",
            "gemini-1.5-flash",
            "gemini-1.0-pro"
          ],
          {
            "default": "gemini-2.0-flash"
          }
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "max_output_tokens": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192,
            "step": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "system_instructions": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "top_p": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "top_k": [
          "INT",
          {
            "default": 64,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "api_key",
        "model",
        "temperature",
        "max_output_tokens",
        "seed"
      ],
      "optional": [
        "system_instructions",
        "top_p",
        "top_k"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "response"
    ],
    "name": "FL_GeminiTextAPI",
    "display_name": "FL Gemini Text API",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/AI",
    "output_node": false
  },
  "FL_JS": {
    "input": {
      "required": {
        "event": [
          [
            "None",
            "before_queued",
            "after_queued",
            "status",
            "progress",
            "executing",
            "executed",
            "execution_start",
            "execution_success",
            "execution_error",
            "execution_cached",
            "b_preview"
          ]
        ],
        "javascript": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "event",
        "javascript"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FL_JS",
    "display_name": "FL JavaScript",
    "description": "Execute JavaScript code when specific events are triggered",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Utils",
    "output_node": false
  },
  "FL_HFDatasetDownloader": {
    "input": {
      "required": {
        "repo_id": [
          "STRING",
          {
            "default": "jjuik2014/FaceVid-1K-Part",
            "multiline": false
          }
        ],
        "repo_type": [
          [
            "dataset",
            "model",
            "space"
          ],
          {
            "default": "dataset"
          }
        ],
        "local_dir": [
          "STRING",
          {
            "default": "./output/HF-Downloads",
            "multiline": false
          }
        ],
        "max_workers": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "download_trigger": [
          "BOOLEAN",
          {
            "default": false,
            "label": "Start Download"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "repo_id",
        "repo_type",
        "local_dir",
        "max_workers",
        "download_trigger"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "download_path"
    ],
    "name": "FL_HFDatasetDownloader",
    "display_name": "FL HF Dataset Downloader",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Hugging Face",
    "output_node": false
  },
  "FL_WF_Agent": {
    "input": {
      "required": {
        "event": [
          [
            "before_queued",
            "after_queued",
            "status",
            "progress",
            "executing",
            "executed",
            "execution_start",
            "execution_error",
            "execution_success",
            "execution_cached"
          ],
          {
            "default": "before_queued"
          }
        ],
        "code_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "Enter your code generation prompt here"
          }
        ],
        "api_key": [
          "STRING",
          {
            "default": ""
          }
        ],
        "javascript": [
          "STRING",
          {
            "default": "// Generated code will appear here",
            "multiline": true
          }
        ]
      },
      "optional": {
        "scan_nodes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "event",
        "code_prompt",
        "api_key",
        "javascript"
      ],
      "optional": [
        "scan_nodes"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FL_WF_Agent",
    "display_name": "FL Workflow Agent",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/WIP",
    "output_node": true
  },
  "FL_BlackFrameReject": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 95.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "description": "Percentage of black pixels needed to reject an image (0-100)"
          }
        ],
        "black_level": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 0.5,
            "step": 0.01,
            "description": "Pixel brightness threshold to consider a pixel as black (0.0-0.5)"
          }
        ]
      },
      "optional": {
        "channels": [
          [
            "all",
            "average",
            "luminance",
            "rgb"
          ],
          {
            "default": "luminance",
            "description": "Channel(s) to analyze for black pixels"
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false,
            "description": "If True, reject frames with LESS than threshold % of black pixels"
          }
        ],
        "show_progress": [
          "BOOLEAN",
          {
            "default": true,
            "description": "Show progress bar during processing"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "threshold",
        "black_level"
      ],
      "optional": [
        "channels",
        "invert",
        "show_progress"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "filtered_images",
      "kept_count",
      "rejected_count"
    ],
    "name": "FL_BlackFrameReject",
    "display_name": "FL Black Frame Reject",
    "description": "\n    FL_BlackFrameReject analyzes each image in a batch to detect the percentage of black pixels.\n    Images with black pixel percentage exceeding the specified threshold are removed from the batch.\n    Returns the filtered batch of images and counts of kept and rejected images.\n    Useful for removing black frames, fades to black, or images with excessive dark regions.\n    ",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🏵️Fill Nodes/Image Processing",
    "output_node": false
  },
  "FL_PixVerseAPI": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "default": ""
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": ""
          }
        ],
        "duration": [
          "INT",
          {
            "default": 5,
            "min": 5,
            "max": 8
          }
        ],
        "quality": [
          [
            "360p",
            "540p",
            "720p",
            "1080p"
          ],
          {
            "default": "540p"
          }
        ],
        "motion_mode": [
          [
            "normal",
            "fast"
          ],
          {
            "default": "normal"
          }
        ],
        "max_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 300,
            "description": "Max frames to extract (0 = all frames)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "image",
        "prompt",
        "negative_prompt",
        "duration",
        "quality",
        "motion_mode",
        "max_frames"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "frames",
      "video_url",
      "status_msg"
    ],
    "name": "FL_PixVerseAPI",
    "display_name": "FL PixVerse API",
    "description": "",
    "python_module": "custom_nodes.comfyui_fill-nodes",
    "category": "🍵Fill Nodes/API",
    "output_node": false
  },
  "ImageResize": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "action": [
          [
            "resize only",
            "crop to ratio",
            "pad to ratio"
          ]
        ],
        "smaller_side": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "larger_side": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "resize_mode": [
          [
            "reduce size only",
            "increase size only",
            "any"
          ]
        ],
        "side_ratio": [
          "STRING",
          {
            "default": "4:3"
          }
        ],
        "crop_pad_position": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "pad_feathering": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask_optional": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "action",
        "smaller_side",
        "larger_side",
        "scale_factor",
        "resize_mode",
        "side_ratio",
        "crop_pad_position",
        "pad_feathering"
      ],
      "optional": [
        "mask_optional"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageResize",
    "display_name": "Image Resize",
    "description": "",
    "python_module": "custom_nodes.image-resize-comfyui",
    "category": "image",
    "output_node": false
  }
}