{
  "KSampler": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The model used for denoising the input latent."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "The number of steps used in the denoising process."
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01,
            "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "tooltip": "The scheduler controls how noise is gradually removed to form the image."
          }
        ],
        "positive": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to include in the image."
          }
        ],
        "negative": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to exclude from the image."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "The latent image to denoise."
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler",
    "display_name": "KSampler",
    "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false,
    "output_tooltips": [
      "The denoised latent."
    ]
  },
  "CheckpointLoaderSimple": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderSimple",
    "display_name": "Load Checkpoint",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "CLIPTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncode",
    "display_name": "CLIP Text Encode (Prompt)",
    "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "CLIPSetLastLayer": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "stop_at_clip_layer": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "stop_at_clip_layer"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPSetLastLayer",
    "display_name": "CLIP Set Last Layer",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "VAEDecode": {
    "input": {
      "required": {
        "samples": [
          "LATENT",
          {
            "tooltip": "The latent to be decoded."
          }
        ],
        "vae": [
          "VAE",
          {
            "tooltip": "The VAE model used for decoding the latent."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecode",
    "display_name": "VAE Decode",
    "description": "Decodes latent images back into pixel space images.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The decoded image."
    ]
  },
  "VAEEncode": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncode",
    "display_name": "VAE Encode",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "VAEEncodeForInpaint": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "grow_mask_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeForInpaint",
    "display_name": "VAE Encode (for Inpainting)",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "VAELoader": {
    "input": {
      "required": {
        "vae_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoader",
    "display_name": "Load VAE",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentImage",
    "display_name": "Empty Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "LatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscale",
    "display_name": "Upscale Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentUpscaleBy": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleBy",
    "display_name": "Upscale Latent By",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentFromBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFromBatch",
    "display_name": "Latent From Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "RepeatLatentBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RepeatLatentBatch",
    "display_name": "Repeat Latent Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "SaveImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImage",
    "display_name": "Save Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "PreviewImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewImage",
    "display_name": "Preview Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "LoadImage": {
    "input": {
      "required": {
        "image": [
          [
            "D:\\boy_1.jpg",
            "D:\\comfyui_test1.jpg",
            "b919fa4777f9fc2eea79a99b9bda1634.jpg",
            "boy_1.jpg",
            "comfy_1745377827401_184935991.jpeg",
            "comfy_20250423112010_319772619.jpeg",
            "comfy_20250423122413_2123227682.jpeg",
            "comfy_20250423122947_2118245211.jpeg",
            "comfy_20250423123116_823845105.jpeg",
            "comfy_20250423134324_2008201995.jpeg",
            "comfy_20250423140142_242601892.jpeg",
            "comfy_20250423140816_1137040325.jpeg",
            "comfy_20250423141130_1591287454.jpeg",
            "comfy_20250423142118_1481305754.jpeg",
            "comfy_20250423142647_1858705086.jpeg",
            "comfy_20250423142730_259706676.jpeg",
            "comfy_20250423191230_2142590981.jpeg",
            "comfy_20250423191412_1729013067.jpeg",
            "comfy_20250423191559_1927692305.jpeg",
            "comfy_20250425094703_104093081.jpeg",
            "comfy_20250425095021_1536713243.jpeg",
            "comfy_20250425141339_2079820344.jpeg",
            "comfy_20250425144946_1882936217.jpeg",
            "comfy_20250425150351_2028290003.jpeg",
            "comfy_20250425150603_1128741906.jpeg",
            "comfy_20250425150949_1490916290.jpeg",
            "comfy_20250425151406_392020855.jpeg",
            "comfy_20250425151627_478716569.jpeg",
            "comfy_20250425154010_40611924.jpeg",
            "comfy_20250425161249_2102112902.jpeg",
            "comfy_20250425174036_1484582054.jpeg",
            "comfy_20250425174926_764395255.jpeg",
            "comfy_20250425180529_1734914548.jpeg",
            "comfy_20250427100122_806890505.jpeg",
            "comfy_20250427114912_1253297465.jpeg",
            "comfyui_340401197_.jpeg",
            "comfyui_505391490_.jpeg",
            "comfyui_test1.jpg",
            "comfyui_test2.jpg",
            "d194fdb1ae1450dce8b9e4e5c757855b83a773a6906972bfafc6a5383a6a28e4.jpg",
            "e4dde71190ef76c6cd144fa11127e9f5ae516732.webp",
            "example.png",
            "man_1.jpg",
            "man_2.jpg",
            "u=3132346354,1329268239&fm=253&fmt=auto&app=120&f=JPEG.webp",
            "woman_1.jpg",
            "丁一军.jpg",
            "苏宁豆芽图片20250402191604225.jpg",
            "苏宁豆芽图片20250402191618563.jpg",
            "苏宁豆芽图片20250425153720628.png",
            "苏宁豆芽图片20250425153918510.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImage",
    "display_name": "Load Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "LoadImageMask": {
    "input": {
      "required": {
        "image": [
          [
            "D:\\boy_1.jpg",
            "D:\\comfyui_test1.jpg",
            "b919fa4777f9fc2eea79a99b9bda1634.jpg",
            "boy_1.jpg",
            "comfy_1745377827401_184935991.jpeg",
            "comfy_20250423112010_319772619.jpeg",
            "comfy_20250423122413_2123227682.jpeg",
            "comfy_20250423122947_2118245211.jpeg",
            "comfy_20250423123116_823845105.jpeg",
            "comfy_20250423134324_2008201995.jpeg",
            "comfy_20250423140142_242601892.jpeg",
            "comfy_20250423140816_1137040325.jpeg",
            "comfy_20250423141130_1591287454.jpeg",
            "comfy_20250423142118_1481305754.jpeg",
            "comfy_20250423142647_1858705086.jpeg",
            "comfy_20250423142730_259706676.jpeg",
            "comfy_20250423191230_2142590981.jpeg",
            "comfy_20250423191412_1729013067.jpeg",
            "comfy_20250423191559_1927692305.jpeg",
            "comfy_20250425094703_104093081.jpeg",
            "comfy_20250425095021_1536713243.jpeg",
            "comfy_20250425141339_2079820344.jpeg",
            "comfy_20250425144946_1882936217.jpeg",
            "comfy_20250425150351_2028290003.jpeg",
            "comfy_20250425150603_1128741906.jpeg",
            "comfy_20250425150949_1490916290.jpeg",
            "comfy_20250425151406_392020855.jpeg",
            "comfy_20250425151627_478716569.jpeg",
            "comfy_20250425154010_40611924.jpeg",
            "comfy_20250425161249_2102112902.jpeg",
            "comfy_20250425174036_1484582054.jpeg",
            "comfy_20250425174926_764395255.jpeg",
            "comfy_20250425180529_1734914548.jpeg",
            "comfy_20250427100122_806890505.jpeg",
            "comfy_20250427114912_1253297465.jpeg",
            "comfyui_340401197_.jpeg",
            "comfyui_505391490_.jpeg",
            "comfyui_test1.jpg",
            "comfyui_test2.jpg",
            "d194fdb1ae1450dce8b9e4e5c757855b83a773a6906972bfafc6a5383a6a28e4.jpg",
            "e4dde71190ef76c6cd144fa11127e9f5ae516732.webp",
            "example.png",
            "man_1.jpg",
            "man_2.jpg",
            "u=3132346354,1329268239&fm=253&fmt=auto&app=120&f=JPEG.webp",
            "woman_1.jpg",
            "丁一军.jpg",
            "苏宁豆芽图片20250402191604225.jpg",
            "苏宁豆芽图片20250402191618563.jpg",
            "苏宁豆芽图片20250425153720628.png",
            "苏宁豆芽图片20250425153918510.png"
          ],
          {
            "image_upload": true
          }
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "LoadImageMask",
    "display_name": "Load Image (as Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "mask",
    "output_node": false
  },
  "LoadImageOutput": {
    "input": {
      "required": {
        "image": [
          "COMBO",
          {
            "image_upload": true,
            "image_folder": "output",
            "remote": {
              "route": "/internal/files/output",
              "refresh_button": true,
              "control_after_refresh": "first"
            }
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImageOutput",
    "display_name": "Load Image (from Outputs)",
    "description": "Load an image from the output folder. When the refresh button is clicked, the node will update the image list and automatically select the first image, allowing for easy iteration.",
    "python_module": "nodes",
    "category": "image",
    "output_node": false,
    "experimental": true
  },
  "ImageScale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScale",
    "display_name": "Upscale Image",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageScaleBy": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleBy",
    "display_name": "Upscale Image By",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageInvert": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageInvert",
    "display_name": "Invert Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatch",
    "display_name": "Batch Images",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaint",
    "display_name": "Pad Image for Outpainting",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "EmptyImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "EmptyImage",
    "display_name": "EmptyImage",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ConditioningAverage": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ],
        "conditioning_to_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from",
        "conditioning_to_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningAverage",
    "display_name": "ConditioningAverage",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningCombine": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombine",
    "display_name": "Conditioning (Combine)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningConcat": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningConcat",
    "display_name": "Conditioning (Concat)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetArea": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetArea",
    "display_name": "Conditioning (Set Area)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaPercentage": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentage",
    "display_name": "Conditioning (Set Area with Percentage)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaStrength": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaStrength",
    "display_name": "ConditioningSetAreaStrength",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetMask": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "mask",
        "strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetMask",
    "display_name": "Conditioning (Set Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "KSamplerAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerAdvanced",
    "display_name": "KSampler (Advanced)",
    "description": "",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false
  },
  "SetLatentNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "SetLatentNoiseMask",
    "display_name": "Set Latent Noise Mask",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "LatentComposite": {
    "input": {
      "required": {
        "samples_to": [
          "LATENT"
        ],
        "samples_from": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feather": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples_to",
        "samples_from",
        "x",
        "y",
        "feather"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentComposite",
    "display_name": "Latent Composite",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentBlend": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "blend_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBlend",
    "display_name": "Latent Blend",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "LatentRotate": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "rotation": [
          [
            "none",
            "90 degrees",
            "180 degrees",
            "270 degrees"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "rotation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentRotate",
    "display_name": "Rotate Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentFlip": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "flip_method": [
          [
            "x-axis: vertically",
            "y-axis: horizontally"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "flip_method"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFlip",
    "display_name": "Flip Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentCrop": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCrop",
    "display_name": "Crop Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "LoraLoader",
    "display_name": "Load LoRA",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CLIPLoader": {
    "input": {
      "required": {
        "clip_name": [
          []
        ],
        "type": [
          [
            "stable_diffusion",
            "stable_cascade",
            "sd3",
            "stable_audio",
            "mochi",
            "ltxv",
            "pixart",
            "cosmos",
            "lumina2",
            "wan"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPLoader",
    "display_name": "Load CLIP",
    "description": "[Recipes]\n\nstable_diffusion: clip-l\nstable_cascade: clip-g\nsd3: t5 xxl/ clip-g / clip-l\nstable_audio: t5 base\nmochi: t5 xxl\ncosmos: old t5 xxl\nlumina2: gemma 2 2B\nwan: umt5 xxl",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "UNETLoader": {
    "input": {
      "required": {
        "unet_name": [
          []
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "weight_dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNETLoader",
    "display_name": "Load Diffusion Model",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "DualCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          []
        ],
        "clip_name2": [
          []
        ],
        "type": [
          [
            "sdxl",
            "sd3",
            "flux",
            "hunyuan_video"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "DualCLIPLoader",
    "display_name": "DualCLIPLoader",
    "description": "[Recipes]\n\nsdxl: clip-l, clip-g\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\nflux: clip-l, t5",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE"
        ],
        "crop": [
          [
            "center",
            "none"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image",
        "crop"
      ]
    },
    "output": [
      "CLIP_VISION_OUTPUT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION_OUTPUT"
    ],
    "name": "CLIPVisionEncode",
    "display_name": "CLIP Vision Encode",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "StyleModelApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_type": [
          [
            "multiply",
            "attn_bias"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength",
        "strength_type"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApply",
    "display_name": "Apply Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/style_model",
    "output_node": false
  },
  "unCLIPConditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "clip_vision_output",
        "strength",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "unCLIPConditioning",
    "display_name": "unCLIPConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ControlNetApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ControlNetApply",
    "display_name": "Apply ControlNet (OLD)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "ControlNetApplyAdvanced": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "vae"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplyAdvanced",
    "display_name": "Apply ControlNet",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetLoader": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "SDXL/instantid/diffusion_pytorch_model.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ControlNetLoader",
    "display_name": "Load ControlNet Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "DiffControlNetLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "control_net_name": [
          [
            "SDXL/instantid/diffusion_pytorch_model.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "DiffControlNetLoader",
    "display_name": "Load ControlNet Model (diff)",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "StyleModelLoader": {
    "input": {
      "required": {
        "style_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "style_model_name"
      ]
    },
    "output": [
      "STYLE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STYLE_MODEL"
    ],
    "name": "StyleModelLoader",
    "display_name": "Load Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "CLIPVisionLoader": {
    "input": {
      "required": {
        "clip_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIPVisionLoader",
    "display_name": "Load CLIP Vision",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "VAEDecodeTiled": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 32
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to decode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecodeTiled",
    "display_name": "VAE Decode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "VAEEncodeTiled": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeTiled",
    "display_name": "VAE Encode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "unCLIPCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "name": "unCLIPCheckpointLoader",
    "display_name": "unCLIPCheckpointLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENLoader": {
    "input": {
      "required": {
        "gligen_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "gligen_name"
      ]
    },
    "output": [
      "GLIGEN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GLIGEN"
    ],
    "name": "GLIGENLoader",
    "display_name": "GLIGENLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENTextBoxApply": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "clip",
        "gligen_textbox_model",
        "text",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "GLIGENTextBoxApply",
    "display_name": "GLIGENTextBoxApply",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/gligen",
    "output_node": false
  },
  "InpaintModelConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels",
        "mask",
        "noise_mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InpaintModelConditioning",
    "display_name": "InpaintModelConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "CheckpointLoader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoader",
    "display_name": "Load Checkpoint With Config (DEPRECATED)",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false,
    "deprecated": true
  },
  "DiffusersLoader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "DiffusersLoader",
    "display_name": "DiffusersLoader",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders/deprecated",
    "output_node": false
  },
  "LoadLatent": {
    "input": {
      "required": {
        "latent": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LoadLatent",
    "display_name": "LoadLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "SaveLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLatent",
    "display_name": "SaveLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": true
  },
  "ConditioningZeroOut": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningZeroOut",
    "display_name": "ConditioningZeroOut",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ConditioningSetTimestepRange": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "start",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetTimestepRange",
    "display_name": "ConditioningSetTimestepRange",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "LoraLoaderModelOnly": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          []
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "strength_model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LoraLoaderModelOnly",
    "display_name": "LoraLoaderModelOnly",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "LatentAdd": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentAdd",
    "display_name": "LatentAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentSubtract": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentSubtract",
    "display_name": "LatentSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentMultiply": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "multiplier"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentMultiply",
    "display_name": "LatentMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentInterpolate": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "ratio"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentInterpolate",
    "display_name": "LatentInterpolate",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentBatch": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatch",
    "display_name": "LatentBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/batch",
    "output_node": false
  },
  "LatentBatchSeedBehavior": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "seed_behavior": [
          [
            "random",
            "fixed"
          ],
          {
            "default": "fixed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "seed_behavior"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatchSeedBehavior",
    "display_name": "LatentBatchSeedBehavior",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentApplyOperation": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "operation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentApplyOperation",
    "display_name": "LatentApplyOperation",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentApplyOperationCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "operation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LatentApplyOperationCFG",
    "display_name": "LatentApplyOperationCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationTonemapReinhard": {
    "input": {
      "required": {
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiplier"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationTonemapReinhard",
    "display_name": "LatentOperationTonemapReinhard",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationSharpen": {
    "input": {
      "required": {
        "sharpen_radius": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationSharpen",
    "display_name": "LatentOperationSharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "HypernetworkLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "hypernetwork_name": [
          []
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hypernetwork_name",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HypernetworkLoader",
    "display_name": "HypernetworkLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_hypernetwork",
    "category": "loaders",
    "output_node": false
  },
  "UpscaleModelLoader": {
    "input": {
      "required": {
        "model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "UpscaleModelLoader",
    "display_name": "Load Upscale Model",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "loaders",
    "output_node": false
  },
  "ImageUpscaleWithModel": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModel",
    "display_name": "Upscale Image (using Model)",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageBlend": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blend_mode": [
          [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "difference"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "blend_factor",
        "blend_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageBlur": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "blur_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "blur_radius",
        "sigma"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlur",
    "display_name": "Image Blur",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageQuantize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "none",
            "floyd-steinberg",
            "bayer-2",
            "bayer-4",
            "bayer-8",
            "bayer-16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "dither"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageQuantize",
    "display_name": "Image Quantize",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageSharpen": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSharpen",
    "display_name": "Image Sharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageScaleToTotalPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "megapixels": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "megapixels"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleToTotalPixels",
    "display_name": "Scale Image to Total Pixels",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/upscaling",
    "output_node": false
  },
  "LatentCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "LATENT"
        ],
        "source": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCompositeMasked",
    "display_name": "LatentCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "latent",
    "output_node": false
  },
  "ImageCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeMasked",
    "display_name": "ImageCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "image",
    "output_node": false
  },
  "MaskToImage": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MaskToImage",
    "display_name": "Convert Mask to Image",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue",
            "alpha"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageToMask",
    "display_name": "Convert Image to Mask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageColorToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageColorToMask",
    "display_name": "ImageColorToMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "SolidMask": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SolidMask",
    "display_name": "SolidMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "InvertMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "InvertMask",
    "display_name": "InvertMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "CropMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CropMask",
    "display_name": "CropMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskComposite": {
    "input": {
      "required": {
        "destination": [
          "MASK"
        ],
        "source": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "operation": [
          [
            "multiply",
            "add",
            "subtract",
            "and",
            "or",
            "xor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "operation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskComposite",
    "display_name": "MaskComposite",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "FeatherMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "left",
        "top",
        "right",
        "bottom"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "FeatherMask",
    "display_name": "FeatherMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "GrowMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "tapered_corners"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "GrowMask",
    "display_name": "GrowMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ThresholdMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "value": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ThresholdMask",
    "display_name": "ThresholdMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "PorterDuffImageComposite": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "source_alpha": [
          "MASK"
        ],
        "destination": [
          "IMAGE"
        ],
        "destination_alpha": [
          "MASK"
        ],
        "mode": [
          [
            "ADD",
            "CLEAR",
            "DARKEN",
            "DST",
            "DST_ATOP",
            "DST_IN",
            "DST_OUT",
            "DST_OVER",
            "LIGHTEN",
            "MULTIPLY",
            "OVERLAY",
            "SCREEN",
            "SRC",
            "SRC_ATOP",
            "SRC_IN",
            "SRC_OUT",
            "SRC_OVER",
            "XOR"
          ],
          {
            "default": "DST"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "source_alpha",
        "destination",
        "destination_alpha",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PorterDuffImageComposite",
    "display_name": "Porter-Duff Image Composite",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "SplitImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SplitImageWithAlpha",
    "display_name": "Split Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "JoinImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JoinImageWithAlpha",
    "display_name": "Join Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "RebatchLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RebatchLatents",
    "display_name": "Rebatch Latents",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "latent/batch",
    "output_node": false
  },
  "RebatchImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RebatchImages",
    "display_name": "Rebatch Images",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "image/batch",
    "output_node": false
  },
  "ModelMergeSimple": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSimple",
    "display_name": "ModelMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeBlocks": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "input": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "input",
        "middle",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeBlocks",
    "display_name": "ModelMergeBlocks",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeSubtract": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSubtract",
    "display_name": "ModelMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeAdd": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAdd",
    "display_name": "ModelMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CheckpointSave",
    "display_name": "Save Checkpoint",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "CLIPMergeSimple": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "ratio"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSimple",
    "display_name": "CLIPMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeSubtract": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "multiplier"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSubtract",
    "display_name": "CLIPMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeAdd": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeAdd",
    "display_name": "CLIPMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPSave": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "clip/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "clip",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CLIPSave",
    "display_name": "CLIPSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "VAESave": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "vae/ComfyUI_vae"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VAESave",
    "display_name": "VAESave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ModelSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSave",
    "display_name": "ModelSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "TomePatchModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TomePatchModel",
    "display_name": "TomePatchModel",
    "description": "",
    "python_module": "comfy_extras.nodes_tomesd",
    "category": "model_patches/unet",
    "output_node": false
  },
  "CLIPTextEncodeSDXLRefiner": {
    "input": {
      "required": {
        "ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "ascore",
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXLRefiner",
    "display_name": "CLIPTextEncodeSDXLRefiner",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeSDXL": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "text_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "text_g",
        "text_l"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL",
    "display_name": "CLIPTextEncodeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "Canny": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "low_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ],
        "high_threshold": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "low_threshold",
        "high_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Canny",
    "display_name": "Canny",
    "description": "",
    "python_module": "comfy_extras.nodes_canny",
    "category": "image/preprocessors",
    "output_node": false
  },
  "FreeU": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU",
    "display_name": "FreeU",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "FreeU_V2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.3,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.4,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU_V2",
    "display_name": "FreeU_V2",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "SamplerCustom": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "cfg",
        "positive",
        "negative",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustom",
    "display_name": "SamplerCustom",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "BasicScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scheduler",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BasicScheduler",
    "display_name": "BasicScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KarrasScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "KarrasScheduler",
    "display_name": "KarrasScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "ExponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "ExponentialScheduler",
    "display_name": "ExponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "PolyexponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "PolyexponentialScheduler",
    "display_name": "PolyexponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LaplaceScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "mu": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "mu",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LaplaceScheduler",
    "display_name": "LaplaceScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "VPScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "beta_d",
        "beta_min",
        "eps_s"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "VPScheduler",
    "display_name": "VPScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "BetaSamplingScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "alpha",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BetaSamplingScheduler",
    "display_name": "BetaSamplingScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SDTurboScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SDTurboScheduler",
    "display_name": "SDTurboScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KSamplerSelect": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "KSamplerSelect",
    "display_name": "KSamplerSelect",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestral",
    "display_name": "SamplerEulerAncestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestralCFGPP": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestralCFGPP",
    "display_name": "SamplerEulerAncestralCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerLMS": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLMS",
    "display_name": "SamplerLMS",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_3M_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_3M_SDE",
    "display_name": "SamplerDPMPP_3M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2M_SDE": {
    "input": {
      "required": {
        "solver_type": [
          [
            "midpoint",
            "heun"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "solver_type",
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2M_SDE",
    "display_name": "SamplerDPMPP_2M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "r": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "r",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_SDE",
    "display_name": "SamplerDPMPP_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2S_Ancestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2S_Ancestral",
    "display_name": "SamplerDPMPP_2S_Ancestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMAdaptative": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 3,
            "min": 2,
            "max": 3
          }
        ],
        "rtol": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "atol": [
          "FLOAT",
          {
            "default": 0.0078,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "h_init": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "pcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "icoeff": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "dcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "accept_safety": [
          "FLOAT",
          {
            "default": 0.81,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order",
        "rtol",
        "atol",
        "h_init",
        "pcoeff",
        "icoeff",
        "dcoeff",
        "accept_safety",
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMAdaptative",
    "display_name": "SamplerDPMAdaptative",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SplitSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "step"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmas",
    "display_name": "SplitSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SplitSigmasDenoise": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmasDenoise",
    "display_name": "SplitSigmasDenoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "FlipSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FlipSigmas",
    "display_name": "FlipSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SetFirstSigma": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 136.0,
            "min": 0.0,
            "max": 20000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "sigma"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SetFirstSigma",
    "display_name": "SetFirstSigma",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "CFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "CFGGuider",
    "display_name": "CFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "DualCFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond1": [
          "CONDITIONING"
        ],
        "cond2": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg_conds": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "cfg_cond2_negative": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond1",
        "cond2",
        "negative",
        "cfg_conds",
        "cfg_cond2_negative"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "DualCFGGuider",
    "display_name": "DualCFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "BasicGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "BasicGuider",
    "display_name": "BasicGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "RandomNoise": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "RandomNoise",
    "display_name": "RandomNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "DisableNoise": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "DisableNoise",
    "display_name": "DisableNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "AddNoise": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "noise": [
          "NOISE"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "noise",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "AddNoise",
    "display_name": "AddNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "_for_testing/custom_sampling/noise",
    "output_node": false
  },
  "SamplerCustomAdvanced": {
    "input": {
      "required": {
        "noise": [
          "NOISE"
        ],
        "guider": [
          "GUIDER"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "noise",
        "guider",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustomAdvanced",
    "display_name": "SamplerCustomAdvanced",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "HyperTile": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tile_size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 2048
          }
        ],
        "swap_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 128
          }
        ],
        "max_depth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10
          }
        ],
        "scale_depth": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tile_size",
        "swap_size",
        "max_depth",
        "scale_depth"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HyperTile",
    "display_name": "HyperTile",
    "description": "",
    "python_module": "comfy_extras.nodes_hypertile",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ModelSamplingDiscrete": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "eps",
            "v_prediction",
            "lcm",
            "x0",
            "img_to_img"
          ]
        ],
        "zsnr": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "zsnr"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingDiscrete",
    "display_name": "ModelSamplingDiscrete",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousEDM": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction",
            "edm",
            "edm_playground_v2.5",
            "eps"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 120.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.002,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousEDM",
    "display_name": "ModelSamplingContinuousEDM",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 500.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.03,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousV",
    "display_name": "ModelSamplingContinuousV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingStableCascade": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingStableCascade",
    "display_name": "ModelSamplingStableCascade",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3",
    "display_name": "ModelSamplingSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingAuraFlow": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 1.73,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingAuraFlow",
    "display_name": "ModelSamplingAuraFlow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingFlux": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 1.15,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift",
        "width",
        "height"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingFlux",
    "display_name": "ModelSamplingFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "RescaleCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RescaleCFG",
    "display_name": "RescaleCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelComputeDtype": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "dtype": [
          [
            "default",
            "fp32",
            "fp16",
            "bf16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelComputeDtype",
    "display_name": "ModelComputeDtype",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/debug/model",
    "output_node": false
  },
  "PatchModelAddDownscale": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 9.0,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelAddDownscale",
    "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)",
    "description": "",
    "python_module": "comfy_extras.nodes_model_downscale",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ImageCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCrop",
    "display_name": "Image Crop",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "RepeatImageBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RepeatImageBatch",
    "display_name": "RepeatImageBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "ImageFromBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4095
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch",
    "display_name": "ImageFromBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "SaveAnimatedWEBP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "lossless": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "quality": [
          "INT",
          {
            "default": 80,
            "min": 0,
            "max": 100
          }
        ],
        "method": [
          [
            "default",
            "fastest",
            "slowest"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "lossless",
        "quality",
        "method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedWEBP",
    "display_name": "SaveAnimatedWEBP",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "SaveAnimatedPNG": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "compress_level": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "compress_level"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedPNG",
    "display_name": "SaveAnimatedPNG",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "ImageOnlyCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "name": "ImageOnlyCheckpointLoader",
    "display_name": "Image Only Checkpoint Loader (img2vid model)",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "loaders/video_models",
    "output_node": false
  },
  "SVD_img2vid_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SVD_img2vid_Conditioning",
    "display_name": "SVD_img2vid_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VideoLinearCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoLinearCFGGuidance",
    "display_name": "VideoLinearCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "VideoTriangleCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoTriangleCFGGuidance",
    "display_name": "VideoTriangleCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "ImageOnlyCheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageOnlyCheckpointSave",
    "display_name": "ImageOnlyCheckpointSave",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ConditioningSetAreaPercentageVideo": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "z": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "temporal",
        "x",
        "y",
        "z",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentageVideo",
    "display_name": "ConditioningSetAreaPercentageVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning",
    "output_node": false
  },
  "SelfAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -2.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale",
        "blur_sigma"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SelfAttentionGuidance",
    "display_name": "Self-Attention Guidance",
    "description": "",
    "python_module": "comfy_extras.nodes_sag",
    "category": "_for_testing",
    "output_node": false
  },
  "PerpNeg": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "empty_conditioning",
        "neg_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerpNeg",
    "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false,
    "deprecated": true
  },
  "PerpNegGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "empty_conditioning",
        "cfg",
        "neg_scale"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "PerpNegGuider",
    "display_name": "PerpNegGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false
  },
  "StableZero123_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning",
    "display_name": "StableZero123_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "StableZero123_Conditioning_Batched": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "elevation_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth",
        "elevation_batch_increment",
        "azimuth_batch_increment"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning_Batched",
    "display_name": "StableZero123_Conditioning_Batched",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SV3D_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -90.0,
            "max": 90.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "elevation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_Conditioning",
    "display_name": "SV3D_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SD_4XUpscale_Conditioning": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "scale_ratio": [
          "FLOAT",
          {
            "default": 4.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "positive",
        "negative",
        "scale_ratio",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SD_4XUpscale_Conditioning",
    "display_name": "SD_4XUpscale_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_sdupscale",
    "category": "conditioning/upscale_diffusion",
    "output_node": false
  },
  "PhotoMakerLoader": {
    "input": {
      "required": {
        "photomaker_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker_model_name"
      ]
    },
    "output": [
      "PHOTOMAKER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PHOTOMAKER"
    ],
    "name": "PhotoMakerLoader",
    "display_name": "PhotoMakerLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "PhotoMakerEncode": {
    "input": {
      "required": {
        "photomaker": [
          "PHOTOMAKER"
        ],
        "image": [
          "IMAGE"
        ],
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "photograph of photomaker"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker",
        "image",
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "PhotoMakerEncode",
    "display_name": "PhotoMakerEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "CLIPTextEncodePixArtAlpha": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodePixArtAlpha",
    "display_name": "CLIPTextEncodePixArtAlpha",
    "description": "Encodes text and sets the resolution conditioning for PixArt Alpha. Does not apply to PixArt Sigma.",
    "python_module": "comfy_extras.nodes_pixart",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeControlnet": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "conditioning",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeControlnet",
    "display_name": "CLIPTextEncodeControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_cond",
    "category": "_for_testing/conditioning",
    "output_node": false
  },
  "Morphology": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "operation": [
          [
            "erode",
            "dilate",
            "open",
            "close",
            "gradient",
            "bottom_hat",
            "top_hat"
          ]
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 3,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "operation",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Morphology",
    "display_name": "ImageMorphology",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageRGBToYUV": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Y",
      "U",
      "V"
    ],
    "name": "ImageRGBToYUV",
    "display_name": "ImageRGBToYUV",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/batch",
    "output_node": false
  },
  "ImageYUVToRGB": {
    "input": {
      "required": {
        "Y": [
          "IMAGE"
        ],
        "U": [
          "IMAGE"
        ],
        "V": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Y",
        "U",
        "V"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageYUVToRGB",
    "display_name": "ImageYUVToRGB",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/batch",
    "output_node": false
  },
  "StableCascade_EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "compression",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_EmptyLatentImage",
    "display_name": "StableCascade_EmptyLatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageB_Conditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "stage_c": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "stage_c"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StableCascade_StageB_Conditioning",
    "display_name": "StableCascade_StageB_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "conditioning/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageC_VAEEncode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "compression"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_StageC_VAEEncode",
    "display_name": "StableCascade_StageC_VAEEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_SuperResolutionControlnet": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "controlnet_input",
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_SuperResolutionControlnet",
    "display_name": "StableCascade_SuperResolutionControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "_for_testing/stable_cascade",
    "output_node": false,
    "experimental": true
  },
  "DifferentialDiffusion": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "DifferentialDiffusion",
    "display_name": "Differential Diffusion",
    "description": "",
    "python_module": "comfy_extras.nodes_differential_diffusion",
    "category": "_for_testing",
    "output_node": false
  },
  "InstructPixToPixConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InstructPixToPixConditioning",
    "display_name": "InstructPixToPixConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_ip2p",
    "category": "conditioning/instructpix2pix",
    "output_node": false
  },
  "ModelMergeSD1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD1",
    "display_name": "ModelMergeSD1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD2": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD2",
    "display_name": "ModelMergeSD2",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSDXL": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0",
        "input_blocks.1",
        "input_blocks.2",
        "input_blocks.3",
        "input_blocks.4",
        "input_blocks.5",
        "input_blocks.6",
        "input_blocks.7",
        "input_blocks.8",
        "middle_block.0",
        "middle_block.1",
        "middle_block.2",
        "output_blocks.0",
        "output_blocks.1",
        "output_blocks.2",
        "output_blocks.3",
        "output_blocks.4",
        "output_blocks.5",
        "output_blocks.6",
        "output_blocks.7",
        "output_blocks.8",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSDXL",
    "display_name": "ModelMergeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD3_2B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD3_2B",
    "display_name": "ModelMergeSD3_2B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeAuraflow": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "init_x_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "positional_encoding": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cond_seq_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "register_tokens": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "modF.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "init_x_linear.",
        "positional_encoding",
        "cond_seq_linear.",
        "register_tokens",
        "t_embedder.",
        "double_layers.0.",
        "double_layers.1.",
        "double_layers.2.",
        "double_layers.3.",
        "single_layers.0.",
        "single_layers.1.",
        "single_layers.2.",
        "single_layers.3.",
        "single_layers.4.",
        "single_layers.5.",
        "single_layers.6.",
        "single_layers.7.",
        "single_layers.8.",
        "single_layers.9.",
        "single_layers.10.",
        "single_layers.11.",
        "single_layers.12.",
        "single_layers.13.",
        "single_layers.14.",
        "single_layers.15.",
        "single_layers.16.",
        "single_layers.17.",
        "single_layers.18.",
        "single_layers.19.",
        "single_layers.20.",
        "single_layers.21.",
        "single_layers.22.",
        "single_layers.23.",
        "single_layers.24.",
        "single_layers.25.",
        "single_layers.26.",
        "single_layers.27.",
        "single_layers.28.",
        "single_layers.29.",
        "single_layers.30.",
        "single_layers.31.",
        "modF.",
        "final_linear."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAuraflow",
    "display_name": "ModelMergeAuraflow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeFlux1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "img_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "guidance_in": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "vector_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "txt_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "img_in.",
        "time_in.",
        "guidance_in",
        "vector_in.",
        "txt_in.",
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeFlux1",
    "display_name": "ModelMergeFlux1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD35_Large": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "joint_blocks.24.",
        "joint_blocks.25.",
        "joint_blocks.26.",
        "joint_blocks.27.",
        "joint_blocks.28.",
        "joint_blocks.29.",
        "joint_blocks.30.",
        "joint_blocks.31.",
        "joint_blocks.32.",
        "joint_blocks.33.",
        "joint_blocks.34.",
        "joint_blocks.35.",
        "joint_blocks.36.",
        "joint_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD35_Large",
    "display_name": "ModelMergeSD35_Large",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeMochiPreview": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_frequencies.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_yproj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.40.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.41.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.42.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.43.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.44.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.45.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.46.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.47.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_frequencies.",
        "t_embedder.",
        "t5_y_embedder.",
        "t5_yproj.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "blocks.40.",
        "blocks.41.",
        "blocks.42.",
        "blocks.43.",
        "blocks.44.",
        "blocks.45.",
        "blocks.46.",
        "blocks.47.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeMochiPreview",
    "display_name": "ModelMergeMochiPreview",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeLTXV": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patchify_proj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "adaln_single.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "caption_projection.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_shift_table": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "proj_out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patchify_proj.",
        "adaln_single.",
        "caption_projection.",
        "transformer_blocks.0.",
        "transformer_blocks.1.",
        "transformer_blocks.2.",
        "transformer_blocks.3.",
        "transformer_blocks.4.",
        "transformer_blocks.5.",
        "transformer_blocks.6.",
        "transformer_blocks.7.",
        "transformer_blocks.8.",
        "transformer_blocks.9.",
        "transformer_blocks.10.",
        "transformer_blocks.11.",
        "transformer_blocks.12.",
        "transformer_blocks.13.",
        "transformer_blocks.14.",
        "transformer_blocks.15.",
        "transformer_blocks.16.",
        "transformer_blocks.17.",
        "transformer_blocks.18.",
        "transformer_blocks.19.",
        "transformer_blocks.20.",
        "transformer_blocks.21.",
        "transformer_blocks.22.",
        "transformer_blocks.23.",
        "transformer_blocks.24.",
        "transformer_blocks.25.",
        "transformer_blocks.26.",
        "transformer_blocks.27.",
        "scale_shift_table",
        "proj_out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeLTXV",
    "display_name": "ModelMergeLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos7B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos7B",
    "display_name": "ModelMergeCosmos7B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos14B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "blocks.block28.",
        "blocks.block29.",
        "blocks.block30.",
        "blocks.block31.",
        "blocks.block32.",
        "blocks.block33.",
        "blocks.block34.",
        "blocks.block35.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos14B",
    "display_name": "ModelMergeCosmos14B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeWAN2_1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patch_embedding.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_embedding.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_projection.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "text_embedding.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "img_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "head.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patch_embedding.",
        "time_embedding.",
        "time_projection.",
        "text_embedding.",
        "img_emb.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "head."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeWAN2_1",
    "display_name": "ModelMergeWAN2_1",
    "description": "1.3B model has 30 blocks, 14B model has 40 blocks. Image to video model has the extra img_emb.",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "PerturbedAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerturbedAttentionGuidance",
    "display_name": "PerturbedAttentionGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_pag",
    "category": "model_patches/unet",
    "output_node": false
  },
  "AlignYourStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "SD1",
            "SDXL",
            "SVD"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "AlignYourStepsScheduler",
    "display_name": "AlignYourStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_align_your_steps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "UNetSelfAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetSelfAttentionMultiply",
    "display_name": "UNetSelfAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetCrossAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetCrossAttentionMultiply",
    "display_name": "UNetCrossAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "CLIPAttentionMultiply": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPAttentionMultiply",
    "display_name": "CLIPAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetTemporalAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "self_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "self_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "self_structural",
        "self_temporal",
        "cross_structural",
        "cross_temporal"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetTemporalAttentionMultiply",
    "display_name": "UNetTemporalAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "SamplerLCMUpscale": {
    "input": {
      "required": {
        "scale_ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "scale_steps": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "bislerp",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_ratio",
        "scale_steps",
        "upscale_method"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLCMUpscale",
    "display_name": "SamplerLCMUpscale",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerCFGpp": {
    "input": {
      "required": {
        "version": [
          [
            "regular",
            "alternative"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "version"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerCFGpp",
    "display_name": "SamplerEulerCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "_for_testing",
    "output_node": false
  },
  "WebcamCapture": {
    "input": {
      "required": {
        "image": [
          "WEBCAM",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "capture_on_queue": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "capture_on_queue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "WebcamCapture",
    "display_name": "Webcam Capture",
    "description": "",
    "python_module": "comfy_extras.nodes_webcam",
    "category": "image",
    "output_node": false
  },
  "EmptyLatentAudio": {
    "input": {
      "required": {
        "seconds": [
          "FLOAT",
          {
            "default": 47.6,
            "min": 1.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seconds",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentAudio",
    "display_name": "EmptyLatentAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEEncodeAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeAudio",
    "display_name": "VAEEncodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEDecodeAudio": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "VAEDecodeAudio",
    "display_name": "VAEDecodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "SaveAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudio",
    "display_name": "SaveAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "LoadAudio": {
    "input": {
      "required": {
        "audio": [
          [],
          {
            "audio_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "LoadAudio",
    "display_name": "LoadAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": false
  },
  "PreviewAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAudio",
    "display_name": "PreviewAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "ConditioningStableAudio": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seconds_start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "seconds_total": [
          "FLOAT",
          {
            "default": 47.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "seconds_start",
        "seconds_total"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ConditioningStableAudio",
    "display_name": "ConditioningStableAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "conditioning",
    "output_node": false
  },
  "TripleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          []
        ],
        "clip_name2": [
          []
        ],
        "clip_name3": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "TripleCLIPLoader",
    "display_name": "TripleCLIPLoader",
    "description": "[Recipes]\n\nsd3: clip-l, clip-g, t5",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/loaders",
    "output_node": false
  },
  "EmptySD3LatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptySD3LatentImage",
    "display_name": "EmptySD3LatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "latent/sd3",
    "output_node": false
  },
  "CLIPTextEncodeSD3": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "empty_padding": [
          [
            "none",
            "empty_prompt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "empty_padding"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSD3",
    "display_name": "CLIPTextEncodeSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ControlNetApplySD3": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplySD3",
    "display_name": "Apply Controlnet with VAE",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "SkipLayerGuidanceSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "layers",
        "scale",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceSD3",
    "display_name": "SkipLayerGuidanceSD3",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "GITSScheduler": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "GITSScheduler",
    "display_name": "GITSScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_gits",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SetUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetUnionControlNetType",
    "display_name": "SetUnionControlNetType",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetInpaintingAliMamaApply": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "mask",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetInpaintingAliMamaApply",
    "display_name": "ControlNetInpaintingAliMamaApply",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "CLIPTextEncodeHunyuanDiT": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "bert": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "mt5xl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "bert",
        "mt5xl"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHunyuanDiT",
    "display_name": "CLIPTextEncodeHunyuanDiT",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "TextEncodeHunyuanVideo_ImageToVideo": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "image_interleave": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 512,
            "tooltip": "How much the image influences things vs the text prompt. Higher number means more influence from the text prompt."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_vision_output",
        "prompt",
        "image_interleave"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TextEncodeHunyuanVideo_ImageToVideo",
    "display_name": "TextEncodeHunyuanVideo_ImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "EmptyHunyuanLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyHunyuanLatentVideo",
    "display_name": "EmptyHunyuanLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "latent/video",
    "output_node": false
  },
  "HunyuanImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 53,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "guidance_type": [
          [
            "v1 (concat)",
            "v2 (replace)"
          ]
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "vae",
        "width",
        "height",
        "length",
        "batch_size",
        "guidance_type"
      ],
      "optional": [
        "start_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "latent"
    ],
    "name": "HunyuanImageToVideo",
    "display_name": "HunyuanImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "CLIPTextEncodeFlux": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "t5xxl",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeFlux",
    "display_name": "CLIPTextEncodeFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxGuidance",
    "display_name": "FluxGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxDisableGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxDisableGuidance",
    "display_name": "FluxDisableGuidance",
    "description": "This node completely disables the guidance embed on Flux and Flux like models",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "LoraSave": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_extracted_lora"
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "lora_type": [
          [
            "standard",
            "full_diff"
          ]
        ],
        "bias_diff": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "model_diff": [
          "MODEL",
          {
            "tooltip": "The ModelSubtract output to be converted to a lora."
          }
        ],
        "text_encoder_diff": [
          "CLIP",
          {
            "tooltip": "The CLIPSubtract output to be converted to a lora."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "rank",
        "lora_type",
        "bias_diff"
      ],
      "optional": [
        "model_diff",
        "text_encoder_diff"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraSave",
    "display_name": "Extract and Save Lora",
    "description": "",
    "python_module": "comfy_extras.nodes_lora_extract",
    "category": "_for_testing",
    "output_node": true
  },
  "TorchCompileModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModel",
    "display_name": "TorchCompileModel",
    "description": "",
    "python_module": "comfy_extras.nodes_torch_compile",
    "category": "_for_testing",
    "output_node": false,
    "experimental": true
  },
  "EmptyMochiLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 7,
            "max": 16384,
            "step": 6
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyMochiLatentVideo",
    "display_name": "EmptyMochiLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_mochi",
    "category": "latent/video",
    "output_node": false
  },
  "SkipLayerGuidanceDiT": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "double_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "single_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "rescaling_scale": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "double_layers",
        "single_layers",
        "scale",
        "start_percent",
        "end_percent",
        "rescaling_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceDiT",
    "display_name": "SkipLayerGuidanceDiT",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_slg",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "Mahiro": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "patched_model"
    ],
    "name": "Mahiro",
    "display_name": "Mahiro is so cute that she deserves a better guidance function!! (。・ω・。)",
    "description": "Modify the guidance to scale more on the 'direction' of the positive prompt rather than the difference between the negative prompt.",
    "python_module": "comfy_extras.nodes_mahiro",
    "category": "_for_testing",
    "output_node": false
  },
  "EmptyLTXVLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLTXVLatentVideo",
    "display_name": "EmptyLTXVLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "latent/video/ltxv",
    "output_node": false
  },
  "LTXVImgToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 9,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "image",
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVImgToVideo",
    "display_name": "LTXVImgToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "ModelSamplingLTXV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingLTXV",
    "display_name": "ModelSamplingLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "advanced/model",
    "output_node": false
  },
  "LTXVConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "frame_rate": [
          "FLOAT",
          {
            "default": 25.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "frame_rate"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "LTXVConditioning",
    "display_name": "LTXVConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "stretch": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Stretch the sigmas to be in the range [terminal, 1]."
          }
        ],
        "terminal": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 0.99,
            "step": 0.01,
            "tooltip": "The terminal value of the sigmas after stretching."
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "max_shift",
        "base_shift",
        "stretch",
        "terminal"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LTXVScheduler",
    "display_name": "LTXVScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LTXVAddGuide": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "Image or video to condition the latent video on. Must be 8*n + 1 frames.If the video is not 8*n + 1 frames, it will be cropped to the nearest 8*n + 1 frames."
          }
        ],
        "frame_idx": [
          "INT",
          {
            "default": 0,
            "min": -9999,
            "max": 9999,
            "tooltip": "Frame index to start the conditioning at. For single-frame images or videos with 1-8 frames, any frame_idx value is acceptable. For videos with 9+ frames, frame_idx must be divisible by 8, otherwise it will be rounded down to the nearest multiple of 8. Negative values are counted from the end of the video."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "latent",
        "image",
        "frame_idx",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVAddGuide",
    "display_name": "LTXVAddGuide",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVPreprocess": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "img_compression": [
          "INT",
          {
            "default": 35,
            "min": 0,
            "max": 100,
            "tooltip": "Amount of compression to apply on image."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "img_compression"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output_image"
    ],
    "name": "LTXVPreprocess",
    "display_name": "LTXVPreprocess",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "image",
    "output_node": false
  },
  "LTXVCropGuides": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "latent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVCropGuides",
    "display_name": "LTXVCropGuides",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "CreateHookLora": {
    "input": {
      "required": {
        "lora_name": [
          []
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLora",
    "display_name": "Create Hook LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookLoraModelOnly": {
    "input": {
      "required": {
        "lora_name": [
          []
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLoraModelOnly",
    "display_name": "Create Hook LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLora": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLora",
    "display_name": "Create Hook Model as LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLoraModelOnly": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLoraModelOnly",
    "display_name": "Create Hook Model as LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "SetHookKeyframes": {
    "input": {
      "required": {
        "hooks": [
          "HOOKS"
        ]
      },
      "optional": {
        "hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "hooks"
      ],
      "optional": [
        "hook_kf"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "SetHookKeyframes",
    "display_name": "Set Hook Keyframes",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframe": {
    "input": {
      "required": {
        "strength_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_mult",
        "start_percent"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframe",
    "display_name": "Create Hook Keyframe",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesInterpolated": {
    "input": {
      "required": {
        "strength_start": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "keyframes_count": [
          "INT",
          {
            "default": 5,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_start",
        "strength_end",
        "interpolation",
        "start_percent",
        "end_percent",
        "keyframes_count",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesInterpolated",
    "display_name": "Create Hook Keyframes Interp.",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesFromFloats": {
    "input": {
      "required": {
        "floats_strength": [
          "FLOATS",
          {
            "default": -1,
            "min": -1,
            "step": 0.001,
            "forceInput": true
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats_strength",
        "start_percent",
        "end_percent",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesFromFloats",
    "display_name": "Create Hook Keyframes From Floats",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks2": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks2",
    "display_name": "Combine Hooks [2]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks4": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks4",
    "display_name": "Combine Hooks [4]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks8": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ],
        "hooks_E": [
          "HOOKS"
        ],
        "hooks_F": [
          "HOOKS"
        ],
        "hooks_G": [
          "HOOKS"
        ],
        "hooks_H": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D",
        "hooks_E",
        "hooks_F",
        "hooks_G",
        "hooks_H"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks8",
    "display_name": "Combine Hooks [8]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetProperties": {
    "input": {
      "required": {
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetProperties",
    "display_name": "Cond Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetPropertiesAndCombine",
    "display_name": "Cond Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetProperties": {
    "input": {
      "required": {
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetProperties",
    "display_name": "Cond Pair Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetPropertiesAndCombine",
    "display_name": "Cond Pair Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetDefaultCombine",
    "display_name": "Cond Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_DEFAULT": [
          "CONDITIONING"
        ],
        "negative_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_DEFAULT",
        "negative_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetDefaultCombine",
    "display_name": "Cond Pair Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningCombine": {
    "input": {
      "required": {
        "positive_A": [
          "CONDITIONING"
        ],
        "negative_A": [
          "CONDITIONING"
        ],
        "positive_B": [
          "CONDITIONING"
        ],
        "negative_B": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_A",
        "negative_A",
        "positive_B",
        "negative_B"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningCombine",
    "display_name": "Cond Pair Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "SetClipHooks": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_conds": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "schedule_clip": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_conds",
        "schedule_clip"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SetClipHooks",
    "display_name": "Set CLIP Hooks",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/clip",
    "output_node": false,
    "experimental": true
  },
  "ConditioningTimestepsRange": {
    "input": {
      "required": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "TIMESTEPS_RANGE",
      "BEFORE_RANGE",
      "AFTER_RANGE"
    ],
    "name": "ConditioningTimestepsRange",
    "display_name": "Timesteps Range",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks",
    "output_node": false,
    "experimental": true
  },
  "Load3D": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path",
      "normal",
      "lineart"
    ],
    "name": "Load3D",
    "display_name": "Load 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Load3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D_ANIMATION",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path",
      "normal"
    ],
    "name": "Load3DAnimation",
    "display_name": "Load 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Preview3D": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3D",
    "display_name": "Preview 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "Preview3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3DAnimation",
    "display_name": "Preview 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "EmptyCosmosLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyCosmosLatentVideo",
    "display_name": "EmptyCosmosLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "latent/video",
    "output_node": false
  },
  "CosmosImageToVideoLatent": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "CosmosImageToVideoLatent",
    "display_name": "CosmosImageToVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "SaveWEBM": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "codec": [
          [
            "vp9",
            "av1"
          ]
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "crf": [
          "FLOAT",
          {
            "default": 32.0,
            "min": 0,
            "max": 63.0,
            "step": 1,
            "tooltip": "Higher crf means lower quality with a smaller file size, lower crf means higher quality higher filesize."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "codec",
        "fps",
        "crf"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveWEBM",
    "display_name": "SaveWEBM",
    "description": "",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": true,
    "experimental": true
  },
  "CLIPTextEncodeLumina2": {
    "input": {
      "required": {
        "system_prompt": [
          [
            "superior",
            "alignment"
          ],
          {
            "tooltip": "Lumina2 provide two types of system prompts:Superior: You are an assistant designed to generate superior images with the superior degree of image-text alignment based on textual prompts or user prompts. Alignment: You are an assistant designed to generate high-quality images with the highest degree of image-text alignment based on textual prompts."
          }
        ],
        "user_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "system_prompt",
        "user_prompt",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeLumina2",
    "display_name": "CLIP Text Encode for Lumina2",
    "description": "Encodes a system prompt and a user prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "RenormCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cfg_trunc": [
          "FLOAT",
          {
            "default": 100,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "renorm_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cfg_trunc",
        "renorm_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RenormCFG",
    "display_name": "RenormCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "advanced/model",
    "output_node": false
  },
  "WanImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanImageToVideo",
    "display_name": "WanImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFunControlToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "control_video": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image",
        "control_video"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFunControlToVideo",
    "display_name": "WanFunControlToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFunInpaintToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFunInpaintToVideo",
    "display_name": "WanFunInpaintToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LotusConditioning": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "conditioning"
    ],
    "name": "LotusConditioning",
    "display_name": "LotusConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lotus",
    "category": "conditioning/lotus",
    "output_node": false
  },
  "EmptyLatentHunyuan3Dv2": {
    "input": {
      "required": {
        "resolution": [
          "INT",
          {
            "default": 3072,
            "min": 1,
            "max": 8192
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentHunyuan3Dv2",
    "display_name": "EmptyLatentHunyuan3Dv2",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "latent/3d",
    "output_node": false
  },
  "Hunyuan3Dv2Conditioning": {
    "input": {
      "required": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision_output"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Hunyuan3Dv2Conditioning",
    "display_name": "Hunyuan3Dv2Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "Hunyuan3Dv2ConditioningMultiView": {
    "input": {
      "required": {},
      "optional": {
        "front": [
          "CLIP_VISION_OUTPUT"
        ],
        "left": [
          "CLIP_VISION_OUTPUT"
        ],
        "back": [
          "CLIP_VISION_OUTPUT"
        ],
        "right": [
          "CLIP_VISION_OUTPUT"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "front",
        "left",
        "back",
        "right"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Hunyuan3Dv2ConditioningMultiView",
    "display_name": "Hunyuan3Dv2ConditioningMultiView",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VAEDecodeHunyuan3D": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "num_chunks": [
          "INT",
          {
            "default": 8000,
            "min": 1000,
            "max": 500000
          }
        ],
        "octree_resolution": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 512
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "num_chunks",
        "octree_resolution"
      ]
    },
    "output": [
      "VOXEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VOXEL"
    ],
    "name": "VAEDecodeHunyuan3D",
    "display_name": "VAEDecodeHunyuan3D",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "latent/3d",
    "output_node": false
  },
  "VoxelToMeshBasic": {
    "input": {
      "required": {
        "voxel": [
          "VOXEL"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.6,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "voxel",
        "threshold"
      ]
    },
    "output": [
      "MESH"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MESH"
    ],
    "name": "VoxelToMeshBasic",
    "display_name": "VoxelToMeshBasic",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": false
  },
  "VoxelToMesh": {
    "input": {
      "required": {
        "voxel": [
          "VOXEL"
        ],
        "algorithm": [
          [
            "surface net",
            "basic"
          ]
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.6,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "voxel",
        "algorithm",
        "threshold"
      ]
    },
    "output": [
      "MESH"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MESH"
    ],
    "name": "VoxelToMesh",
    "display_name": "VoxelToMesh",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": false
  },
  "SaveGLB": {
    "input": {
      "required": {
        "mesh": [
          "MESH"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "mesh/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mesh",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveGLB",
    "display_name": "SaveGLB",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": true
  },
  "PrimitiveString": {
    "input": {
      "required": {
        "value": [
          "STRING",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "PrimitiveString",
    "display_name": "String",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveInt": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "control_after_generate": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "PrimitiveInt",
    "display_name": "Int",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveFloat": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "PrimitiveFloat",
    "display_name": "Float",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveBoolean": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "PrimitiveBoolean",
    "display_name": "Boolean",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "CFGZeroStar": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "patched_model"
    ],
    "name": "CFGZeroStar",
    "display_name": "CFGZeroStar",
    "description": "",
    "python_module": "comfy_extras.nodes_cfg",
    "category": "advanced/guidance",
    "output_node": false
  },
  "OptimalStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "FLUX",
            "Wan"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 3,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "OptimalStepsScheduler",
    "display_name": "OptimalStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_optimalsteps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "BLIP Model Loader": {
    "input": {
      "required": {
        "blip_model": [
          "STRING",
          {
            "default": "Salesforce/blip-image-captioning-base"
          }
        ],
        "vqa_model_id": [
          "STRING",
          {
            "default": "Salesforce/blip-vqa-base"
          }
        ],
        "device": [
          [
            "cuda",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "blip_model",
        "vqa_model_id",
        "device"
      ]
    },
    "output": [
      "BLIP_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BLIP_MODEL"
    ],
    "name": "BLIP Model Loader",
    "display_name": "BLIP Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Blend Latents": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "operation": [
          [
            "add",
            "multiply",
            "divide",
            "subtract",
            "overlay",
            "hard_light",
            "soft_light",
            "screen",
            "linear_dodge",
            "difference",
            "exclusion",
            "random"
          ]
        ],
        "blend": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "operation",
        "blend"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Blend Latents",
    "display_name": "Blend Latents",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Bus Node": {
    "input": {
      "required": {},
      "optional": {
        "bus": [
          "BUS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "bus",
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BUS",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "bus",
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "Bus Node",
    "display_name": "Bus Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Cache Node": {
    "input": {
      "required": {
        "latent_suffix": [
          "STRING",
          {
            "default": "35686086_cache",
            "multiline": false
          }
        ],
        "image_suffix": [
          "STRING",
          {
            "default": "95574080_cache",
            "multiline": false
          }
        ],
        "conditioning_suffix": [
          "STRING",
          {
            "default": "87301413_cache",
            "multiline": false
          }
        ]
      },
      "optional": {
        "output_path": [
          "STRING",
          {
            "default": "/home/comfyui_sn/ComfyUI/custom_nodes/was-node-suite-comfyui/cache",
            "multiline": false
          }
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_suffix",
        "image_suffix",
        "conditioning_suffix"
      ],
      "optional": [
        "output_path",
        "latent",
        "image",
        "conditioning"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "latent_filename",
      "image_filename",
      "conditioning_filename"
    ],
    "name": "Cache Node",
    "display_name": "Cache Node",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Checkpoint Loader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader",
    "display_name": "Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Checkpoint Loader (Simple)": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Checkpoint Loader (Simple)",
    "display_name": "Checkpoint Loader (Simple)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPTextEncode (NSP)": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "conditioning",
      "parsed_text",
      "raw_text"
    ],
    "name": "CLIPTextEncode (NSP)",
    "display_name": "CLIPTextEncode (NSP)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Conditioning",
    "output_node": true
  },
  "CLIP Input Switch": {
    "input": {
      "required": {
        "clip_a": [
          "CLIP"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_a",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIP Input Switch",
    "display_name": "CLIP Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "CLIP Vision Input Switch": {
    "input": {
      "required": {
        "clip_vision_a": [
          "CLIP_VISION"
        ],
        "clip_vision_b": [
          "CLIP_VISION"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision_a",
        "clip_vision_b",
        "boolean"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIP Vision Input Switch",
    "display_name": "CLIP Vision Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Conditioning Input Switch": {
    "input": {
      "required": {
        "conditioning_a": [
          "CONDITIONING"
        ],
        "conditioning_b": [
          "CONDITIONING"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_a",
        "conditioning_b",
        "boolean"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Conditioning Input Switch",
    "display_name": "Conditioning Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Constant Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "number": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "number_as_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "number"
      ],
      "optional": [
        "number_as_text"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Constant Number",
    "display_name": "Constant Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Create Grid Image": {
    "input": {
      "required": {
        "images_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/",
            "multiline": false
          }
        ],
        "pattern_glob": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "include_subfolders": [
          [
            "false",
            "true"
          ]
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 1280,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_path",
        "pattern_glob",
        "include_subfolders",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image",
    "display_name": "Create Grid Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Grid Image from Batch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "border_width": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "number_of_columns": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ],
        "max_cell_size": [
          "INT",
          {
            "default": 256,
            "min": 32,
            "max": 2048,
            "step": 1
          }
        ],
        "border_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "border_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "border_width",
        "number_of_columns",
        "max_cell_size",
        "border_red",
        "border_green",
        "border_blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Grid Image from Batch",
    "display_name": "Create Grid Image from Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Create Morph Image": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image_a_pass",
      "image_b_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image",
    "display_name": "Create Morph Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Morph Image from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "still_image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI",
            "multiline": false
          }
        ],
        "input_pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph",
            "multiline": false
          }
        ],
        "filetype": [
          [
            "GIF",
            "APNG"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "still_image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "input_path",
        "input_pattern",
        "output_path",
        "filename",
        "filetype"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Morph Image from Path",
    "display_name": "Create Morph Image from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "Create Video from Path": {
    "input": {
      "required": {
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.01,
            "max": 60000.0,
            "step": 0.01
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60.0,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "input_path": [
          "STRING",
          {
            "default": "./ComfyUI/input",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_video",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "input_path",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filepath_text",
      "filename_text"
    ],
    "name": "Create Video from Path",
    "display_name": "Create Video from Path",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSeg Masking": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MASK",
      "MASK_IMAGE"
    ],
    "name": "CLIPSeg Masking",
    "display_name": "CLIPSeg Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "CLIPSeg Model Loader": {
    "input": {
      "required": {
        "model": [
          "STRING",
          {
            "default": "CIDAS/clipseg-rd64-refined",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CLIPSEG_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "clipseg_model"
    ],
    "name": "CLIPSeg Model Loader",
    "display_name": "CLIPSeg Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "CLIPSeg Batch Masking": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "text_a": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "image_c": [
          "IMAGE"
        ],
        "image_d": [
          "IMAGE"
        ],
        "image_e": [
          "IMAGE"
        ],
        "image_f": [
          "IMAGE"
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_e": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_f": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "text_a",
        "text_b"
      ],
      "optional": [
        "image_c",
        "image_d",
        "image_e",
        "image_f",
        "text_c",
        "text_d",
        "text_e",
        "text_f"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGES_BATCH",
      "MASKS_BATCH",
      "MASK_IMAGES_BATCH"
    ],
    "name": "CLIPSeg Batch Masking",
    "display_name": "CLIPSeg Batch Masking",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Convert Masks to Images": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "Convert Masks to Images",
    "display_name": "Convert Masks to Images",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Control Net Model Input Switch": {
    "input": {
      "required": {
        "control_net_a": [
          "CONTROL_NET"
        ],
        "control_net_b": [
          "CONTROL_NET"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_a",
        "control_net_b",
        "boolean"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "Control Net Model Input Switch",
    "display_name": "Control Net Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Debug Number to Console": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "label"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Debug Number to Console",
    "display_name": "Debug Number to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Dictionary to Console": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "label": [
          "STRING",
          {
            "default": "Dictionary Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "label"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Dictionary to Console",
    "display_name": "Dictionary to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Diffusers Model Loader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Model Loader",
    "display_name": "Diffusers Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Diffusers Hub Model Down-Loader": {
    "input": {
      "required": {
        "repo_id": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "revision": [
          "STRING",
          {
            "default": "None",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "repo_id",
        "revision"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "NAME_STRING"
    ],
    "name": "Diffusers Hub Model Down-Loader",
    "display_name": "Diffusers Hub Model Down-Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders/Advanced",
    "output_node": false
  },
  "Export API": {
    "input": {
      "required": {
        "save_prompt_api": [
          [
            "true",
            "true"
          ]
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output/",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI_Prompt"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 2,
            "max": 9,
            "step": 1
          }
        ],
        "parse_text_tokens": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "save_prompt_api",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "parse_text_tokens"
      ],
      "hidden": [
        "prompt"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Export API",
    "display_name": "Export API",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Latent Input Switch": {
    "input": {
      "required": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_a",
        "latent_b",
        "boolean"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Input Switch",
    "display_name": "Latent Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Load Cache": {
    "input": {
      "required": {
        "latent_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "image_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "conditioning_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_path",
        "image_path",
        "conditioning_path"
      ]
    },
    "output": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "IMAGE",
      "CONDITIONING"
    ],
    "name": "Load Cache",
    "display_name": "Load Cache",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Logic Boolean": {
    "input": {
      "required": {
        "boolean": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "BOOLEAN",
      "NUMBER",
      "INT",
      "FLOAT"
    ],
    "name": "Logic Boolean",
    "display_name": "Logic Boolean",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Boolean Primitive": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Boolean Primitive",
    "display_name": "Logic Boolean Primitive",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison OR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison OR",
    "display_name": "Logic Comparison OR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison AND": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison AND",
    "display_name": "Logic Comparison AND",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic Comparison XOR": {
    "input": {
      "required": {
        "boolean_a": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "boolean_b": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean_a",
        "boolean_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic Comparison XOR",
    "display_name": "Logic Comparison XOR",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Logic NOT": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Logic NOT",
    "display_name": "Logic NOT",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Lora Loader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Lora Loader",
    "display_name": "Lora Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Hex to HSL": {
    "input": {
      "required": {
        "hex_color": [
          "STRING",
          {
            "default": "#FF0000"
          }
        ]
      },
      "optional": {
        "include_alpha": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hex_color"
      ],
      "optional": [
        "include_alpha"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "hue",
      "saturation",
      "lightness",
      "alpha",
      "hsl"
    ],
    "name": "Hex to HSL",
    "display_name": "Hex to HSL",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "HSL to Hex": {
    "input": {
      "required": {
        "hsl_color": [
          "STRING",
          {
            "default": "hsl(0, 100%, 50%)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hsl_color"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "hex_color"
    ],
    "name": "HSL to Hex",
    "display_name": "HSL to Hex",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Utilities",
    "output_node": false
  },
  "Image SSAO (Ambient Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0.0,
            "max": 5.0,
            "default": 1.0,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "ao_blur": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 2.5,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 25,
            "step": 1
          }
        ],
        "enable_specular_masking": [
          [
            "True",
            "False"
          ]
        ],
        "tile_size": [
          "INT",
          {
            "min": 1,
            "max": 512,
            "default": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "ao_blur",
        "specular_threshold",
        "enable_specular_masking",
        "tile_size"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "composited_images",
      "ssao_images",
      "specular_mask_images"
    ],
    "name": "Image SSAO (Ambient Occlusion)",
    "display_name": "Image SSAO (Ambient Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image SSDO (Direct Occlusion)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "depth_images": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "min": 0.0,
            "max": 5.0,
            "default": 1.0,
            "step": 0.01
          }
        ],
        "radius": [
          "FLOAT",
          {
            "min": 0.01,
            "max": 1024,
            "default": 30,
            "step": 0.01
          }
        ],
        "specular_threshold": [
          "INT",
          {
            "min": 0,
            "max": 255,
            "default": 128,
            "step": 1
          }
        ],
        "colored_occlusion": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "depth_images",
        "strength",
        "radius",
        "specular_threshold",
        "colored_occlusion"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "composited_images",
      "ssdo_images",
      "ssdo_image_masks",
      "light_source_image_masks"
    ],
    "name": "Image SSDO (Direct Occlusion)",
    "display_name": "Image SSDO (Direct Occlusion)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Analyze": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Black White Levels",
            "RGB Levels"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Analyze",
    "display_name": "Image Analyze",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Aspect Ratio": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "NUMBER"
        ],
        "height": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "NUMBER",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "aspect_number",
      "aspect_float",
      "is_landscape_bool",
      "aspect_ratio_common",
      "aspect_type"
    ],
    "name": "Image Aspect Ratio",
    "display_name": "Image Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Batch": {
    "input": {
      "required": {},
      "optional": {
        "images_a": [
          "IMAGE"
        ],
        "images_b": [
          "IMAGE"
        ],
        "images_c": [
          "IMAGE"
        ],
        "images_d": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "images_a",
        "images_b",
        "images_c",
        "images_d"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Batch",
    "display_name": "Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blank": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "red",
        "green",
        "blue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blank",
    "display_name": "Image Blank",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend by Mask": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mask",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Blend by Mask",
    "display_name": "Image Blend by Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blend": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Blend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Blending Mode": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "mode": [
          [
            "add",
            "color",
            "color_burn",
            "color_dodge",
            "darken",
            "difference",
            "exclusion",
            "hard_light",
            "hue",
            "lighten",
            "multiply",
            "overlay",
            "screen",
            "soft_light"
          ]
        ],
        "blend_percentage": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "mode",
        "blend_percentage"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Blending Mode",
    "display_name": "Image Blending Mode",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Image Bloom Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 10,
            "min": 0.0,
            "max": 1024,
            "step": 0.1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "radius",
        "intensity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Bloom Filter",
    "display_name": "Image Bloom Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Canny Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "enable_threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "enable_threshold",
        "threshold_low",
        "threshold_high"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Canny Filter",
    "display_name": "Image Canny Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Chromatic Aberration": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red_offset": [
          "INT",
          {
            "default": 2,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "green_offset": [
          "INT",
          {
            "default": -1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "blue_offset": [
          "INT",
          {
            "default": 1,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fade_radius": [
          "INT",
          {
            "default": 12,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red_offset",
        "green_offset",
        "blue_offset",
        "intensity",
        "fade_radius"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Chromatic Aberration",
    "display_name": "Image Chromatic Aberration",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Color Palette": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 16,
            "min": 8,
            "max": 256,
            "step": 1
          }
        ],
        "mode": [
          [
            "Chart",
            "back_to_back"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "LIST"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "color_palettes"
    ],
    "name": "Image Color Palette",
    "display_name": "Image Color Palette",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Image Crop Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_padding_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "cascade_xml": [
          [
            "lbpcascade_animeface.xml",
            "haarcascade_frontalface_default.xml",
            "haarcascade_frontalface_alt.xml",
            "haarcascade_frontalface_alt2.xml",
            "haarcascade_frontalface_alt_tree.xml",
            "haarcascade_profileface.xml",
            "haarcascade_upperbody.xml",
            "haarcascade_eye.xml"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_padding_factor",
        "cascade_xml"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Face",
    "display_name": "Image Crop Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top",
        "left",
        "right",
        "bottom"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Location",
    "display_name": "Image Crop Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Crop Square Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "max": 24576,
            "min": 0,
            "step": 1
          }
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "max": 4096,
            "min": 5,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "x",
        "y",
        "size"
      ]
    },
    "output": [
      "IMAGE",
      "CROP_DATA"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "CROP_DATA"
    ],
    "name": "Image Crop Square Location",
    "display_name": "Image Crop Square Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Displacement Warp": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "displacement_maps": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 25.0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "displacement_maps",
        "amplitude"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Displacement Warp",
    "display_name": "Image Displacement Warp",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Lucy Sharpen": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "iterations": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "iterations",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Lucy Sharpen",
    "display_name": "Image Lucy Sharpen",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Paste Face": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK_IMAGE"
    ],
    "name": "Image Paste Face",
    "display_name": "Image Paste Face",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop",
    "display_name": "Image Paste Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Paste Crop by Location": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 256,
            "max": 10000000,
            "min": 0,
            "step": 1
          }
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_image",
        "top",
        "left",
        "right",
        "bottom",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Paste Crop by Location",
    "display_name": "Image Paste Crop by Location",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Pixelate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "pixelation_size": [
          "FLOAT",
          {
            "default": 164,
            "min": 16,
            "max": 480,
            "step": 1
          }
        ],
        "num_colors": [
          "FLOAT",
          {
            "default": 16,
            "min": 2,
            "max": 256,
            "step": 1
          }
        ],
        "init_mode": [
          [
            "k-means++",
            "random",
            "none"
          ]
        ],
        "max_iterations": [
          "FLOAT",
          {
            "default": 100,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "False",
            "True"
          ]
        ],
        "dither_mode": [
          [
            "FloydSteinberg",
            "Ordered"
          ]
        ]
      },
      "optional": {
        "color_palettes": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "color_palette_mode": [
          [
            "Brightness",
            "BrightnessAndTonal",
            "Linear",
            "Tonal"
          ]
        ],
        "reverse_palette": [
          [
            "False",
            "True"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "pixelation_size",
        "num_colors",
        "init_mode",
        "max_iterations",
        "dither",
        "dither_mode"
      ],
      "optional": [
        "color_palettes",
        "color_palette_mode",
        "reverse_palette"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Pixelate",
    "display_name": "Image Pixelate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Power Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "attenuation": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 10.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "noise_type": [
          [
            "grey",
            "white",
            "pink",
            "blue",
            "green",
            "mix"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frequency",
        "attenuation",
        "noise_type",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Power Noise",
    "display_name": "Image Power Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Dragan Photography Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 6.0,
            "step": 0.01
          }
        ],
        "highpass_radius": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.01
          }
        ],
        "highpass_samples": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 6.0,
            "step": 1
          }
        ],
        "highpass_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 3.0,
            "step": 0.01
          }
        ],
        "colorize": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "saturation",
        "contrast",
        "brightness",
        "sharpness",
        "highpass_radius",
        "highpass_samples",
        "highpass_strength",
        "colorize"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Dragan Photography Filter",
    "display_name": "Image Dragan Photography Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Edge Detection Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "normal",
            "laplacian"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Edge Detection Filter",
    "display_name": "Image Edge Detection Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Film Grain": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "density": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "highlights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 255.0,
            "step": 0.01
          }
        ],
        "supersample_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 8,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "density",
        "intensity",
        "highlights",
        "supersample_factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Film Grain",
    "display_name": "Image Film Grain",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Filter Adjustments": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "sharpness": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -5.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "gaussian_blur": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1024.0,
            "step": 0.1
          }
        ],
        "edge_enhance": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "detail_enhance": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "brightness",
        "contrast",
        "saturation",
        "sharpness",
        "blur",
        "gaussian_blur",
        "edge_enhance",
        "detail_enhance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Filter Adjustments",
    "display_name": "Image Filter Adjustments",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Flip": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "horizontal",
            "vertical"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Flip",
    "display_name": "Image Flip",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Gradient Map": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "gradient_image": [
          "IMAGE"
        ],
        "flip_left_right": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "gradient_image",
        "flip_left_right"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Gradient Map",
    "display_name": "Image Gradient Map",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Generate Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ]
        ],
        "tolerance": [
          "INT",
          {
            "default": 0,
            "max": 255,
            "min": 0,
            "step": 1
          }
        ],
        "gradient_stops": [
          "STRING",
          {
            "default": "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "direction",
        "tolerance",
        "gradient_stops"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Generate Gradient",
    "display_name": "Image Generate Gradient",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate",
    "output_node": false
  },
  "Image High Pass Filter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "radius": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 500,
            "step": 1
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "color_output": [
          [
            "true",
            "false"
          ]
        ],
        "neutral_background": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "radius",
        "strength",
        "color_output",
        "neutral_background"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image High Pass Filter",
    "display_name": "Image High Pass Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image History Loader": {
    "input": {
      "required": {
        "image": [
          [
            "No History"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Image History Loader",
    "display_name": "Image History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Image Input Switch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Input Switch",
    "display_name": "Image Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Image Levels Adjustment": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "black_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "mid_level": [
          "FLOAT",
          {
            "default": 127.5,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "white_level": [
          "FLOAT",
          {
            "default": 255,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "black_level",
        "mid_level",
        "white_level"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Levels Adjustment",
    "display_name": "Image Levels Adjustment",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Load": {
    "input": {
      "required": {
        "image_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/example.png",
            "multiline": false
          }
        ],
        "RGBA": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_path",
        "RGBA"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "filename_text"
    ],
    "name": "Image Load",
    "display_name": "Image Load",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Image Median Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "diameter": [
          "INT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 255,
            "step": 1
          }
        ],
        "sigma_color": [
          "FLOAT",
          {
            "default": 10.0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "sigma_space": [
          "FLOAT",
          {
            "default": 10.0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "diameter",
        "sigma_color",
        "sigma_space"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Median Filter",
    "display_name": "Image Median Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Mix RGB Channels": {
    "input": {
      "required": {
        "red_channel": [
          "IMAGE"
        ],
        "green_channel": [
          "IMAGE"
        ],
        "blue_channel": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "red_channel",
        "green_channel",
        "blue_channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Mix RGB Channels",
    "display_name": "Image Mix RGB Channels",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Monitor Effects Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "Digital Distortion",
            "Signal Distortion",
            "TV Distortion"
          ]
        ],
        "amplitude": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "offset": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "amplitude",
        "offset"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Monitor Effects Filter",
    "display_name": "Image Monitor Effects Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Nova Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amplitude": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "frequency": [
          "FLOAT",
          {
            "default": 3.14,
            "min": 0.0,
            "max": 100.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amplitude",
        "frequency"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Nova Filter",
    "display_name": "Image Nova Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Padding": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "feathering": [
          "INT",
          {
            "default": 120,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ],
        "feather_second_pass": [
          [
            "true",
            "false"
          ]
        ],
        "left_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "right_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "top_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ],
        "bottom_padding": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "feathering",
        "feather_second_pass",
        "left_padding",
        "right_padding",
        "top_padding",
        "bottom_padding"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Image Padding",
    "display_name": "Image Padding",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Perlin Noise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 2048,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Noise",
    "display_name": "Image Perlin Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Rembg (Remove Background)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "transparency": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model": [
          [
            "u2net",
            "u2netp",
            "u2net_human_seg",
            "silueta",
            "isnet-general-use",
            "isnet-anime"
          ]
        ],
        "post_processing": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "only_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "alpha_matting_foreground_threshold": [
          "INT",
          {
            "default": 240,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_background_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "alpha_matting_erode_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255
          }
        ],
        "background_color": [
          [
            "none",
            "black",
            "white",
            "magenta",
            "chroma green",
            "chroma blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "transparency",
        "model",
        "post_processing",
        "only_mask",
        "alpha_matting",
        "alpha_matting_foreground_threshold",
        "alpha_matting_background_threshold",
        "alpha_matting_erode_size",
        "background_color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Rembg (Remove Background)",
    "display_name": "Image Rembg (Remove Background)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Image Perlin Power Fractal": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 8192,
            "min": 64,
            "step": 1
          }
        ],
        "scale": [
          "INT",
          {
            "default": 100,
            "max": 2048,
            "min": 2,
            "step": 1
          }
        ],
        "octaves": [
          "INT",
          {
            "default": 4,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "persistence": [
          "FLOAT",
          {
            "default": 0.5,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "lacunarity": [
          "FLOAT",
          {
            "default": 2.0,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 2.0,
            "max": 100.0,
            "min": 0.01,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "scale",
        "octaves",
        "persistence",
        "lacunarity",
        "exponent",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Perlin Power Fractal",
    "display_name": "Image Perlin Power Fractal",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image Remove Background (Alpha)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "background",
            "foreground"
          ]
        ],
        "threshold": [
          "INT",
          {
            "default": 127,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_tolerance": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 24,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "threshold",
        "threshold_tolerance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Remove Background (Alpha)",
    "display_name": "Image Remove Background (Alpha)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Remove Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "target_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "replace_blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "clip_threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_red",
        "target_green",
        "target_blue",
        "replace_red",
        "replace_green",
        "replace_blue",
        "clip_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Remove Color",
    "display_name": "Image Remove Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Resize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "rescale",
            "resize"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "resampling": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "resize_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ],
        "resize_height": [
          "INT",
          {
            "default": 1536,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "supersample",
        "resampling",
        "rescale_factor",
        "resize_width",
        "resize_height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Resize",
    "display_name": "Image Resize",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "transpose",
            "internal"
          ]
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 360,
            "step": 90
          }
        ],
        "sampler": [
          [
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "rotation",
        "sampler"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Rotate",
    "display_name": "Image Rotate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Rotate Hue": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "hue_shift": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "hue_shift"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Rotate Hue",
    "display_name": "Image Rotate Hue",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Send HTTP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "url": [
          "STRING",
          {
            "default": "example.com"
          }
        ],
        "method_type": [
          [
            "post",
            "put",
            "patch"
          ],
          {
            "default": "post"
          }
        ],
        "request_field_name": [
          "STRING",
          {
            "default": "image"
          }
        ]
      },
      "optional": {
        "additional_request_headers": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "url",
        "method_type",
        "request_field_name"
      ],
      "optional": [
        "additional_request_headers"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "status_code",
      "result_text"
    ],
    "name": "Image Send HTTP",
    "display_name": "Image Send HTTP",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Save": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "output_path": [
          "STRING",
          {
            "default": "[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 9,
            "step": 1
          }
        ],
        "filename_number_start": [
          [
            "false",
            "true"
          ]
        ],
        "extension": [
          [
            "png",
            "jpg",
            "jpeg",
            "gif",
            "tiff",
            "webp",
            "bmp"
          ]
        ],
        "dpi": [
          "INT",
          {
            "default": 300,
            "min": 1,
            "max": 2400,
            "step": 1
          }
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "optimize_image": [
          [
            "true",
            "false"
          ]
        ],
        "lossless_webp": [
          [
            "false",
            "true"
          ]
        ],
        "overwrite_mode": [
          [
            "false",
            "prefix_as_filename"
          ]
        ],
        "show_history": [
          [
            "false",
            "true"
          ]
        ],
        "show_history_by_prefix": [
          [
            "true",
            "false"
          ]
        ],
        "embed_workflow": [
          [
            "true",
            "false"
          ]
        ],
        "show_previews": [
          [
            "true",
            "false"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "output_path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding",
        "filename_number_start",
        "extension",
        "dpi",
        "quality",
        "optimize_image",
        "lossless_webp",
        "overwrite_mode",
        "show_history",
        "show_history_by_prefix",
        "embed_workflow",
        "show_previews"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "files"
    ],
    "name": "Image Save",
    "display_name": "Image Save",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Image Seamless Texture": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "blending": [
          "FLOAT",
          {
            "default": 0.4,
            "max": 1.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "tiled": [
          [
            "true",
            "false"
          ]
        ],
        "tiles": [
          "INT",
          {
            "default": 2,
            "max": 6,
            "min": 2,
            "step": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "blending",
        "tiled",
        "tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "Image Seamless Texture",
    "display_name": "Image Seamless Texture",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Channel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Channel",
    "display_name": "Image Select Channel",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Select Color": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255.0,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "variance": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "variance"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Select Color",
    "display_name": "Image Select Color",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Shadows and Highlights": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "shadow_threshold": [
          "FLOAT",
          {
            "default": 75,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "shadow_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": -12.0,
            "max": 12.0,
            "step": 0.1
          }
        ],
        "shadow_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "highlight_threshold": [
          "FLOAT",
          {
            "default": 175,
            "min": 0.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "highlight_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -12.0,
            "max": 12.0,
            "step": 0.1
          }
        ],
        "highlight_smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ],
        "simplify_isolation": [
          "FLOAT",
          {
            "default": 0,
            "min": -255.0,
            "max": 255.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "shadow_threshold",
        "shadow_factor",
        "shadow_smoothing",
        "highlight_threshold",
        "highlight_factor",
        "highlight_smoothing",
        "simplify_isolation"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "shadow_map",
      "highlight_map"
    ],
    "name": "Image Shadows and Highlights",
    "display_name": "Image Shadows and Highlights",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Adjustment",
    "output_node": false
  },
  "Image Size to Number": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width_num",
      "height_num",
      "width_float",
      "height_float",
      "width_int",
      "height_int"
    ],
    "name": "Image Size to Number",
    "display_name": "Image Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Image Stitch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "stitch": [
          [
            "top",
            "left",
            "bottom",
            "right"
          ]
        ],
        "feathering": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 2048,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "stitch",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Stitch",
    "display_name": "Image Stitch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image Style Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "style": [
          [
            "1977",
            "aden",
            "brannan",
            "brooklyn",
            "clarendon",
            "earlybird",
            "fairy tale",
            "gingham",
            "hudson",
            "inkwell",
            "kelvin",
            "lark",
            "lofi",
            "maven",
            "mayfair",
            "moon",
            "nashville",
            "perpetua",
            "reyes",
            "rise",
            "slumber",
            "stinson",
            "toaster",
            "valencia",
            "walden",
            "willow",
            "xpro2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "style"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Style Filter",
    "display_name": "Image Style Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image Threshold": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Threshold",
    "display_name": "Image Threshold",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Tiled": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "num_tiles": [
          "INT",
          {
            "default": 4,
            "max": 64,
            "min": 2,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "num_tiles"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "Image Tiled",
    "display_name": "Image Tiled",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Process",
    "output_node": false
  },
  "Image Transpose": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_overlay": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "X": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "Y": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_overlay",
        "width",
        "height",
        "X",
        "Y",
        "rotation",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Transpose",
    "display_name": "Image Transpose",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Transform",
    "output_node": false
  },
  "Image fDOF Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "depth": [
          "IMAGE"
        ],
        "mode": [
          [
            "mock",
            "gaussian",
            "box"
          ]
        ],
        "radius": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 128,
            "step": 1
          }
        ],
        "samples": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "depth",
        "mode",
        "radius",
        "samples"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image fDOF Filter",
    "display_name": "Image fDOF Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Filter",
    "output_node": false
  },
  "Image to Latent Mask": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Image to Latent Mask",
    "display_name": "Image to Latent Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Image to Noise": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "num_colors": [
          "INT",
          {
            "default": 16,
            "max": 256,
            "min": 2,
            "step": 2
          }
        ],
        "black_mix": [
          "INT",
          {
            "default": 0,
            "max": 20,
            "min": 0,
            "step": 1
          }
        ],
        "gaussian_mix": [
          "FLOAT",
          {
            "default": 0.0,
            "max": 1024,
            "min": 0,
            "step": 0.1
          }
        ],
        "brightness": [
          "FLOAT",
          {
            "default": 1.0,
            "max": 2.0,
            "min": 0.0,
            "step": 0.01
          }
        ],
        "output_mode": [
          [
            "batch",
            "list"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "num_colors",
        "black_mix",
        "gaussian_mix",
        "brightness",
        "output_mode",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image to Noise",
    "display_name": "Image to Noise",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "Image to Seed": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "INT"
    ],
    "name": "Image to Seed",
    "display_name": "Image to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Analyze",
    "output_node": false
  },
  "Images to RGB": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to RGB",
    "display_name": "Images to RGB",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Images to Linear": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Images to Linear",
    "display_name": "Images to Linear",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image",
    "output_node": false
  },
  "Integer place counter": {
    "input": {
      "required": {
        "int_input": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int_input"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT_PLACES"
    ],
    "name": "Integer place counter",
    "display_name": "Integer place counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Integer",
    "output_node": false
  },
  "Image Voronoi Noise Filter": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "max": 4096,
            "min": 64,
            "step": 1
          }
        ],
        "density": [
          "INT",
          {
            "default": 50,
            "max": 256,
            "min": 10,
            "step": 2
          }
        ],
        "modulator": [
          "INT",
          {
            "default": 0,
            "max": 8,
            "min": 0,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "flat": [
          [
            "False",
            "True"
          ]
        ],
        "RGB_output": [
          [
            "True",
            "False"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "density",
        "modulator",
        "seed"
      ],
      "optional": [
        "flat",
        "RGB_output"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Image Voronoi Noise Filter",
    "display_name": "Image Voronoi Noise Filter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Generate/Noise",
    "output_node": false
  },
  "KSampler (WAS)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "SEED"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler (WAS)",
    "display_name": "KSampler (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "KSampler Cycle": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "tiled_vae": [
          [
            "disable",
            "enable"
          ]
        ],
        "latent_upscale": [
          [
            "disable",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.1
          }
        ],
        "upscale_cycles": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 12,
            "step": 1
          }
        ],
        "starting_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cycle_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_denoise": [
          [
            "enable",
            "disable"
          ]
        ],
        "scale_sampling": [
          [
            "bilinear",
            "bicubic",
            "nearest",
            "lanczos"
          ]
        ],
        "vae": [
          "VAE"
        ]
      },
      "optional": {
        "secondary_model": [
          "MODEL"
        ],
        "secondary_start_cycle": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 16,
            "step": 1
          }
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "processor_model": [
          "UPSCALE_MODEL"
        ],
        "pos_additive": [
          "CONDITIONING"
        ],
        "neg_additive": [
          "CONDITIONING"
        ],
        "pos_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "pos_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "pos_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "pos_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "neg_add_mode": [
          [
            "increment",
            "decrement"
          ]
        ],
        "neg_add_strength": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "neg_add_strength_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "neg_add_strength_cutoff": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "sharpen_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 12,
            "step": 1
          }
        ],
        "steps_scaling": [
          [
            "enable",
            "disable"
          ]
        ],
        "steps_control": [
          [
            "decrement",
            "increment"
          ]
        ],
        "steps_scaling_value": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "steps_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 4,
            "max": 1000,
            "step": 1
          }
        ],
        "denoise_cutoff": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "tiled_vae",
        "latent_upscale",
        "upscale_factor",
        "upscale_cycles",
        "starting_denoise",
        "cycle_denoise",
        "scale_denoise",
        "scale_sampling",
        "vae"
      ],
      "optional": [
        "secondary_model",
        "secondary_start_cycle",
        "upscale_model",
        "processor_model",
        "pos_additive",
        "neg_additive",
        "pos_add_mode",
        "pos_add_strength",
        "pos_add_strength_scaling",
        "pos_add_strength_cutoff",
        "neg_add_mode",
        "neg_add_strength",
        "neg_add_strength_scaling",
        "neg_add_strength_cutoff",
        "sharpen_strength",
        "sharpen_radius",
        "steps_scaling",
        "steps_control",
        "steps_scaling_value",
        "steps_cutoff",
        "denoise_cutoff"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent(s)"
    ],
    "name": "KSampler Cycle",
    "display_name": "KSampler Cycle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Sampling",
    "output_node": false
  },
  "Latent Batch": {
    "input": {
      "required": {},
      "optional": {
        "latent_a": [
          "LATENT"
        ],
        "latent_b": [
          "LATENT"
        ],
        "latent_c": [
          "LATENT"
        ],
        "latent_d": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "latent_a",
        "latent_b",
        "latent_c",
        "latent_d"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent"
    ],
    "name": "Latent Batch",
    "display_name": "Latent Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent",
    "output_node": false
  },
  "Latent Noise Injection": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "noise_std": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "noise_std"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Noise Injection",
    "display_name": "Latent Noise Injection",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Generate",
    "output_node": false
  },
  "Latent Size to Number": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "NUMBER",
      "NUMBER",
      "FLOAT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "tensor_w_num",
      "tensor_h_num",
      "tensor_w_float",
      "tensor_h_float",
      "tensor_w_int",
      "tensor_h_int"
    ],
    "name": "Latent Size to Number",
    "display_name": "Latent Size to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Latent Upscale by Factor (WAS)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mode": [
          [
            "area",
            "bicubic",
            "bilinear",
            "nearest"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "align": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mode",
        "factor",
        "align"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Latent Upscale by Factor (WAS)",
    "display_name": "Latent Upscale by Factor (WAS)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "Load Image Batch": {
    "input": {
      "required": {
        "mode": [
          [
            "single_image",
            "incremental_image",
            "random"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 150000,
            "step": 1
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Batch 001",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "*",
            "multiline": false
          }
        ],
        "allow_RGBA_output": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "filename_text_extension": [
          [
            "true",
            "false"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "seed",
        "index",
        "label",
        "path",
        "pattern",
        "allow_RGBA_output"
      ],
      "optional": [
        "filename_text_extension"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "filename_text"
    ],
    "name": "Load Image Batch",
    "display_name": "Load Image Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Text File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Load Text File",
    "display_name": "Load Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": false
  },
  "Load Lora": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "NAME_STRING"
    ],
    "name": "Load Lora",
    "display_name": "Load Lora",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Lora Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "clip_a": [
          "CLIP"
        ],
        "model_b": [
          "MODEL"
        ],
        "clip_b": [
          "CLIP"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "clip_a",
        "model_b",
        "clip_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Input Switch",
    "display_name": "Lora Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Masks Add": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Add",
    "display_name": "Masks Add",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Subtract": {
    "input": {
      "required": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks_a",
        "masks_b"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Masks Subtract",
    "display_name": "Masks Subtract",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Arbitrary Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "size",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Arbitrary Region",
    "display_name": "Mask Arbitrary Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch to Mask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "batch_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "batch_number"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Mask Batch to Mask",
    "display_name": "Mask Batch to Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Batch": {
    "input": {
      "optional": {
        "masks_a": [
          "MASK"
        ],
        "masks_b": [
          "MASK"
        ],
        "masks_c": [
          "MASK"
        ],
        "masks_d": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "optional": [
        "masks_a",
        "masks_b",
        "masks_c",
        "masks_d"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "masks"
    ],
    "name": "Mask Batch",
    "display_name": "Mask Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Ceiling Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Ceiling Region",
    "display_name": "Mask Ceiling Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Dominant Region",
    "display_name": "Mask Crop Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "padding"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Crop Minority Region",
    "display_name": "Mask Crop Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Crop Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "region_type": [
          [
            "dominant",
            "minority"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "region_type"
      ]
    },
    "output": [
      "MASK",
      "CROP_DATA",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "cropped_mask",
      "crop_data",
      "top_int",
      "left_int",
      "right_int",
      "bottom_int",
      "width_int",
      "height_int"
    ],
    "name": "Mask Crop Region",
    "display_name": "Mask Crop Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Paste Region": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "crop_mask": [
          "MASK"
        ],
        "crop_data": [
          "CROP_DATA"
        ],
        "crop_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_sharpening": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 3,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "crop_mask",
        "crop_data",
        "crop_blending",
        "crop_sharpening"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "RESULT_MASK",
      "CROP_MASK"
    ],
    "name": "Mask Paste Region",
    "display_name": "Mask Paste Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dilate Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dilate Region",
    "display_name": "Mask Dilate Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Dominant Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Dominant Region",
    "display_name": "Mask Dominant Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Erode Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "iterations"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Erode Region",
    "display_name": "Mask Erode Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Fill Holes": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Fill Holes",
    "display_name": "Mask Fill Holes",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Floor Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Floor Region",
    "display_name": "Mask Floor Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Gaussian Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "radius": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 1024,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "radius"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Gaussian Region",
    "display_name": "Mask Gaussian Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Invert": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Invert",
    "display_name": "Mask Invert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Minority Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Minority Region",
    "display_name": "Mask Minority Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area",
    "display_name": "Mask Rect Area",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Rect Area (Advanced)": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ],
        "image_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "blur_radius": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "image_width",
        "image_height",
        "blur_radius"
      ],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Rect Area (Advanced)",
    "display_name": "Mask Rect Area (Advanced)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Smooth Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 128.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "sigma"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Smooth Region",
    "display_name": "Mask Smooth Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Mask Threshold Region": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ],
        "black_threshold": [
          "INT",
          {
            "default": 75,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "white_threshold": [
          "INT",
          {
            "default": 175,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "masks",
        "black_threshold",
        "white_threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASKS"
    ],
    "name": "Mask Threshold Region",
    "display_name": "Mask Threshold Region",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Regions": {
    "input": {
      "required": {
        "mask_a": [
          "MASK"
        ],
        "mask_b": [
          "MASK"
        ]
      },
      "optional": {
        "mask_c": [
          "MASK"
        ],
        "mask_d": [
          "MASK"
        ],
        "mask_e": [
          "MASK"
        ],
        "mask_f": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_a",
        "mask_b"
      ],
      "optional": [
        "mask_c",
        "mask_d",
        "mask_e",
        "mask_f"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Regions",
    "display_name": "Masks Combine Regions",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Masks Combine Batch": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Masks Combine Batch",
    "display_name": "Masks Combine Batch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "MiDaS Model Loader": {
    "input": {
      "required": {
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "midas_model"
      ]
    },
    "output": [
      "MIDAS_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "midas_model"
    ],
    "name": "MiDaS Model Loader",
    "display_name": "MiDaS Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "MiDaS Depth Approximation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_type": [
          [
            "DPT_Large",
            "DPT_Hybrid"
          ]
        ],
        "invert_depth": [
          [
            "false",
            "true"
          ]
        ]
      },
      "optional": {
        "midas_model": [
          "MIDAS_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_type",
        "invert_depth"
      ],
      "optional": [
        "midas_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "MiDaS Depth Approximation",
    "display_name": "MiDaS Depth Approximation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "MiDaS Mask Image": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "use_cpu": [
          [
            "false",
            "true"
          ]
        ],
        "midas_model": [
          [
            "DPT_Large",
            "DPT_Hybrid",
            "DPT_Small"
          ]
        ],
        "remove": [
          [
            "background",
            "foregroud"
          ]
        ],
        "threshold": [
          [
            "false",
            "true"
          ]
        ],
        "threshold_low": [
          "FLOAT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_mid": [
          "FLOAT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold_high": [
          "FLOAT",
          {
            "default": 210,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "smoothing": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "background_red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "background_blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "use_cpu",
        "midas_model",
        "remove",
        "threshold",
        "threshold_low",
        "threshold_mid",
        "threshold_high",
        "smoothing",
        "background_red",
        "background_green",
        "background_blue"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "RESULT",
      "DEPTH"
    ],
    "name": "MiDaS Mask Image",
    "display_name": "MiDaS Mask Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/AI",
    "output_node": false
  },
  "Model Input Switch": {
    "input": {
      "required": {
        "model_a": [
          "MODEL"
        ],
        "model_b": [
          "MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_a",
        "model_b",
        "boolean"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Model Input Switch",
    "display_name": "Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Counter": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float"
          ]
        ],
        "mode": [
          [
            "increment",
            "decrement",
            "increment_to_stop",
            "decrement_to_stop"
          ]
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "stop": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 99999,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "reset_bool": [
          "NUMBER"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "mode",
        "start",
        "stop",
        "step"
      ],
      "optional": [
        "reset_bool"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "number",
      "float",
      "int"
    ],
    "name": "Number Counter",
    "display_name": "Number Counter",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number Operation": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "operation": [
          [
            "addition",
            "subtraction",
            "division",
            "floor division",
            "multiplication",
            "exponentiation",
            "modulus",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "operation"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Operation",
    "display_name": "Number Operation",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Float": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "Number to Float",
    "display_name": "Number to Float",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number Input Switch": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "boolean"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Switch",
    "display_name": "Number Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Input Condition": {
    "input": {
      "required": {
        "number_a": [
          "NUMBER"
        ],
        "number_b": [
          "NUMBER"
        ],
        "return_boolean": [
          [
            "false",
            "true"
          ]
        ],
        "comparison": [
          [
            "and",
            "or",
            "greater-than",
            "greater-than or equals",
            "less-than",
            "less-than or equals",
            "equals",
            "does not equal",
            "divisible by",
            "if A odd",
            "if A even",
            "if A prime",
            "factor of"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "number_a",
        "number_b",
        "return_boolean",
        "comparison"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Input Condition",
    "display_name": "Number Input Condition",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Number Multiple Of": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ],
        "multiple": [
          "INT",
          {
            "default": 8,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "multiple"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Number Multiple Of",
    "display_name": "Number Multiple Of",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Functions",
    "output_node": false
  },
  "Number PI": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NUMBER",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT"
    ],
    "name": "Number PI",
    "display_name": "Number PI",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Number to Int": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Number to Int",
    "display_name": "Number to Int",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Seed": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "SEED"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEED"
    ],
    "name": "Number to Seed",
    "display_name": "Number to Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to String": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Number to String",
    "display_name": "Number to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Number to Text": {
    "input": {
      "required": {
        "number": [
          "NUMBER"
        ]
      }
    },
    "input_order": {
      "required": [
        "number"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Number to Text",
    "display_name": "Number to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number/Operations",
    "output_node": false
  },
  "Boolean To Text": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Boolean To Text",
    "display_name": "Boolean To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Prompt Styles Selector": {
    "input": {
      "required": {
        "style": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Styles Selector",
    "display_name": "Prompt Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Prompt Multiple Styles Selector": {
    "input": {
      "required": {
        "style1": [
          [
            "None"
          ]
        ],
        "style2": [
          [
            "None"
          ]
        ],
        "style3": [
          [
            "None"
          ]
        ],
        "style4": [
          [
            "None"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style1",
        "style2",
        "style3",
        "style4"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive_string",
      "negative_string"
    ],
    "name": "Prompt Multiple Styles Selector",
    "display_name": "Prompt Multiple Styles Selector",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Random Number": {
    "input": {
      "required": {
        "number_type": [
          [
            "integer",
            "float",
            "bool"
          ]
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_type",
        "minimum",
        "maximum",
        "seed"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "Random Number",
    "display_name": "Random Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Save Text File": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "path": [
          "STRING",
          {
            "default": "./ComfyUI/output/[time(%Y-%m-%d)]",
            "multiline": false
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "filename_delimiter": [
          "STRING",
          {
            "default": "_"
          }
        ],
        "filename_number_padding": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "file_extension": [
          "STRING",
          {
            "default": ".txt"
          }
        ],
        "encoding": [
          "STRING",
          {
            "default": "utf-8"
          }
        ],
        "filename_suffix": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "path",
        "filename_prefix",
        "filename_delimiter",
        "filename_number_padding"
      ],
      "optional": [
        "file_extension",
        "encoding",
        "filename_suffix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Text File",
    "display_name": "Save Text File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/IO",
    "output_node": true
  },
  "Seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "SEED",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "seed",
      "number",
      "float",
      "int"
    ],
    "name": "Seed",
    "display_name": "Seed",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "Tensor Batch to Image": {
    "input": {
      "required": {
        "images_batch": [
          "IMAGE"
        ],
        "batch_image_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_batch",
        "batch_image_number"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Tensor Batch to Image",
    "display_name": "Tensor Batch to Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Latent/Transform",
    "output_node": false
  },
  "BLIP Analyze Image": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "caption",
            "interrogate"
          ]
        ],
        "question": [
          "STRING",
          {
            "default": "What does the background consist of?",
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "blip_model": [
          "BLIP_MODEL"
        ]
      },
      "optional": {
        "min_length": [
          "INT",
          {
            "min": 1,
            "max": 1024,
            "default": 24
          }
        ],
        "max_length": [
          "INT",
          {
            "min": 2,
            "max": 1024,
            "default": 64
          }
        ],
        "num_beams": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 5
          }
        ],
        "no_repeat_ngram_size": [
          "INT",
          {
            "min": 1,
            "max": 12,
            "default": 3
          }
        ],
        "early_stopping": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode",
        "question",
        "blip_model"
      ],
      "optional": [
        "min_length",
        "max_length",
        "num_beams",
        "no_repeat_ngram_size",
        "early_stopping"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "FULL_CAPTIONS",
      "CAPTIONS"
    ],
    "name": "BLIP Analyze Image",
    "display_name": "BLIP Analyze Image",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/AI",
    "output_node": false
  },
  "SAM Model Loader": {
    "input": {
      "required": {
        "model_size": [
          [
            "ViT-H",
            "ViT-L",
            "ViT-B"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_size"
      ]
    },
    "output": [
      "SAM_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_MODEL"
    ],
    "name": "SAM Model Loader",
    "display_name": "SAM Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters": {
    "input": {
      "required": {
        "points": [
          "STRING",
          {
            "default": "[128, 128]; [0, 0]",
            "multiline": false
          }
        ],
        "labels": [
          "STRING",
          {
            "default": "[1, 0]",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "points",
        "labels"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters",
    "display_name": "SAM Parameters",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Parameters Combine": {
    "input": {
      "required": {
        "sam_parameters_a": [
          "SAM_PARAMETERS"
        ],
        "sam_parameters_b": [
          "SAM_PARAMETERS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_parameters_a",
        "sam_parameters_b"
      ]
    },
    "output": [
      "SAM_PARAMETERS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_PARAMETERS"
    ],
    "name": "SAM Parameters Combine",
    "display_name": "SAM Parameters Combine",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "SAM Image Mask": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL"
        ],
        "sam_parameters": [
          "SAM_PARAMETERS"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "sam_parameters",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SAM Image Mask",
    "display_name": "SAM Image Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Masking",
    "output_node": false
  },
  "Samples Passthrough (Stat System)": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "samples"
    ],
    "name": "Samples Passthrough (Stat System)",
    "display_name": "Samples Passthrough (Stat System)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": false
  },
  "String to Text": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "String to Text",
    "display_name": "String to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Image Bounds": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds",
    "display_name": "Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Inset Image Bounds": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "inset_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "inset_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "inset_left",
        "inset_right",
        "inset_top",
        "inset_bottom"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Inset Image Bounds",
    "display_name": "Inset Image Bounds",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend",
    "display_name": "Bounded Image Blend",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Blend with Mask": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "target_mask": [
          "MASK"
        ],
        "target_bounds": [
          "IMAGE_BOUNDS"
        ],
        "source": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "target_mask",
        "target_bounds",
        "source",
        "blend_factor",
        "feathering"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Blend with Mask",
    "display_name": "Bounded Image Blend with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_bounds": [
          "IMAGE_BOUNDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_bounds"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bounded Image Crop",
    "display_name": "Bounded Image Crop",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Bounded Image Crop with Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "padding_left": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_right": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_top": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "padding_bottom": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "return_list": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "padding_left",
        "padding_right",
        "padding_top",
        "padding_bottom"
      ],
      "optional": [
        "return_list"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "IMAGE_BOUNDS"
    ],
    "name": "Bounded Image Crop with Mask",
    "display_name": "Bounded Image Crop with Mask",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Image/Bound",
    "output_node": false
  },
  "Image Bounds to Console": {
    "input": {
      "required": {
        "image_bounds": [
          "IMAGE_BOUNDS"
        ],
        "label": [
          "STRING",
          {
            "default": "Debug to Console",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_bounds",
        "label"
      ]
    },
    "output": [
      "IMAGE_BOUNDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE_BOUNDS"
    ],
    "name": "Image Bounds to Console",
    "display_name": "Image Bounds to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text Dictionary Update": {
    "input": {
      "required": {
        "dictionary_a": [
          "DICT"
        ],
        "dictionary_b": [
          "DICT"
        ]
      },
      "optional": {
        "dictionary_c": [
          "DICT"
        ],
        "dictionary_d": [
          "DICT"
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_a",
        "dictionary_b"
      ],
      "optional": [
        "dictionary_c",
        "dictionary_d"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Update",
    "display_name": "Text Dictionary Update",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Get": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ],
        "key": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "default_value": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary",
        "key"
      ],
      "optional": [
        "default_value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary Get",
    "display_name": "Text Dictionary Get",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Convert": {
    "input": {
      "required": {
        "dictionary_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dictionary_text"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary Convert",
    "display_name": "Text Dictionary Convert",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary New": {
    "input": {
      "required": {
        "key_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "key_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "key_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "value_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "key_1",
        "value_1"
      ],
      "optional": [
        "key_2",
        "value_2",
        "key_3",
        "value_3",
        "key_4",
        "value_4",
        "key_5",
        "value_5"
      ]
    },
    "output": [
      "DICT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DICT"
    ],
    "name": "Text Dictionary New",
    "display_name": "Text Dictionary New",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary Keys": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text Dictionary Keys",
    "display_name": "Text Dictionary Keys",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Dictionary To Text": {
    "input": {
      "required": {
        "dictionary": [
          "DICT"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "dictionary"
      ],
      "optional": []
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Dictionary To Text",
    "display_name": "Text Dictionary To Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Add Tokens": {
    "input": {
      "required": {
        "tokens": [
          "STRING",
          {
            "default": "[hello]: world",
            "multiline": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "tokens",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Tokens",
    "display_name": "Text Add Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Add Token by Input": {
    "input": {
      "required": {
        "token_name": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "token_value": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "print_current_tokens": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "token_name",
        "token_value",
        "print_current_tokens"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Text Add Token by Input",
    "display_name": "Text Add Token by Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": true
  },
  "Text Compare": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mode": [
          [
            "similarity",
            "difference"
          ]
        ],
        "tolerance": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "mode",
        "tolerance"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "BOOLEAN",
      "NUMBER",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT_A_PASS",
      "TEXT_B_PASS",
      "BOOLEAN",
      "SCORE_NUMBER",
      "COMPARISON_TEXT"
    ],
    "name": "Text Compare",
    "display_name": "Text Compare",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Concatenate": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "clean_whitespace": [
          [
            "true",
            "false"
          ]
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "clean_whitespace"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Concatenate",
    "display_name": "Text Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text File History Loader": {
    "input": {
      "required": {
        "file": [
          [
            "No History"
          ]
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file",
        "dictionary_name"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "DICT"
    ],
    "name": "Text File History Loader",
    "display_name": "Text File History Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/History",
    "output_node": false
  },
  "Text Find and Replace by Dictionary": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "dictionary": [
          "DICT"
        ],
        "replacement_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "dictionary",
        "replacement_key",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Find and Replace by Dictionary",
    "display_name": "Text Find and Replace by Dictionary",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace Input": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "replace": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace Input",
    "display_name": "Text Find and Replace Input",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find and Replace": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "find": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "find",
        "replace"
      ]
    },
    "output": [
      "STRING",
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "result_text",
      "replacement_count_number",
      "replacement_count_float",
      "replacement_count_int"
    ],
    "name": "Text Find and Replace",
    "display_name": "Text Find and Replace",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Find": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "substring": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "substring",
        "pattern"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "found"
    ],
    "name": "Text Find",
    "display_name": "Text Find",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Search",
    "output_node": false
  },
  "Text Input Switch": {
    "input": {
      "required": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_a",
        "text_b",
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Input Switch",
    "display_name": "Text Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text List": {
    "input": {
      "required": {},
      "optional": {
        "text_a": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_e": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_f": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_g": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text_a",
        "text_b",
        "text_c",
        "text_d",
        "text_e",
        "text_f",
        "text_g"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text List",
    "display_name": "Text List",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List Concatenate": {
    "input": {
      "required": {},
      "optional": {
        "list_a": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_b": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_c": [
          "LIST",
          {
            "forceInput": true
          }
        ],
        "list_d": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "list_a",
        "list_b",
        "list_c",
        "list_d"
      ]
    },
    "output": [
      "LIST"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LIST"
    ],
    "name": "Text List Concatenate",
    "display_name": "Text List Concatenate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text List to Text": {
    "input": {
      "required": {
        "delimiter": [
          "STRING",
          {
            "default": ", "
          }
        ],
        "text_list": [
          "LIST",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "delimiter",
        "text_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text List to Text",
    "display_name": "Text List to Text",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Load Line From File": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "dictionary_name": [
          "STRING",
          {
            "default": "[filename]",
            "multiline": false
          }
        ],
        "label": [
          "STRING",
          {
            "default": "TextBatch",
            "multiline": false
          }
        ],
        "mode": [
          [
            "automatic",
            "index"
          ]
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ]
      },
      "optional": {
        "multiline_text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path",
        "dictionary_name",
        "label",
        "mode",
        "index"
      ],
      "optional": [
        "multiline_text"
      ]
    },
    "output": [
      "STRING",
      "DICT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "line_text",
      "dictionary"
    ],
    "name": "Text Load Line From File",
    "display_name": "Text Load Line From File",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline",
    "display_name": "Text Multiline",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Multiline (Code Compatible)": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Multiline (Code Compatible)",
    "display_name": "Text Multiline (Code Compatible)",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Parse A1111 Embeddings": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse A1111 Embeddings",
    "display_name": "Text Parse A1111 Embeddings",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": false
  },
  "Text Parse Noodle Soup Prompts": {
    "input": {
      "required": {
        "mode": [
          [
            "Noodle Soup Prompts",
            "Wildcards"
          ]
        ],
        "noodle_key": [
          "STRING",
          {
            "default": "__",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "noodle_key",
        "seed",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Noodle Soup Prompts",
    "display_name": "Text Parse Noodle Soup Prompts",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Parse",
    "output_node": true
  },
  "Text Parse Tokens": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Parse Tokens",
    "display_name": "Text Parse Tokens",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Tokens",
    "output_node": false
  },
  "Text Random Line": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Line",
    "display_name": "Text Random Line",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Random Prompt": {
    "input": {
      "required": {
        "search_seed": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "search_seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Random Prompt",
    "display_name": "Text Random Prompt",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "text_d": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String",
    "display_name": "Text String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text",
    "output_node": false
  },
  "Text Contains": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "sub_text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "case_insensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "sub_text"
      ],
      "optional": [
        "case_insensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "Text Contains",
    "display_name": "Text Contains",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Text Shuffle": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Shuffle",
    "display_name": "Text Shuffle",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text Sort": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ", ",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text Sort",
    "display_name": "Text Sort",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Conditioning": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "Text to Conditioning",
    "display_name": "Text to Conditioning",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to Console": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "label": [
          "STRING",
          {
            "default": "Text Output",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "label"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text to Console",
    "display_name": "Text to Console",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Debug",
    "output_node": true
  },
  "Text to Number": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "NUMBER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NUMBER"
    ],
    "name": "Text to Number",
    "display_name": "Text to Number",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text to String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Text to String",
    "display_name": "Text to String",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "Text String Truncate": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "truncate_by": [
          [
            "characters",
            "words"
          ]
        ],
        "truncate_from": [
          [
            "end",
            "beginning"
          ]
        ],
        "truncate_to": [
          "INT",
          {
            "default": 10,
            "min": -99999999,
            "max": 99999999,
            "step": 1
          }
        ]
      },
      "optional": {
        "text_b": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_c": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_d": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "truncate_by",
        "truncate_from",
        "truncate_to"
      ],
      "optional": [
        "text_b",
        "text_c",
        "text_d"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "TEXT",
      "TEXT_B",
      "TEXT_C",
      "TEXT_D"
    ],
    "name": "Text String Truncate",
    "display_name": "Text String Truncate",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Text/Operations",
    "output_node": false
  },
  "True Random.org Number Generator": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "default": "00000000-0000-0000-0000-000000000000",
            "multiline": false
          }
        ],
        "minimum": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "maximum": [
          "FLOAT",
          {
            "default": 10000000,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "mode": [
          [
            "random",
            "fixed"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "minimum",
        "maximum",
        "mode"
      ]
    },
    "output": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "NUMBER",
      "FLOAT",
      "INT"
    ],
    "name": "True Random.org Number Generator",
    "display_name": "True Random.org Number Generator",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Number",
    "output_node": false
  },
  "unCLIP Checkpoint Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION",
      "NAME_STRING"
    ],
    "name": "unCLIP Checkpoint Loader",
    "display_name": "unCLIP Checkpoint Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Loader": {
    "input": {
      "required": {
        "model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "UPSCALE_MODEL",
      "MODEL_NAME_TEXT"
    ],
    "name": "Upscale Model Loader",
    "display_name": "Upscale Model Loader",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Loaders",
    "output_node": false
  },
  "Upscale Model Switch": {
    "input": {
      "required": {
        "upscale_model_a": [
          "UPSCALE_MODEL"
        ],
        "upscale_model_b": [
          "UPSCALE_MODEL"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model_a",
        "upscale_model_b",
        "boolean"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "Upscale Model Switch",
    "display_name": "Upscale Model Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Write to GIF": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 2,
            "max": 60,
            "step": 1
          }
        ],
        "image_delay_ms": [
          "FLOAT",
          {
            "default": 2500.0,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "duration_ms": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1280,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "/home/comfyui_sn/ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "morph_writer",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_ms",
        "duration_ms",
        "loops",
        "max_size",
        "output_path",
        "filename"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image_pass",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to GIF",
    "display_name": "Write to GIF",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "Write to Video": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "transition_frames": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 120,
            "step": 1
          }
        ],
        "image_delay_sec": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 0.1,
            "max": 60000.0,
            "step": 0.1
          }
        ],
        "fps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 60.0,
            "step": 1
          }
        ],
        "max_size": [
          "INT",
          {
            "default": 512,
            "min": 128,
            "max": 1920,
            "step": 1
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/output",
            "multiline": false
          }
        ],
        "filename": [
          "STRING",
          {
            "default": "comfy_writer",
            "multiline": false
          }
        ],
        "codec": [
          [
            "AVC1",
            "FFV1",
            "H264",
            "MP4V"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "transition_frames",
        "image_delay_sec",
        "fps",
        "max_size",
        "output_path",
        "filename",
        "codec"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE_PASS",
      "filepath_text",
      "filename_text"
    ],
    "name": "Write to Video",
    "display_name": "Write to Video",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation/Writer",
    "output_node": false
  },
  "VAE Input Switch": {
    "input": {
      "required": {
        "vae_a": [
          "VAE"
        ],
        "vae_b": [
          "VAE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_a",
        "vae_b",
        "boolean"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAE Input Switch",
    "display_name": "VAE Input Switch",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Logic",
    "output_node": false
  },
  "Video Dump Frames": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo.mp4",
            "multiline": false
          }
        ],
        "output_path": [
          "STRING",
          {
            "default": "./ComfyUI/input/MyVideo",
            "multiline": false
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": "frame_",
            "multiline": false
          }
        ],
        "filenumber_digits": [
          "INT",
          {
            "default": 4,
            "min": -1,
            "max": 8,
            "step": 1
          }
        ],
        "extension": [
          [
            "png",
            "jpg",
            "gif",
            "tiff"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path",
        "output_path",
        "prefix",
        "filenumber_digits",
        "extension"
      ]
    },
    "output": [
      "STRING",
      "NUMBER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output_path",
      "processed_count"
    ],
    "name": "Video Dump Frames",
    "display_name": "Video Dump Frames",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "WAS Suite/Animation",
    "output_node": false
  },
  "CLIPSEG2": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "use_cuda": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "clipseg_model": [
          "CLIPSEG_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "use_cuda"
      ],
      "optional": [
        "clipseg_model"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CLIPSEG2",
    "display_name": "CLIPSEG2",
    "description": "",
    "python_module": "custom_nodes.was-node-suite-comfyui",
    "category": "image/transformation",
    "output_node": false
  },
  "SaveImageWebsocket": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWebsocket",
    "display_name": "SaveImageWebsocket",
    "description": "",
    "python_module": "custom_nodes.websocket_image_save",
    "category": "api/image",
    "output_node": true
  },
  "CR Image Output": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "output_type": [
          [
            "Preview",
            "Save",
            "UI (no batch)"
          ]
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "CR"
          }
        ],
        "prefix_presets": [
          [
            "None",
            "yyyyMMdd"
          ]
        ],
        "file_format": [
          [
            "png",
            "jpg",
            "webp",
            "tif"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      },
      "optional": {
        "trigger": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "output_type",
        "filename_prefix",
        "prefix_presets",
        "file_format"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ],
      "optional": [
        "trigger"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "trigger"
    ],
    "name": "CR Image Output",
    "display_name": "💾 CR Image Output",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": true
  },
  "CR Latent Batch Size": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "CR Latent Batch Size",
    "display_name": "⚙️ CR Latent Batch Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": false
  },
  "CR Conditioning Mixer": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ],
        "mix_method": [
          [
            "Combine",
            "Average",
            "Concatenate"
          ]
        ],
        "average_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2",
        "mix_method",
        "average_strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Conditioning Mixer",
    "display_name": "⚙️ CR Conditioning Mixer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": false
  },
  "CR Select Model": {
    "input": {
      "required": {
        "ckpt_name1": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "ckpt_name2": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "ckpt_name3": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "ckpt_name4": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "ckpt_name5": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "select_model": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 5
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name1",
        "ckpt_name2",
        "ckpt_name3",
        "ckpt_name4",
        "ckpt_name5",
        "select_model"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "ckpt_name",
      "show_help"
    ],
    "name": "CR Select Model",
    "display_name": "🔮 CR Select Model",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": false
  },
  "CR Seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "seed",
      "show_help"
    ],
    "name": "CR Seed",
    "display_name": "🌱 CR Seed",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": true
  },
  "CR Prompt Text": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "default": "prompt",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "prompt",
      "show_help"
    ],
    "name": "CR Prompt Text",
    "display_name": "⚙️ CR Prompt Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": false
  },
  "CR Combine Prompt": {
    "input": {
      "required": {},
      "optional": {
        "part1": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "part2": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "part3": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "part4": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "separator": [
          "STRING",
          {
            "default": ",",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "part1",
        "part2",
        "part3",
        "part4",
        "separator"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "prompt",
      "show_help"
    ],
    "name": "CR Combine Prompt",
    "display_name": "⚙️ CR Combine Prompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": false
  },
  "CR VAE Decode": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "circular": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tiled",
        "circular"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR VAE Decode",
    "display_name": "⚙️ CR VAE Decode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📦 Core",
    "output_node": false
  },
  "CR Text List": {
    "input": {
      "required": {
        "multiline_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiline_text",
        "start_index",
        "max_rows"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text List",
    "display_name": "📜 CR Text List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Prompt List": {
    "input": {
      "required": {
        "prepend_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "multiline_text": [
          "STRING",
          {
            "multiline": true,
            "default": "body_text"
          }
        ],
        "append_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prepend_text",
        "multiline_text",
        "append_text",
        "start_index",
        "max_rows"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "prompt",
      "body_text",
      "show_help"
    ],
    "name": "CR Prompt List",
    "display_name": "📜 CR Prompt List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Simple List": {
    "input": {
      "required": {
        "list_values": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list_values"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "LIST",
      "show_help"
    ],
    "name": "CR Simple List",
    "display_name": "📜 CR Simple List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Float Range List": {
    "input": {
      "required": {
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -99999.99,
            "max": 99999.99,
            "step": 0.01
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -99999.99,
            "max": 99999.99,
            "step": 0.01
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -99999.99,
            "max": 99999.99,
            "step": 0.01
          }
        ],
        "operation": [
          [
            "none",
            "sin",
            "cos",
            "tan"
          ]
        ],
        "decimal_places": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10
          }
        ],
        "ignore_first_value": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "max_values_per_loop": [
          "INT",
          {
            "default": 128,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999
          }
        ],
        "ping_pong": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start",
        "end",
        "step",
        "operation",
        "decimal_places",
        "ignore_first_value",
        "max_values_per_loop",
        "loops",
        "ping_pong"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "FLOAT",
      "show_help"
    ],
    "name": "CR Float Range List",
    "display_name": "📜 CR Float Range List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Integer Range List": {
    "input": {
      "required": {
        "start": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "max": 99999
          }
        ],
        "end": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "max": 99999
          }
        ],
        "step": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999
          }
        ],
        "ping_pong": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start",
        "end",
        "step",
        "loops",
        "ping_pong"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Integer Range List",
    "display_name": "📜 CR Integer Range List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Load Text List": {
    "input": {
      "required": {
        "input_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input_file_path",
        "file_name",
        "file_extension"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Load Text List",
    "display_name": "📜 CR Load Text List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Binary To Bit List": {
    "input": {
      "required": {
        "bit_string": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bit_string"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Binary To Bit List",
    "display_name": "📜 CR Binary To Bit List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Text Cycler": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "repeats",
        "loops"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_text"
    ],
    "name": "CR Text Cycler",
    "display_name": "📜 CR Text Cycler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Value Cycler": {
    "input": {
      "required": {
        "values": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "values",
        "repeats",
        "loops"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT",
      "show_text"
    ],
    "name": "CR Value Cycler",
    "display_name": "📜 CR Value Cycler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List",
    "output_node": false
  },
  "CR Load Image List": {
    "input": {
      "required": {
        "input_folder": [
          [
            "3d",
            "Bjornulf",
            "flux.1_d",
            "flux.1_s",
            "lora_flux.1_d",
            "lora_hunyuan_video",
            "lora_pony",
            "lora_sd_1.5",
            "lora_sdxl_1.0",
            "pony",
            "sd_1.5",
            "sdxl_1.0"
          ]
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "start_index",
        "max_images"
      ],
      "optional": [
        "input_path"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Load Image List",
    "display_name": "⌨️ CR Load Image List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    "output_node": false
  },
  "CR Load Image List Plus": {
    "input": {
      "required": {
        "input_folder": [
          [
            "3d",
            "Bjornulf",
            "flux.1_d",
            "flux.1_s",
            "lora_flux.1_d",
            "lora_hunyuan_video",
            "lora_pony",
            "lora_sd_1.5",
            "lora_sdxl_1.0",
            "pony",
            "sd_1.5",
            "sdxl_1.0"
          ]
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999
          }
        ],
        "max_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "start_index",
        "max_images"
      ],
      "optional": [
        "input_path"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "STRING",
      "INT",
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      true,
      true,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "index",
      "filename",
      "width",
      "height",
      "list_length",
      "show_help"
    ],
    "name": "CR Load Image List Plus",
    "display_name": "⌨️ CR Load Image List Plus",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    "output_node": false
  },
  "CR Load GIF As List": {
    "input": {
      "required": {
        "input_folder": [
          [
            "3d",
            "Bjornulf",
            "flux.1_d",
            "flux.1_s",
            "lora_flux.1_d",
            "lora_hunyuan_video",
            "lora_pony",
            "lora_sd_1.5",
            "lora_sdxl_1.0",
            "pony",
            "sd_1.5",
            "sdxl_1.0"
          ]
        ],
        "gif_filename": [
          "STRING",
          {
            "multiline": false,
            "default": "text"
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999
          }
        ],
        "max_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "gif_filename",
        "start_frame",
        "max_frames"
      ],
      "optional": [
        "input_path"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "show_help"
    ],
    "name": "CR Load GIF As List",
    "display_name": "⌨️ CR Load GIF As List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    "output_node": false
  },
  "CR Font File List": {
    "input": {
      "required": {
        "source_folder": [
          [
            "system",
            "Comfyroll",
            "from folder"
          ]
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      },
      "optional": {
        "folder_path": [
          "STRING",
          {
            "default": "C:\\Windows\\Fonts",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source_folder",
        "start_index",
        "max_rows"
      ],
      "optional": [
        "folder_path"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "LIST",
      "show_help"
    ],
    "name": "CR Font File List",
    "display_name": "⌨️ CR Font File List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/⌨️ IO",
    "output_node": false
  },
  "CR Batch Images From List": {
    "input": {
      "required": {
        "image_list": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_list"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image_batch",
      "show_help"
    ],
    "name": "CR Batch Images From List",
    "display_name": "🛠️ CR Batch Images From List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    "output_node": false
  },
  "CR Intertwine Lists": {
    "input": {
      "required": {
        "list1": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ],
        "list2": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list1",
        "list2"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Intertwine Lists",
    "display_name": "🛠️ CR Intertwine Lists",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    "output_node": false
  },
  "CR Repeater": {
    "input": {
      "required": {
        "input_data": [
          "*"
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_data",
        "repeats"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "list",
      "show_help"
    ],
    "name": "CR Repeater",
    "display_name": "🛠️ CR Repeater",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    "output_node": false
  },
  "CR XY Product": {
    "input": {
      "required": {
        "text_x": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "text_y": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_x",
        "text_y"
      ]
    },
    "output": [
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      false
    ],
    "output_name": [
      "x_values",
      "y_values",
      "show_help"
    ],
    "name": "CR XY Product",
    "display_name": "🛠️ CR XY Product",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    "output_node": false
  },
  "CR Text List To String": {
    "input": {
      "required": {
        "text_list": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_list"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text List To String",
    "display_name": "🛠️ CR Text List To String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📜 List/🛠️ Utils",
    "output_node": false
  },
  "CR SD1.5 Aspect Ratio": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "1:1 square 512x512",
            "1:1 square 1024x1024",
            "2:3 portrait 512x768",
            "3:4 portrait 512x682",
            "3:2 landscape 768x512",
            "4:3 landscape 682x512",
            "16:9 cinema 910x512",
            "1.85:1 cinema 952x512",
            "2:1 cinema 1024x512",
            "2.39:1 anamorphic 1224x512"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR SD1.5 Aspect Ratio",
    "display_name": "🔳 CR SD1.5 Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    "output_node": false
  },
  "CR SDXL Aspect Ratio": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "1:1 square 1024x1024",
            "3:4 portrait 896x1152",
            "5:8 portrait 832x1216",
            "9:16 portrait 768x1344",
            "9:21 portrait 640x1536",
            "4:3 landscape 1152x896",
            "3:2 landscape 1216x832",
            "16:9 landscape 1344x768",
            "21:9 landscape 1536x640"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR SDXL Aspect Ratio",
    "display_name": "🔳 CR SDXL Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    "output_node": false
  },
  "CR Aspect Ratio": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "SD1.5 - 1:1 square 512x512",
            "SD1.5 - 2:3 portrait 512x768",
            "SD1.5 - 3:4 portrait 512x682",
            "SD1.5 - 3:2 landscape 768x512",
            "SD1.5 - 4:3 landscape 682x512",
            "SD1.5 - 16:9 cinema 910x512",
            "SD1.5 - 1.85:1 cinema 952x512",
            "SD1.5 - 2:1 cinema 1024x512",
            "SDXL - 1:1 square 1024x1024",
            "SDXL - 3:4 portrait 896x1152",
            "SDXL - 5:8 portrait 832x1216",
            "SDXL - 9:16 portrait 768x1344",
            "SDXL - 9:21 portrait 640x1536",
            "SDXL - 4:3 landscape 1152x896",
            "SDXL - 3:2 landscape 1216x832",
            "SDXL - 16:9 landscape 1344x768",
            "SDXL - 21:9 landscape 1536x640"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR Aspect Ratio",
    "display_name": "🔳 CR Aspect Ratio",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    "output_node": false
  },
  "CR Aspect Ratio Banners": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "Large Rectangle - 336x280",
            "Medium Rectangle - 300x250",
            "Small Rectangle - 180x150",
            "Square - 250x250",
            "Small Square - 200x200",
            "Button - 125x125",
            "Half Page - 300x600",
            "Vertical Banner - 120x240",
            "Wide Skyscraper - 160x600",
            "Skyscraper - 120x600",
            "Billboard - 970x250",
            "Portrait - 300x1050",
            "Banner - 468x60",
            "Leaderboard - 728x90"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR Aspect Ratio Banners",
    "display_name": "🔳 CR Aspect Ratio Banners",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    "output_node": false
  },
  "CR Aspect Ratio Social Media": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "Instagram Portrait - 1080x1350",
            "Instagram Square - 1080x1080",
            "Instagram Landscape - 1080x608",
            "Instagram Stories/Reels - 1080x1920",
            "Facebook Landscape - 1080x1350",
            "Facebook Marketplace - 1200x1200",
            "Facebook Stories - 1080x1920",
            "TikTok - 1080x1920",
            "YouTube Banner - 2560×1440",
            "LinkedIn Profile Banner - 1584x396",
            "LinkedIn Page Cover - 1128x191",
            "LinkedIn Post - 1200x627",
            "Pinterest Pin Image - 1000x1500",
            "CivitAI Cover - 1600x400",
            "OpenArt App - 1500x1000"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR Aspect Ratio Social Media",
    "display_name": "🔳 CR Aspect Ratio Social Media",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    "output_node": false
  },
  "CR_Aspect Ratio For Print": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 8192
          }
        ],
        "aspect_ratio": [
          [
            "A4 - 2480x3508",
            "A5 - 1748x2480",
            "A6 - 1240x1748",
            "A7 - 874x1240",
            "A8 - 614x874",
            "A9 - 437x614",
            "A10 - 307x437",
            "B4 - 2953x4169",
            "B5 - 2079x2953",
            "B6 - 1476x2079",
            "B7 - 1039x1476",
            "B8 - 732x1039",
            "B9 - 520x732",
            "B10 - 366x520",
            "C4 - 2705x3827",
            "C5 - 1913x2705",
            "C6 - 1346x1913",
            "C7 - 957x1346",
            "C8 - 673x957",
            "C9 - 472x673",
            "C10 - 331x472",
            "Letter (8.5 x 11 inches) - 2550x3300",
            "Legal (8.5 x 14 inches) - 2550x4200"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor",
        "prescale_factor",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "upscale_factor",
      "prescale_factor",
      "batch_size",
      "empty_latent",
      "show_help"
    ],
    "name": "CR_Aspect Ratio For Print",
    "display_name": "🔳 CR_Aspect Ratio For Print",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔳 Aspect Ratio",
    "output_node": false
  },
  "CR Image Size": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "upscale_factor"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "Width",
      "Height",
      "upscale_factor",
      "show_help"
    ],
    "name": "CR Image Size",
    "display_name": "CR Image Size (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    "output_node": false
  },
  "CR Aspect Ratio SDXL": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 2048
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 2048
          }
        ],
        "aspect_ratio": [
          [
            "custom",
            "1:1 square 1024x1024",
            "3:4 portrait 896x1152",
            "5:8 portrait 832x1216",
            "9:16 portrait 768x1344",
            "9:21 portrait 640x1536",
            "4:3 landscape 1152x896",
            "3:2 landscape 1216x832",
            "16:9 landscape 1344x768",
            "21:9 landscape 1536x640"
          ]
        ],
        "swap_dimensions": [
          [
            "Off",
            "On"
          ]
        ],
        "upscale_factor1": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ],
        "upscale_factor2": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "aspect_ratio",
        "swap_dimensions",
        "upscale_factor1",
        "upscale_factor2",
        "batch_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT",
      "INT",
      "show_help"
    ],
    "name": "CR Aspect Ratio SDXL",
    "display_name": "CR Aspect Ratio SDXL (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    "output_node": false
  },
  "CR SDXL Prompt Mixer": {
    "input": {
      "required": {},
      "optional": {
        "prompt_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "BASE_POSITIVE"
          }
        ],
        "prompt_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "BASE_NEGATIVE"
          }
        ],
        "style_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "REFINER_POSTIVE"
          }
        ],
        "style_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "REFINER_NEGATIVE"
          }
        ],
        "preset": [
          [
            "preset 1",
            "preset 2",
            "preset 3",
            "preset 4",
            "preset 5"
          ]
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "prompt_positive",
        "prompt_negative",
        "style_positive",
        "style_negative",
        "preset"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pos_g",
      "pos_l",
      "pos_r",
      "neg_g",
      "neg_l",
      "neg_r"
    ],
    "name": "CR SDXL Prompt Mixer",
    "display_name": "CR SDXL Prompt Mixer (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    "output_node": false
  },
  "CR Seed to Int": {
    "input": {
      "required": {
        "seed": [
          "SEED"
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Seed to Int",
    "display_name": "CR Seed to Int (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💀 Legacy",
    "output_node": false
  },
  "CR Apply ControlNet": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "switch": [
          [
            "On",
            "Off"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "switch",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Apply ControlNet",
    "display_name": "🕹️ CR Apply ControlNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🕹️ ControlNet",
    "output_node": false
  },
  "CR Multi-ControlNet Stack": {
    "input": {
      "required": {},
      "optional": {
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_1": [
          [
            "None",
            "SDXL/instantid/diffusion_pytorch_model.safetensors"
          ]
        ],
        "controlnet_strength_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_1": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_2": [
          [
            "None",
            "SDXL/instantid/diffusion_pytorch_model.safetensors"
          ]
        ],
        "controlnet_strength_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_2": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_3": [
          [
            "None",
            "SDXL/instantid/diffusion_pytorch_model.safetensors"
          ]
        ],
        "controlnet_strength_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_3": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "switch_1",
        "controlnet_1",
        "controlnet_strength_1",
        "start_percent_1",
        "end_percent_1",
        "switch_2",
        "controlnet_2",
        "controlnet_strength_2",
        "start_percent_2",
        "end_percent_2",
        "switch_3",
        "controlnet_3",
        "controlnet_strength_3",
        "start_percent_3",
        "end_percent_3",
        "image_1",
        "image_2",
        "image_3",
        "controlnet_stack"
      ]
    },
    "output": [
      "CONTROL_NET_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONTROLNET_STACK",
      "show_help"
    ],
    "name": "CR Multi-ControlNet Stack",
    "display_name": "🕹️ CR Multi-ControlNet Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🕹️ ControlNet",
    "output_node": false
  },
  "CR Apply Multi-ControlNet": {
    "input": {
      "required": {
        "base_positive": [
          "CONDITIONING"
        ],
        "base_negative": [
          "CONDITIONING"
        ],
        "switch": [
          [
            "Off",
            "On"
          ]
        ],
        "controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_positive",
        "base_negative",
        "switch",
        "controlnet_stack"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "base_pos",
      "base_neg",
      "show_help"
    ],
    "name": "CR Apply Multi-ControlNet",
    "display_name": "🕹️ CR Apply Multi-ControlNet",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🕹️ ControlNet",
    "output_node": false
  },
  "CR Load LoRA": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "switch": [
          [
            "On",
            "Off"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "switch",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Load LoRA",
    "display_name": "💊 CR Load LoRA",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    "output_node": false
  },
  "CR LoRA Stack": {
    "input": {
      "required": {
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_1": [
          [
            "None"
          ]
        ],
        "model_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_2": [
          [
            "None"
          ]
        ],
        "model_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_3": [
          [
            "None"
          ]
        ],
        "model_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "switch_1",
        "lora_name_1",
        "model_weight_1",
        "clip_weight_1",
        "switch_2",
        "lora_name_2",
        "model_weight_2",
        "clip_weight_2",
        "switch_3",
        "lora_name_3",
        "model_weight_3",
        "clip_weight_3"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LORA_STACK",
      "show_help"
    ],
    "name": "CR LoRA Stack",
    "display_name": "💊 CR LoRA Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    "output_node": false
  },
  "CR Random LoRA Stack": {
    "input": {
      "required": {
        "exclusive_mode": [
          [
            "Off",
            "On"
          ]
        ],
        "stride": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "force_randomize_after_stride": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name_1": [
          [
            "None"
          ]
        ],
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "chance_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "model_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None"
          ]
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "chance_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "model_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None"
          ]
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "chance_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "model_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "exclusive_mode",
        "stride",
        "force_randomize_after_stride",
        "lora_name_1",
        "switch_1",
        "chance_1",
        "model_weight_1",
        "clip_weight_1",
        "lora_name_2",
        "switch_2",
        "chance_2",
        "model_weight_2",
        "clip_weight_2",
        "lora_name_3",
        "switch_3",
        "chance_3",
        "model_weight_3",
        "clip_weight_3"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_STACK"
    ],
    "name": "CR Random LoRA Stack",
    "display_name": "💊 CR Random LoRA Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    "output_node": false
  },
  "CR Random Weight LoRA": {
    "input": {
      "required": {
        "stride": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "force_randomize_after_stride": [
          [
            "Off",
            "On"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "switch": [
          [
            "Off",
            "On"
          ]
        ],
        "weight_min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "weight_max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "stride",
        "force_randomize_after_stride",
        "lora_name",
        "switch",
        "weight_min",
        "weight_max",
        "clip_weight"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_STACK"
    ],
    "name": "CR Random Weight LoRA",
    "display_name": "💊 CR Random Weight LoRA",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    "output_node": false
  },
  "CR Apply LoRA Stack": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_stack"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Apply LoRA Stack",
    "display_name": "💊 CR Apply LoRA Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/💊 LoRA",
    "output_node": false
  },
  "CR Apply Model Merge": {
    "input": {
      "required": {
        "model_stack": [
          "MODEL_STACK"
        ],
        "merge_method": [
          [
            "Recursive",
            "Weighted"
          ]
        ],
        "normalise_ratios": [
          [
            "Yes",
            "No"
          ]
        ],
        "weight_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_stack",
        "merge_method",
        "normalise_ratios",
        "weight_factor"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "model_mix_info",
      "show_help"
    ],
    "name": "CR Apply Model Merge",
    "display_name": "⛏️ CR Apply Model Merge",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/⛏️ Model Merge",
    "output_node": false
  },
  "CR Model Merge Stack": {
    "input": {
      "required": {
        "switch_1": [
          [
            "Off",
            "On"
          ]
        ],
        "ckpt_name1": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "model_ratio1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "clip_ratio1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "switch_2": [
          [
            "Off",
            "On"
          ]
        ],
        "ckpt_name2": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "model_ratio2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "clip_ratio2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "switch_3": [
          [
            "Off",
            "On"
          ]
        ],
        "ckpt_name3": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "model_ratio3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "clip_ratio3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "model_stack": [
          "MODEL_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "switch_1",
        "ckpt_name1",
        "model_ratio1",
        "clip_ratio1",
        "switch_2",
        "ckpt_name2",
        "model_ratio2",
        "clip_ratio2",
        "switch_3",
        "ckpt_name3",
        "model_ratio3",
        "clip_ratio3"
      ],
      "optional": [
        "model_stack"
      ]
    },
    "output": [
      "MODEL_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL_STACK",
      "show_help"
    ],
    "name": "CR Model Merge Stack",
    "display_name": "⛏️ CR Model Merge Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/⛏️ Model Merge",
    "output_node": false
  },
  "CR Data Bus In": {
    "input": {
      "required": {},
      "optional": {
        "pipe": [
          "*"
        ],
        "any1": [
          "*"
        ],
        "any2": [
          "*"
        ],
        "any3": [
          "*"
        ],
        "any4": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "pipe",
        "any1",
        "any2",
        "any3",
        "any4"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Data Bus In",
    "display_name": "🚌 CR Data Bus In",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    "output_node": false
  },
  "CR Data Bus Out": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "*",
      "*",
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "any1",
      "any2",
      "any3",
      "any4",
      "show_help"
    ],
    "name": "CR Data Bus Out",
    "display_name": "🚌 CR Data Bus Out",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    "output_node": false
  },
  "CR 8 Channel In": {
    "input": {
      "required": {},
      "optional": {
        "pipe": [
          "*"
        ],
        "ch1": [
          "*"
        ],
        "ch2": [
          "*"
        ],
        "ch3": [
          "*"
        ],
        "ch4": [
          "*"
        ],
        "ch5": [
          "*"
        ],
        "ch6": [
          "*"
        ],
        "ch7": [
          "*"
        ],
        "ch8": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "pipe",
        "ch1",
        "ch2",
        "ch3",
        "ch4",
        "ch5",
        "ch6",
        "ch7",
        "ch8"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR 8 Channel In",
    "display_name": "🚌 CR 8 Channel In",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    "output_node": false
  },
  "CR 8 Channel Out": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "ch1",
      "ch2",
      "ch3",
      "ch4",
      "ch5",
      "ch6",
      "ch7",
      "ch8",
      "show_help"
    ],
    "name": "CR 8 Channel Out",
    "display_name": "🚌 CR 8 Channel Out",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🚌 Bus",
    "output_node": false
  },
  "CR Module Pipe Loader": {
    "input": {
      "required": {},
      "optional": {
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "controlnet": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "controlnet",
        "image",
        "seed"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Module Pipe Loader",
    "display_name": "✈️ CR Module Pipe Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/✈️ Module",
    "output_node": false
  },
  "CR Module Input": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "CONTROL_NET",
      "IMAGE",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "controlnet",
      "image",
      "seed",
      "show_help"
    ],
    "name": "CR Module Input",
    "display_name": "✈️ CR Module Input",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/✈️ Module",
    "output_node": false
  },
  "CR Module Output": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "controlnet": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "optional": [
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "controlnet",
        "image",
        "seed"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Module Output",
    "display_name": "✈️ CR Module Output",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/✈️ Module",
    "output_node": false
  },
  "CR Image Pipe In": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image",
        "width",
        "height",
        "upscale_factor"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Image Pipe In",
    "display_name": "🛩 CR Image Pipe In",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🛩️ Image",
    "output_node": false
  },
  "CR Image Pipe Edit": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "forceInput": true
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048,
            "forceInput": true
          }
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 2000,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "optional": [
        "image",
        "width",
        "height",
        "upscale_factor"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "show_help"
    ],
    "name": "CR Image Pipe Edit",
    "display_name": "🛩️ CR Image Pipe Edit",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🛩️ Image",
    "output_node": false
  },
  "CR Image Pipe Out": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "INT",
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image",
      "width",
      "height",
      "upscale_factor",
      "show_help"
    ],
    "name": "CR Image Pipe Out",
    "display_name": "🛩️ CR Image Pipe Out",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe/🛩️ Image",
    "output_node": false
  },
  "CR Pipe Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "pipe1": [
          "PIPE_LINE"
        ],
        "pipe2": [
          "PIPE_LINE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "pipe1",
        "pipe2"
      ]
    },
    "output": [
      "PIPE_LINE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "PIPE_LINE",
      "show_help"
    ],
    "name": "CR Pipe Switch",
    "display_name": "🔀️ CR Pipe Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🎷 Pipe",
    "output_node": true
  },
  "CR SDXL Prompt Mix Presets": {
    "input": {
      "required": {},
      "optional": {
        "prompt_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt_pos"
          }
        ],
        "prompt_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt_neg"
          }
        ],
        "style_positive": [
          "STRING",
          {
            "multiline": true,
            "default": "style_pos"
          }
        ],
        "style_negative": [
          "STRING",
          {
            "multiline": true,
            "default": "style_neg"
          }
        ],
        "preset": [
          [
            "default with no style text",
            "default with style text",
            "style boost 1",
            "style boost 2",
            "style text to refiner"
          ]
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "prompt_positive",
        "prompt_negative",
        "style_positive",
        "style_negative",
        "preset"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pos_g",
      "pos_l",
      "pos_r",
      "neg_g",
      "neg_l",
      "neg_r",
      "show_help"
    ],
    "name": "CR SDXL Prompt Mix Presets",
    "display_name": "🌟 CR SDXL Prompt Mix Presets",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🌟 SDXL",
    "output_node": false
  },
  "CR SDXL Style Text": {
    "input": {
      "required": {
        "positive_style": [
          "STRING",
          {
            "default": "POS_STYLE",
            "multiline": true
          }
        ],
        "negative_style": [
          "STRING",
          {
            "default": "NEG_STYLE",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_style",
        "negative_style"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive_prompt_text_l",
      "negative_prompt_text_l",
      "show_help"
    ],
    "name": "CR SDXL Style Text",
    "display_name": "🌟 CR SDXL Style Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🌟 SDXL",
    "output_node": false
  },
  "CR SDXL Base Prompt Encoder": {
    "input": {
      "required": {
        "base_clip": [
          "CLIP"
        ],
        "pos_g": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_G"
          }
        ],
        "pos_l": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_L"
          }
        ],
        "neg_g": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_G"
          }
        ],
        "neg_l": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_L"
          }
        ],
        "preset": [
          [
            "preset A",
            "preset B",
            "preset C"
          ]
        ],
        "base_width": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "base_height": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 4096.0,
            "min": 0,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "base_clip",
        "pos_g",
        "pos_l",
        "neg_g",
        "neg_l",
        "preset",
        "base_width",
        "base_height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "base_positive",
      "base_negative",
      "show_help"
    ],
    "name": "CR SDXL Base Prompt Encoder",
    "display_name": "🌟 CR SDXL Base Prompt Encoder",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🌟 SDXL",
    "output_node": false
  },
  "CR Multi Upscale Stack": {
    "input": {
      "required": {
        "switch_1": [
          [
            "On",
            "Off"
          ]
        ],
        "upscale_model_1": [
          [
            "None"
          ]
        ],
        "rescale_factor_1": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "switch_2": [
          [
            "On",
            "Off"
          ]
        ],
        "upscale_model_2": [
          [
            "None"
          ]
        ],
        "rescale_factor_2": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "switch_3": [
          [
            "On",
            "Off"
          ]
        ],
        "upscale_model_3": [
          [
            "None"
          ]
        ],
        "rescale_factor_3": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "upscale_stack": [
          "UPSCALE_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "switch_1",
        "upscale_model_1",
        "rescale_factor_1",
        "switch_2",
        "upscale_model_2",
        "rescale_factor_2",
        "switch_3",
        "upscale_model_3",
        "rescale_factor_3"
      ],
      "optional": [
        "upscale_stack"
      ]
    },
    "output": [
      "UPSCALE_STACK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "UPSCALE_STACK",
      "show_help"
    ],
    "name": "CR Multi Upscale Stack",
    "display_name": "🔍 CR Multi Upscale Stack",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔍 Upscale",
    "output_node": false
  },
  "CR Upscale Image": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_model": [
          []
        ],
        "mode": [
          [
            "rescale",
            "resize"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "resize_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 48000,
            "step": 1
          }
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_model",
        "mode",
        "rescale_factor",
        "resize_width",
        "resampling_method",
        "supersample",
        "rounding_modulus"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Upscale Image",
    "display_name": "🔍 CR Upscale Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔍 Upscale",
    "output_node": false
  },
  "CR Apply Multi Upscale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ],
        "upscale_stack": [
          "UPSCALE_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "resampling_method",
        "supersample",
        "rounding_modulus",
        "upscale_stack"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Apply Multi Upscale",
    "display_name": "🔍 CR Apply Multi Upscale",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/🔍 Upscale",
    "output_node": false
  },
  "CR XY List": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "list1": [
          "STRING",
          {
            "multiline": true,
            "default": "x"
          }
        ],
        "x_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "x_append": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "x_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "list2": [
          "STRING",
          {
            "multiline": true,
            "default": "y"
          }
        ],
        "y_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "y_append": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "y_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "list1",
        "x_prepend",
        "x_append",
        "x_annotation_prepend",
        "list2",
        "y_prepend",
        "y_append",
        "y_annotation_prepend"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "X",
      "Y",
      "x_annotation",
      "y_annotation",
      "trigger",
      "show_help"
    ],
    "name": "CR XY List",
    "display_name": "📉 CR XY List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    "output_node": false
  },
  "CR XY Interpolate": {
    "input": {
      "required": {
        "x_columns": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "x_start_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "x_step": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "x_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "y_rows": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "y_start_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "y_step": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "y_annotation_prepend": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "gradient_profile": [
          [
            "Lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "x_columns",
        "x_start_value",
        "x_step",
        "x_annotation_prepend",
        "y_rows",
        "y_start_value",
        "y_step",
        "y_annotation_prepend",
        "index",
        "gradient_profile"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "STRING",
      "STRING",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "X",
      "Y",
      "x_annotation",
      "y_annotation",
      "trigger",
      "show_help"
    ],
    "name": "CR XY Interpolate",
    "display_name": "📉 CR XY Interpolate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    "output_node": false
  },
  "CR XY From Folder": {
    "input": {
      "required": {
        "image_folder": [
          []
        ],
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ],
        "end_index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "max_columns": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "x_annotation": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "y_annotation": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1
          }
        ],
        "gap": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ]
      },
      "optional": {
        "trigger": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_folder",
        "start_index",
        "end_index",
        "max_columns",
        "x_annotation",
        "y_annotation",
        "font_size",
        "gap"
      ],
      "optional": [
        "trigger"
      ]
    },
    "output": [
      "IMAGE",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "trigger",
      "show_help"
    ],
    "name": "CR XY From Folder",
    "display_name": "📉 CR XY From Folder",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    "output_node": false
  },
  "CR XY Save Grid Image": {
    "input": {
      "required": {
        "mode": [
          [
            "Save",
            "Preview"
          ]
        ],
        "output_folder": [
          []
        ],
        "image": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "CR"
          }
        ],
        "file_format": [
          [
            "webp",
            "jpg",
            "png",
            "tif"
          ]
        ]
      },
      "optional": {
        "output_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "trigger": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "output_folder",
        "image",
        "filename_prefix",
        "file_format"
      ],
      "optional": [
        "output_path",
        "trigger"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CR XY Save Grid Image",
    "display_name": "📉 CR XY Save Grid Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    "output_node": true
  },
  "CR XY Index": {
    "input": {
      "required": {
        "x_columns": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "y_rows": [
          "INT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x_columns",
        "y_rows",
        "index"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "x",
      "y",
      "show_help"
    ],
    "name": "CR XY Index",
    "display_name": "📉 CR XY Index",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/✨ Essential/📉 XY Grid",
    "output_node": false
  },
  "CR Halftone Grid": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "dot_style": [
          [
            "Accent",
            "afmhot",
            "autumn",
            "binary",
            "Blues",
            "bone",
            "BrBG",
            "brg",
            "BuGn",
            "BuPu",
            "bwr",
            "cividis",
            "CMRmap",
            "cool",
            "coolwarm",
            "copper",
            "cubehelix",
            "Dark2",
            "flag",
            "gist_earth",
            "gist_gray",
            "gist_heat",
            "gist_rainbow",
            "gist_stern",
            "gist_yarg",
            "GnBu",
            "gnuplot",
            "gnuplot2",
            "gray",
            "Greens",
            "Greys",
            "hot",
            "hsv",
            "inferno",
            "jet",
            "magma",
            "nipy_spectral",
            "ocean",
            "Oranges",
            "OrRd",
            "Paired",
            "Pastel1",
            "Pastel2",
            "pink",
            "PiYG",
            "plasma",
            "PRGn",
            "prism",
            "PuBu",
            "PuBuGn",
            "PuOr",
            "PuRd",
            "Purples",
            "rainbow",
            "RdBu",
            "RdGy",
            "RdPu",
            "RdYlBu",
            "RdYlGn",
            "Reds",
            "seismic",
            "Set1",
            "Set2",
            "Set3",
            "Spectral",
            "spring",
            "summer",
            "tab10",
            "tab20",
            "tab20b",
            "tab20c",
            "terrain",
            "turbo",
            "twilight",
            "twilight_shifted",
            "viridis",
            "winter",
            "Wistia",
            "YlGn",
            "YlGnBu",
            "YlOrBr",
            "YlOrRd"
          ]
        ],
        "reverse_dot_style": [
          [
            "No",
            "Yes"
          ]
        ],
        "dot_frequency": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_pos": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "y_pos": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "dot_style",
        "reverse_dot_style",
        "dot_frequency",
        "background_color",
        "x_pos",
        "y_pos"
      ],
      "optional": [
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Halftone Grid",
    "display_name": "🟫 CR Halftone Grid",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Color Bars": {
    "input": {
      "required": {
        "mode": [
          [
            "2-color"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "orientation": [
          [
            "vertical",
            "horizontal",
            "diagonal",
            "alt_diagonal"
          ]
        ],
        "bar_frequency": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ],
        "offset": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 20,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "color_1",
        "color_2",
        "orientation",
        "bar_frequency",
        "offset"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Color Bars",
    "display_name": "🟫 CR Color Bars",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Style Bars": {
    "input": {
      "required": {
        "mode": [
          [
            "color bars",
            "sin wave",
            "gradient bars"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "bar_style": [
          [
            "Accent",
            "afmhot",
            "autumn",
            "binary",
            "Blues",
            "bone",
            "BrBG",
            "brg",
            "BuGn",
            "BuPu",
            "bwr",
            "cividis",
            "CMRmap",
            "cool",
            "coolwarm",
            "copper",
            "cubehelix",
            "Dark2",
            "flag",
            "gist_earth",
            "gist_gray",
            "gist_heat",
            "gist_rainbow",
            "gist_stern",
            "gist_yarg",
            "GnBu",
            "gnuplot",
            "gnuplot2",
            "gray",
            "Greens",
            "Greys",
            "hot",
            "hsv",
            "inferno",
            "jet",
            "magma",
            "nipy_spectral",
            "ocean",
            "Oranges",
            "OrRd",
            "Paired",
            "Pastel1",
            "Pastel2",
            "pink",
            "PiYG",
            "plasma",
            "PRGn",
            "prism",
            "PuBu",
            "PuBuGn",
            "PuOr",
            "PuRd",
            "Purples",
            "rainbow",
            "RdBu",
            "RdGy",
            "RdPu",
            "RdYlBu",
            "RdYlGn",
            "Reds",
            "seismic",
            "Set1",
            "Set2",
            "Set3",
            "Spectral",
            "spring",
            "summer",
            "tab10",
            "tab20",
            "tab20b",
            "tab20c",
            "terrain",
            "turbo",
            "twilight",
            "twilight_shifted",
            "viridis",
            "winter",
            "Wistia",
            "YlGn",
            "YlGnBu",
            "YlOrBr",
            "YlOrRd"
          ]
        ],
        "orientation": [
          [
            "vertical",
            "horizontal"
          ]
        ],
        "bar_frequency": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "bar_style",
        "orientation",
        "bar_frequency"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Style Bars",
    "display_name": "🟪 CR Style Bars",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Checker Pattern": {
    "input": {
      "required": {
        "mode": [
          [
            "regular",
            "stepped"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "grid_frequency": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 200,
            "step": 1
          }
        ],
        "step": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 200,
            "step": 1
          }
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "color_1",
        "color_2",
        "grid_frequency",
        "step"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Checker Pattern",
    "display_name": "🟦 CR Checker Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Polygons": {
    "input": {
      "required": {
        "mode": [
          [
            "hexagons",
            "triangles"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 512
          }
        ],
        "columns": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 512
          }
        ],
        "face_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "line_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "line_width": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512
          }
        ]
      },
      "optional": {
        "face_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "line_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "width",
        "height",
        "rows",
        "columns",
        "face_color",
        "background_color",
        "line_color",
        "line_width"
      ],
      "optional": [
        "face_color_hex",
        "bg_color_hex",
        "line_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Polygons",
    "display_name": "🟩 CR Polygons",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Color Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "start_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "end_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "gradient_distance": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.05
          }
        ],
        "linear_transition": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "orientation": [
          [
            "vertical",
            "horizontal"
          ]
        ]
      },
      "optional": {
        "start_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "end_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "start_color",
        "end_color",
        "gradient_distance",
        "linear_transition",
        "orientation"
      ],
      "optional": [
        "start_color_hex",
        "end_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Color Gradient",
    "display_name": "🟨 CR Color Gradient",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Radial Gradient": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "start_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "end_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "gradient_distance": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 2,
            "step": 0.05
          }
        ],
        "radial_center_x": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "radial_center_y": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "start_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "end_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "start_color",
        "end_color",
        "gradient_distance",
        "radial_center_x",
        "radial_center_y"
      ],
      "optional": [
        "start_color_hex",
        "end_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_Help"
    ],
    "name": "CR Radial Gradient",
    "display_name": "🟨 CR Radial Gradient",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Starburst Lines": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "num_lines": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 500
          }
        ],
        "line_length": [
          "FLOAT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ],
        "line_width": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 512
          }
        ],
        "line_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "center_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "center_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 720
          }
        ]
      },
      "optional": {
        "line_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_lines",
        "line_length",
        "line_width",
        "line_color",
        "background_color",
        "center_x",
        "center_y",
        "rotation"
      ],
      "optional": [
        "line_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Starburst Lines",
    "display_name": "🟧 CR Starburst Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Starburst Colors": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "num_triangles": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 512
          }
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "center_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512
          }
        ],
        "center_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 720
          }
        ],
        "bbox_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 2,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_triangles",
        "color_1",
        "color_2",
        "center_x",
        "center_y",
        "rotation",
        "bbox_factor"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Starburst Colors",
    "display_name": "🟧 CR Starburst Colors",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Simple Binary Pattern": {
    "input": {
      "required": {
        "binary_pattern": [
          "STRING",
          {
            "multiline": true,
            "default": "10101"
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary_pattern",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Simple Binary Pattern",
    "display_name": "🟥 CR Simple Binary Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Binary Pattern": {
    "input": {
      "required": {
        "binary_pattern": [
          "STRING",
          {
            "multiline": true,
            "default": "10101"
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_0": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color_1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "jitter_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "bias": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color0_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "outline_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary_pattern",
        "width",
        "height",
        "background_color",
        "color_0",
        "color_1",
        "outline_thickness",
        "outline_color",
        "jitter_distance",
        "bias"
      ],
      "optional": [
        "bg_color_hex",
        "color0_hex",
        "color1_hex",
        "outline_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Binary Pattern",
    "display_name": "🟥 CR Binary Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌈 Pattern",
    "output_node": false
  },
  "CR Draw Shape": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "shape": [
          [
            "circle",
            "oval",
            "square",
            "diamond",
            "triangle",
            "hexagon",
            "octagon",
            "quarter circle",
            "half circle",
            "quarter circle",
            "starburst",
            "star",
            "cross",
            "diagonal regions"
          ]
        ],
        "shape_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "back_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 3600.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "shape_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "shape",
        "shape_color",
        "back_color",
        "x_offset",
        "y_offset",
        "zoom",
        "rotation"
      ],
      "optional": [
        "shape_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Draw Shape",
    "display_name": "🟡 CR Draw Shape",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🟣 Shape",
    "output_node": false
  },
  "CR Draw Pie": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "pie_start": [
          "FLOAT",
          {
            "default": 30.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.1
          }
        ],
        "pie_stop": [
          "FLOAT",
          {
            "default": 330.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.1
          }
        ],
        "shape_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "back_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "rotation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 3600.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "shape_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "pie_start",
        "pie_stop",
        "shape_color",
        "back_color",
        "x_offset",
        "y_offset",
        "zoom",
        "rotation"
      ],
      "optional": [
        "shape_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Draw Pie",
    "display_name": "🟢 CR Draw Pie",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🟣 Shape",
    "output_node": false
  },
  "CR Random Shape Pattern": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096
          }
        ],
        "num_rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 128
          }
        ],
        "num_cols": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 128
          }
        ],
        "color1": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "color2": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "color1_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "color2_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_rows",
        "num_cols",
        "color1",
        "color2"
      ],
      "optional": [
        "color1_hex",
        "color2_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Random Shape Pattern",
    "display_name": "🔵 CR Random Shape Pattern",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🟣 Shape",
    "output_node": false
  },
  "CR Overlay Text": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "font_name",
        "font_size",
        "font_color",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ],
      "optional": [
        "font_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Overlay Text",
    "display_name": "🔤 CR Overlay Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    "output_node": false
  },
  "CR Draw Text": {
    "input": {
      "required": {
        "image_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 2048
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_width",
        "image_height",
        "text",
        "font_name",
        "font_size",
        "font_color",
        "background_color",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ],
      "optional": [
        "font_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Draw Text",
    "display_name": "🔤️ CR Draw Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    "output_node": false
  },
  "CR Mask Text": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      },
      "optional": {
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "font_name",
        "font_size",
        "background_color",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ],
      "optional": [
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Mask Text",
    "display_name": "🔤️ CR Mask Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    "output_node": false
  },
  "CR Composite Text": {
    "input": {
      "required": {
        "image_text": [
          "IMAGE"
        ],
        "image_background": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "align": [
          [
            "center",
            "top",
            "bottom"
          ]
        ],
        "justify": [
          [
            "center",
            "left",
            "right"
          ]
        ],
        "margins": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "line_spacing": [
          "INT",
          {
            "default": 0,
            "min": -1024,
            "max": 1024
          }
        ],
        "position_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "position_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "rotation_options": [
          [
            "text center",
            "image center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image_text",
        "image_background",
        "text",
        "font_name",
        "font_size",
        "align",
        "justify",
        "margins",
        "line_spacing",
        "position_x",
        "position_y",
        "rotation_angle",
        "rotation_options"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Composite Text",
    "display_name": "🔤️ CR Composite Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    "output_node": false
  },
  "CR Simple Text Watermark": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "@ your name"
          }
        ],
        "align": [
          [
            "center",
            "top left",
            "top center",
            "top right",
            "bottom left",
            "bottom center",
            "bottom right"
          ]
        ],
        "opacity": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1024
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "x_margin": [
          "INT",
          {
            "default": 20,
            "min": -1024,
            "max": 1024
          }
        ],
        "y_margin": [
          "INT",
          {
            "default": 20,
            "min": -1024,
            "max": 1024
          }
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text",
        "align",
        "opacity",
        "font_name",
        "font_size",
        "font_color",
        "x_margin",
        "y_margin"
      ],
      "optional": [
        "font_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Simple Text Watermark",
    "display_name": "🔤️ CR Simple Text Watermark",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    "output_node": false
  },
  "CR Select Font": {
    "input": {
      "required": {
        "font_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "font_name"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "font_name",
      "show_help"
    ],
    "name": "CR Select Font",
    "display_name": "🔤️ CR Select Font",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🔤 Text",
    "output_node": false
  },
  "CR Halftone Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "dot_size": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 30,
            "step": 1
          }
        ],
        "dot_shape": [
          [
            "ellipse",
            "rectangle"
          ],
          {
            "default": "ellipse"
          }
        ],
        "resolution": [
          [
            "normal",
            "hi-res (2x output size)"
          ],
          {
            "default": "normal"
          }
        ],
        "angle_c": [
          "INT",
          {
            "default": 75,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "angle_m": [
          "INT",
          {
            "default": 45,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "angle_y": [
          "INT",
          {
            "default": 15,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "angle_k": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 360,
            "step": 1
          }
        ],
        "greyscale": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "antialias": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "antialias_scale": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 4,
            "step": 1
          }
        ],
        "border_blending": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "dot_size",
        "dot_shape",
        "resolution",
        "angle_c",
        "angle_m",
        "angle_y",
        "angle_k",
        "greyscale",
        "antialias",
        "antialias_scale",
        "border_blending"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Halftone Filter",
    "display_name": "🎨 Halftone Filter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🎨 Filter",
    "output_node": false
  },
  "CR Color Tint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "mode": [
          [
            "custom",
            "white",
            "black",
            "sepia",
            "red",
            "green",
            "blue",
            "cyan",
            "magenta",
            "yellow",
            "purple",
            "orange",
            "warm",
            "cool",
            "lime",
            "navy",
            "vintage",
            "rose",
            "teal",
            "maroon",
            "peach",
            "lavender",
            "olive"
          ]
        ]
      },
      "optional": {
        "tint_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "strength",
        "mode"
      ],
      "optional": [
        "tint_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Color Tint",
    "display_name": "🎨 CR Color Tint",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🎨 Filter",
    "output_node": false
  },
  "CR Vignette Filter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vignette_shape": [
          [
            "circle",
            "oval",
            "square",
            "diamond"
          ]
        ],
        "feather_amount": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 1024
          }
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -2048,
            "max": 2048
          }
        ],
        "zoom": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "reverse": [
          [
            "no",
            "yes"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vignette_shape",
        "feather_amount",
        "x_offset",
        "y_offset",
        "zoom",
        "reverse"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "show_help"
    ],
    "name": "CR Vignette Filter",
    "display_name": "🎨 CR Vignette Filter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🎨 Filter",
    "output_node": false
  },
  "CR Page Layout": {
    "input": {
      "required": {
        "layout_options": [
          [
            "header",
            "footer",
            "header and footer",
            "no header or footer"
          ]
        ],
        "image_panel": [
          "IMAGE"
        ],
        "header_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "header_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "header_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "footer_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "footer_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "footer_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "header_font_size": [
          "INT",
          {
            "default": 150,
            "min": 0,
            "max": 1024
          }
        ],
        "footer_font_size": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1024
          }
        ],
        "border_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "layout_options",
        "image_panel",
        "header_height",
        "header_text",
        "header_align",
        "footer_height",
        "footer_text",
        "footer_align",
        "font_name",
        "font_color",
        "header_font_size",
        "footer_font_size",
        "border_thickness",
        "border_color",
        "background_color"
      ],
      "optional": [
        "font_color_hex",
        "border_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Page Layout",
    "display_name": "🌁 CR Page Layout",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Image Panel": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "border_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "layout_direction": [
          [
            "horizontal",
            "vertical"
          ]
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "border_thickness",
        "border_color",
        "outline_thickness",
        "outline_color",
        "layout_direction"
      ],
      "optional": [
        "image_2",
        "image_3",
        "image_4",
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Image Panel",
    "display_name": "🌁 CR Image Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Image Grid Panel": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "border_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "max_columns": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 256
          }
        ]
      },
      "optional": {
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "border_thickness",
        "border_color",
        "outline_thickness",
        "outline_color",
        "max_columns"
      ],
      "optional": [
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Image Grid Panel",
    "display_name": "🌁 CR Image Grid Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Image Border": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "bottom_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "left_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "right_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top_thickness",
        "bottom_thickness",
        "left_thickness",
        "right_thickness",
        "border_color",
        "outline_thickness",
        "outline_color"
      ],
      "optional": [
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Image Border",
    "display_name": "🌁 CR Image Border",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Feathered Border": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "top_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "bottom_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "left_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "right_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ],
        "border_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "feather_amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024
          }
        ]
      },
      "optional": {
        "border_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "top_thickness",
        "bottom_thickness",
        "left_thickness",
        "right_thickness",
        "border_color",
        "feather_amount"
      ],
      "optional": [
        "border_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Feathered Border",
    "display_name": "🌁 CR Feathered Border",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Simple Text Panel": {
    "input": {
      "required": {
        "panel_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "panel_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 1024
          }
        ],
        "font_outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 50
          }
        ],
        "font_outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "align": [
          [
            "top",
            "center",
            "bottom"
          ]
        ],
        "justify": [
          [
            "left",
            "center",
            "right"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "panel_width",
        "panel_height",
        "text",
        "font_name",
        "font_color",
        "font_size",
        "font_outline_thickness",
        "font_outline_color",
        "background_color",
        "align",
        "justify"
      ],
      "optional": [
        "font_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Text Panel",
    "display_name": "🌁 CR Simple Text Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Color Panel": {
    "input": {
      "required": {
        "panel_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "panel_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "fill_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "fill_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "panel_width",
        "panel_height",
        "fill_color"
      ],
      "optional": [
        "fill_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Color Panel",
    "display_name": "🌁 CR Color Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Overlay Transparent Image": {
    "input": {
      "required": {
        "back_image": [
          "IMAGE"
        ],
        "overlay_image": [
          "IMAGE"
        ],
        "transparency": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096
          }
        ],
        "rotation_angle": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -360.0,
            "max": 360.0,
            "step": 0.1
          }
        ],
        "overlay_scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "back_image",
        "overlay_image",
        "transparency",
        "offset_x",
        "offset_y",
        "rotation_angle",
        "overlay_scale_factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CR Overlay Transparent Image",
    "display_name": "🌁 CR Overlay Transparent Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Half Drop Panel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "pattern": [
          [
            "none",
            "half drop",
            "quarter drop",
            "custom drop %"
          ]
        ]
      },
      "optional": {
        "drop_percentage": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "pattern"
      ],
      "optional": [
        "drop_percentage"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Half Drop Panel",
    "display_name": "🌁 CR Half Drop Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Diamond Panel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "pattern": [
          [
            "none",
            "diamond"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "pattern"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Diamond Panel",
    "display_name": "🌁 CR Diamond Panel",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/🌁 Layout",
    "output_node": false
  },
  "CR Simple Meme Template": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "custom",
            "One Does Not Simply ... MEME IN COMFY",
            "This is fine.",
            "Good Morning ... No Such Thing!"
          ]
        ],
        "text_top": [
          "STRING",
          {
            "multiline": true,
            "default": "text_top"
          }
        ],
        "text_bottom": [
          "STRING",
          {
            "multiline": true,
            "default": "text_bottom"
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "max_font_size": [
          "INT",
          {
            "default": 150,
            "min": 20,
            "max": 2048
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "font_outline": [
          [
            "none",
            "thin",
            "thick",
            "extra thick"
          ]
        ],
        "bar_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "bar_options": [
          [
            "no bars",
            "top",
            "bottom",
            "top and bottom"
          ]
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bar_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "preset",
        "text_top",
        "text_bottom",
        "font_name",
        "max_font_size",
        "font_color",
        "font_outline",
        "bar_color",
        "bar_options"
      ],
      "optional": [
        "font_color_hex",
        "bar_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Meme Template",
    "display_name": "📱 CR Simple Meme Template",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    "output_node": false
  },
  "CR Simple Banner": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "banner_text": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "max_font_size": [
          "INT",
          {
            "default": 150,
            "min": 20,
            "max": 2048
          }
        ],
        "font_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 500
          }
        ],
        "outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "margin_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 500
          }
        ]
      },
      "optional": {
        "font_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "outline_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "banner_text",
        "font_name",
        "max_font_size",
        "font_color",
        "outline_thickness",
        "outline_color",
        "margin_size"
      ],
      "optional": [
        "font_color_hex",
        "outline_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Banner",
    "display_name": "📱 CR Simple Banner",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    "output_node": false
  },
  "CR Comic Panel Templates": {
    "input": {
      "required": {
        "page_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "page_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096
          }
        ],
        "template": [
          [
            "custom",
            "G22",
            "G33",
            "H2",
            "H3",
            "H12",
            "H13",
            "H21",
            "H23",
            "H31",
            "H32",
            "V2",
            "V3",
            "V12",
            "V13",
            "V21",
            "V23",
            "V31",
            "V32"
          ]
        ],
        "reading_direction": [
          [
            "left to right",
            "right to left"
          ]
        ],
        "border_thickness": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_thickness": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 1024
          }
        ],
        "outline_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "panel_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ],
        "background_color": [
          [
            "custom",
            "white",
            "black",
            "red",
            "green",
            "blue",
            "yellow",
            "cyan",
            "magenta",
            "orange",
            "purple",
            "pink",
            "brown",
            "gray",
            "lightgray",
            "darkgray",
            "olive",
            "lime",
            "teal",
            "navy",
            "maroon",
            "fuchsia",
            "aqua",
            "silver",
            "gold",
            "turquoise",
            "lavender",
            "violet",
            "coral",
            "indigo"
          ]
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "custom_panel_layout": [
          "STRING",
          {
            "multiline": false,
            "default": "H123"
          }
        ],
        "outline_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "panel_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "bg_color_hex": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "page_width",
        "page_height",
        "template",
        "reading_direction",
        "border_thickness",
        "outline_thickness",
        "outline_color",
        "panel_color",
        "background_color"
      ],
      "optional": [
        "images",
        "custom_panel_layout",
        "outline_color_hex",
        "panel_color_hex",
        "bg_color_hex"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Comic Panel Templates",
    "display_name": "📱 CR Comic Panel Templates",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    "output_node": false
  },
  "CR Simple Image Compare": {
    "input": {
      "required": {
        "text1": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "footer_height": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 1024
          }
        ],
        "font_name": [
          [
            "PixelifySans-Bold.ttf",
            "comic.ttf",
            "NotoSansArabic-Regular.ttf",
            "impact.ttf",
            "Quicksand-Bold.ttf",
            "YoungSerif-Regular.ttf",
            "Caveat-VariableFont_wght.ttf",
            "Oswald-Bold.ttf",
            "AlumniSansCollegiateOne-Regular.ttf",
            "Roboto-Regular.ttf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1024
          }
        ],
        "mode": [
          [
            "normal",
            "dark"
          ]
        ],
        "border_thickness": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 1024
          }
        ]
      },
      "optional": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text1",
        "text2",
        "footer_height",
        "font_name",
        "font_size",
        "mode",
        "border_thickness"
      ],
      "optional": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "show_help"
    ],
    "name": "CR Simple Image Compare",
    "display_name": "📱 CR Simple Image Compare",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    "output_node": false
  },
  "CR Thumbnail Preview": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.1,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max_columns": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 256
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rescale_factor",
        "max_columns"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "show_help"
    ],
    "name": "CR Thumbnail Preview",
    "display_name": "📱 CR Thumbnail Preview",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    "output_node": true
  },
  "CR Seamless Checker": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.1,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "grid_options": [
          [
            "2x2",
            "3x3",
            "4x4",
            "5x5",
            "6x6"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rescale_factor",
        "grid_options"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "show_help"
    ],
    "name": "CR Seamless Checker",
    "display_name": "📱 CR Seamless Checker",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/👾 Graphics/📱 Template",
    "output_node": true
  },
  "CR Image Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Image Input Switch",
    "display_name": "🔀 CR Image Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Image Input Switch (4 way)": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4
          }
        ]
      },
      "optional": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "image1",
        "image2",
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Image Input Switch (4 way)",
    "display_name": "🔀 CR Image Input Switch (4 way)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Latent Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "latent1": [
          "LATENT"
        ],
        "latent2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "latent1",
        "latent2"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "show_help"
    ],
    "name": "CR Latent Input Switch",
    "display_name": "🔀 CR Latent Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Conditioning Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "conditioning1": [
          "CONDITIONING"
        ],
        "conditioning2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "conditioning1",
        "conditioning2"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Conditioning Input Switch",
    "display_name": "🔀 CR Conditioning Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Clip Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CLIP",
      "show_help"
    ],
    "name": "CR Clip Input Switch",
    "display_name": "🔀 CR Clip Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Model Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "show_help"
    ],
    "name": "CR Model Input Switch",
    "display_name": "🔀 CR Model Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR ControlNet Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "control_net1": [
          "CONTROL_NET"
        ],
        "control_net2": [
          "CONTROL_NET"
        ]
      },
      "optional": {
        "control_net1": [
          "CONTROL_NET"
        ],
        "control_net2": [
          "CONTROL_NET"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "control_net1",
        "control_net2"
      ],
      "optional": [
        "control_net1",
        "control_net2"
      ]
    },
    "output": [
      "CONTROL_NET",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONTROL_NET",
      "show_help"
    ],
    "name": "CR ControlNet Input Switch",
    "display_name": "🔀 CR ControlNet Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR VAE Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "VAE1": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "VAE2": [
          "VAE",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "VAE1",
        "VAE2"
      ]
    },
    "output": [
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "VAE",
      "show_help"
    ],
    "name": "CR VAE Input Switch",
    "display_name": "🔀 CR VAE Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Text Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "text1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "text1",
        "text2"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Input Switch",
    "display_name": "🔀 CR Text Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Text Input Switch (4 way)": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4
          }
        ]
      },
      "optional": {
        "text1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text3": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text4": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "text1",
        "text2",
        "text3",
        "text4"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Input Switch (4 way)",
    "display_name": "🔀 CR Text Input Switch (4 way)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Switch Model and CLIP": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "model1": [
          "MODEL"
        ],
        "clip1": [
          "CLIP"
        ],
        "model2": [
          "MODEL"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "model1",
        "clip1",
        "model2",
        "clip2"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Switch Model and CLIP",
    "display_name": "🔀 CR Switch Model and CLIP",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Logic",
    "output_node": false
  },
  "CR Batch Process Switch": {
    "input": {
      "required": {
        "Input": [
          [
            "image",
            "image batch"
          ]
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "image_batch": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "image",
        "image_batch"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Batch Process Switch",
    "display_name": "🔂 CR Batch Process Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔂 Process",
    "output_node": false
  },
  "CR Img2Img Process Switch": {
    "input": {
      "required": {
        "Input": [
          [
            "txt2img",
            "img2img"
          ]
        ]
      },
      "optional": {
        "txt2img": [
          "LATENT"
        ],
        "img2img": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "txt2img",
        "img2img"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "show_help"
    ],
    "name": "CR Img2Img Process Switch",
    "display_name": "🔂 CR Img2Img Process Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔂 Process",
    "output_node": false
  },
  "CR Hires Fix Process Switch": {
    "input": {
      "required": {
        "Input": [
          [
            "latent_upscale",
            "image_upscale"
          ]
        ]
      },
      "optional": {
        "latent_upscale": [
          "LATENT"
        ],
        "image_upscale": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input"
      ],
      "optional": [
        "latent_upscale",
        "image_upscale"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "STRING"
    ],
    "name": "CR Hires Fix Process Switch",
    "display_name": "🔂 CR Hires Fix Process Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔂 Process",
    "output_node": false
  },
  "CR Index": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ],
        "print_to_console": [
          [
            "Yes",
            "No"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "print_to_console"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Index",
    "display_name": "🔢 CR Index",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    "output_node": false
  },
  "CR Index Increment": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000,
            "forceInput": true
          }
        ],
        "interval": [
          "INT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "interval"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "interval",
      "show_help"
    ],
    "name": "CR Index Increment",
    "display_name": "🔢 CR Index Increment",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    "output_node": false
  },
  "CR Index Multiply": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000,
            "forceInput": true
          }
        ],
        "factor": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "factor"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "factor",
      "show_help"
    ],
    "name": "CR Index Multiply",
    "display_name": "🔢 CR Index Multiply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    "output_node": false
  },
  "CR Index Reset": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000,
            "forceInput": true
          }
        ],
        "reset_to": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "reset_to"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "reset_to",
      "show_help"
    ],
    "name": "CR Index Reset",
    "display_name": "🔢 CR Index Reset",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    "output_node": false
  },
  "CR Trigger": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "trigger_value": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "trigger_value"
      ]
    },
    "output": [
      "INT",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "index",
      "trigger",
      "show_help"
    ],
    "name": "CR Trigger",
    "display_name": "🔢 CR Trigger",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔢 Index",
    "output_node": false
  },
  "CR String To Number": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "text",
            "forceInput": true
          }
        ],
        "round_integer": [
          [
            "round",
            "round down",
            "round up"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "round_integer"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR String To Number",
    "display_name": "🔧 CR String To Number",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    "output_node": false
  },
  "CR String To Combo": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "any",
      "show_help"
    ],
    "name": "CR String To Combo",
    "display_name": "🔧 CR String To Combo",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    "output_node": false
  },
  "CR Float To String": {
    "input": {
      "required": {
        "float_": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000000.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float_"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Float To String",
    "display_name": "🔧 CR Float To String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    "output_node": false
  },
  "CR Float To Integer": {
    "input": {
      "required": {
        "_float": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "_float"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Float To Integer",
    "display_name": "🔧 CR Float To Integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    "output_node": false
  },
  "CR Integer To String": {
    "input": {
      "required": {
        "int_": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int_"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Integer To String",
    "display_name": "🔧 CR Integer To String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    "output_node": false
  },
  "CR String To Boolean": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "BOOLEAN",
      "show_help"
    ],
    "name": "CR String To Boolean",
    "display_name": "🔧 CR String To Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔧 Conversion",
    "output_node": false
  },
  "CR Random Hex Color": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "hex_color1",
      "hex_color2",
      "hex_color3",
      "hex_color4",
      "show_help"
    ],
    "name": "CR Random Hex Color",
    "display_name": "🎲 CR Random Hex Color",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    "output_node": false
  },
  "CR Random RGB": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "rgb_1",
      "rgb_2",
      "rgb_3",
      "rgb_4",
      "show_help"
    ],
    "name": "CR Random RGB",
    "display_name": "🎲 CR Random RGB",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    "output_node": false
  },
  "CR Random Multiline Values": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "value_type": [
          [
            "binary",
            "decimal",
            "natural",
            "hexadecimal",
            "alphabetic",
            "alphanumeric",
            "custom"
          ]
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ],
        "string_length": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 1024
          }
        ],
        "custom_values": [
          "STRING",
          {
            "multiline": false,
            "default": "123ABC"
          }
        ],
        "prepend_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "value_type",
        "rows",
        "string_length",
        "custom_values",
        "prepend_text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random Multiline Values",
    "display_name": "🎲 CR Random Multiline Values",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    "output_node": false
  },
  "CR Random Multiline Colors": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "value_type": [
          [
            "rgb",
            "hex color",
            "matplotlib xkcd"
          ]
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "value_type",
        "rows"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random Multiline Colors",
    "display_name": "🎲 CR Random Multiline Colors",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    "output_node": false
  },
  "CR Random RGB Gradient": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "rows"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random RGB Gradient",
    "display_name": "🎲 CR Random RGB Gradient",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    "output_node": false
  },
  "CR Random Panel Codes": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "rows": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 2048
          }
        ],
        "string_length": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 1024
          }
        ],
        "values": [
          "STRING",
          {
            "multiline": false,
            "default": "123"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "rows",
        "string_length",
        "values"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Random Panel Codes",
    "display_name": "🎲 CR Random Panel Codes",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🎲 Random",
    "output_node": false
  },
  "CR Text": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "text",
      "show_help"
    ],
    "name": "CR Text",
    "display_name": "🔤 CR Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Multiline Text": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "convert_from_csv": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "csv_quote_char": [
          "STRING",
          {
            "default": "'",
            "choices": [
              "'",
              "\""
            ]
          }
        ],
        "remove_chars": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "chars_to_remove": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "split_string": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "convert_from_csv",
        "csv_quote_char",
        "remove_chars",
        "chars_to_remove",
        "split_string"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "multiline_text",
      "show_help"
    ],
    "name": "CR Multiline Text",
    "display_name": "🔤 CR Multiline Text",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Split String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "text"
          }
        ]
      },
      "optional": {
        "delimiter": [
          "STRING",
          {
            "multiline": false,
            "default": ","
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "delimiter"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "string_1",
      "string_2",
      "string_3",
      "string_4",
      "show_help"
    ],
    "name": "CR Split String",
    "display_name": "🔤 CR Split String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Text Concatenate": {
    "input": {
      "required": {},
      "optional": {
        "text1": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text1",
        "text2",
        "separator"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Concatenate",
    "display_name": "🔤 CR Text Concatenate",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Text Replace": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "find1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "find1",
        "replace1",
        "find2",
        "replace2",
        "find3",
        "replace3"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Replace",
    "display_name": "🔤 CR Text Replace",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Text Length": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Text Length",
    "display_name": "🔤 CR Text Length",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Text Operation": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "operation": [
          [
            "uppercase",
            "lowercase",
            "capitalize",
            "invert_case",
            "reverse",
            "trim",
            "remove_spaces"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "operation"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Operation",
    "display_name": "🔤 CR Text Operation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Text Blacklist": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ],
        "blacklist_words": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "replacement_text": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "blacklist_words"
      ],
      "optional": [
        "replacement_text"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Blacklist",
    "display_name": "🔤 Text Blacklist",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": false
  },
  "CR Save Text To File": {
    "input": {
      "required": {
        "multiline_text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "multiline_text",
        "output_file_path",
        "file_name",
        "file_extension"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "show_help"
    ],
    "name": "CR Save Text To File",
    "display_name": "🔤 CR Save Text To File",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔤 Text",
    "output_node": true
  },
  "CR Set Value On Boolean": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": true,
            "forceInput": true
          }
        ],
        "value_if_true": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "value_if_false": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean",
        "value_if_true",
        "value_if_false"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Set Value On Boolean",
    "display_name": "⚙️ CR Set Value On Boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    "output_node": false
  },
  "CR Set Value On Binary": {
    "input": {
      "required": {
        "binary": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "forceInput": true
          }
        ],
        "value_if_1": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "value_if_0": [
          "FLOAT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary",
        "value_if_1",
        "value_if_0"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Set Value On Binary",
    "display_name": "⚙️ CR Set Value On Binary",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    "output_node": false
  },
  "CR Set Value on String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "test_string": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "value_if_true": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "value_if_false": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "test_string",
        "value_if_true",
        "value_if_false"
      ]
    },
    "output": [
      "*",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "STRING",
      "BOOLEAN",
      "show_help"
    ],
    "name": "CR Set Value on String",
    "display_name": "⚙️ CR Set Value on String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    "output_node": false
  },
  "CR Set Switch From String": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "switch_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "switch_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "switch_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "switch_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "switch_1",
        "switch_2",
        "switch_3",
        "switch_4"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "switch",
      "show_help"
    ],
    "name": "CR Set Switch From String",
    "display_name": "⚙️ CR Set Switch From String",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/🔀 Conditional",
    "output_node": false
  },
  "CR Value": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT",
      "show_help"
    ],
    "name": "CR Value",
    "display_name": "⚙️ CR Value",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    "output_node": false
  },
  "CR Integer Multiple": {
    "input": {
      "required": {
        "integer": [
          "INT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "multiple": [
          "FLOAT",
          {
            "default": 8,
            "min": 1,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "integer",
        "multiple"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Integer Multiple",
    "display_name": "⚙️ CR Integer Multiple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    "output_node": false
  },
  "CR Clamp Value": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "range_min": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "range_max": [
          "FLOAT",
          {
            "default": 1,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "range_min",
        "range_max"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "a",
      "show_help"
    ],
    "name": "CR Clamp Value",
    "display_name": "⚙️ CR Clamp Value",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    "output_node": false
  },
  "CR Math Operation": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 1.0
          }
        ],
        "operation": [
          [
            "sin",
            "cos",
            "tan",
            "sqrt",
            "exp",
            "log",
            "neg",
            "abs"
          ]
        ],
        "decimal_places": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "operation",
        "decimal_places"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "a",
      "show_help"
    ],
    "name": "CR Math Operation",
    "display_name": "⚙️ CR Math Operation",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    "output_node": false
  },
  "CR Get Parameter From Prompt": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt",
            "forceInput": true
          }
        ],
        "search_string": [
          "STRING",
          {
            "multiline": false,
            "default": "!findme"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "search_string"
      ]
    },
    "output": [
      "STRING",
      "*",
      "FLOAT",
      "BOOLEAN",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "prompt",
      "text",
      "float",
      "boolean",
      "show_help"
    ],
    "name": "CR Get Parameter From Prompt",
    "display_name": "⚙️ CR Get Parameter From Prompt",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    "output_node": false
  },
  "CR Select Resize Method": {
    "input": {
      "required": {
        "method": [
          [
            "Fit",
            "Crop"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "method"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "method",
      "show_help"
    ],
    "name": "CR Select Resize Method",
    "display_name": "⚙️ CR Select Resize Method",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    "output_node": false
  },
  "CR Select ISO Size": {
    "input": {
      "required": {
        "iso_size": [
          [
            "A0 - 9933x14043",
            "A1 - 7016x9933",
            "A2 - 4960x7016",
            "A3 - 3508x4960",
            "A4 - 2480x3508",
            "A5 - 1748x2480",
            "A6 - 1240x1748",
            "A7 - 874x1240",
            "A8 - 614x874",
            "A9 - 437x614",
            "A10 - 307x437",
            "A11 - 213x307",
            "A12 - 154x213",
            "A13 - 106x154",
            "B0 - 11811x16701",
            "B1 - 8350x11811",
            "B2 - 5906x8350",
            "B3 - 4169x5906",
            "B4 - 2953x4169",
            "B5 - 2079x2953",
            "B6 - 1476x2079",
            "B7 - 1039x1476",
            "B8 - 732x1039",
            "B9 - 520x732",
            "B10 - 366x520",
            "C0 - 10831x15319",
            "C1 - 7654x10831",
            "C2 - 5409x7654",
            "C3 - 3827x5409",
            "C4 - 2705x3827",
            "C5 - 1913x2705",
            "C6 - 1346x1913",
            "C7 - 957x1346",
            "C8 - 673x957",
            "C9 - 472x673",
            "C10 - 331x472"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "iso_size"
      ]
    },
    "output": [
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "show_help"
    ],
    "name": "CR Select ISO Size",
    "display_name": "⚙️ CR Select ISO Size",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🛠️ Utils/⚙️ Other",
    "output_node": false
  },
  "CR Simple Schedule": {
    "input": {
      "required": {
        "schedule": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, item_alias, [attr_value1, attr_value2]"
          }
        ],
        "schedule_type": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule",
        "schedule_type",
        "schedule_alias",
        "schedule_format"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_help"
    ],
    "name": "CR Simple Schedule",
    "display_name": "📋 CR Simple Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    "output_node": false
  },
  "CR Central Schedule": {
    "input": {
      "required": {
        "schedule_1": [
          "STRING",
          {
            "multiline": true,
            "default": "schedule"
          }
        ],
        "schedule_type1": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "schedule_2": [
          "STRING",
          {
            "multiline": true,
            "default": "schedule"
          }
        ],
        "schedule_type2": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "schedule_3": [
          "STRING",
          {
            "multiline": true,
            "default": "schedule"
          }
        ],
        "schedule_type3": [
          [
            "Value",
            "Text",
            "Prompt",
            "Prompt Weight",
            "Model",
            "LoRA",
            "ControlNet",
            "Style",
            "Upscale",
            "Camera",
            "Job"
          ]
        ],
        "schedule_alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_1",
        "schedule_type1",
        "schedule_alias1",
        "schedule_2",
        "schedule_type2",
        "schedule_alias2",
        "schedule_3",
        "schedule_type3",
        "schedule_alias3",
        "schedule_format"
      ],
      "optional": [
        "schedule"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Central Schedule",
    "display_name": "📋 CR Central Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    "output_node": false
  },
  "CR Combine Schedules": {
    "input": {
      "required": {},
      "optional": {
        "schedule_1": [
          "SCHEDULE"
        ],
        "schedule_2": [
          "SCHEDULE"
        ],
        "schedule_3": [
          "SCHEDULE"
        ],
        "schedule_4": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "schedule_1",
        "schedule_2",
        "schedule_3",
        "schedule_4"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Combine Schedules",
    "display_name": "📋 CR Combine Schedules",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    "output_node": false
  },
  "CR Output Schedule To File": {
    "input": {
      "required": {
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ],
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "output_file_path",
        "file_name",
        "file_extension",
        "schedule"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CR Output Schedule To File",
    "display_name": "📋 CR Output Schedule To File",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    "output_node": true
  },
  "CR Load Schedule From File": {
    "input": {
      "required": {
        "input_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input_file_path",
        "file_name",
        "file_extension"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Load Schedule From File",
    "display_name": "📋 CR Load Schedule From File",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    "output_node": false
  },
  "CR Schedule Input Switch": {
    "input": {
      "required": {
        "Input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ],
        "schedule1": [
          "SCHEDULE"
        ],
        "schedule2": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Input",
        "schedule1",
        "schedule2"
      ]
    },
    "output": [
      "SCHEDULE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_help"
    ],
    "name": "CR Schedule Input Switch",
    "display_name": "📋 CR Schedule Input Switch",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    "output_node": true
  },
  "CR Bit Schedule": {
    "input": {
      "required": {
        "binary_string": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "interval": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "binary_string",
        "interval",
        "loops"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SCHEDULE",
      "show_text"
    ],
    "name": "CR Bit Schedule",
    "display_name": "📋 CR Bit Schedule",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📋 Schedule",
    "output_node": false
  },
  "CR Simple Value Scheduler": {
    "input": {
      "required": {
        "schedule": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, value"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule",
        "current_frame"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Simple Value Scheduler",
    "display_name": "📑 CR Simple Value Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Simple Text Scheduler": {
    "input": {
      "required": {
        "schedule": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, text"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule",
        "current_frame"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Simple Text Scheduler",
    "display_name": "📑 CR Simple Text Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Value Scheduler": {
    "input": {
      "required": {
        "mode": [
          [
            "Default Value",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -9999.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "schedule_alias",
        "default_value",
        "schedule_format"
      ],
      "optional": [
        "schedule"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "show_help"
    ],
    "name": "CR Value Scheduler",
    "display_name": "📑 CR Value Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Text Scheduler": {
    "input": {
      "required": {
        "mode": [
          [
            "Default Text",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_text": [
          "STRING",
          {
            "multiline": false,
            "default": "default text"
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "schedule_alias",
        "default_text",
        "schedule_format"
      ],
      "optional": [
        "schedule"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Text Scheduler",
    "display_name": "📑 CR Text Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Load Scheduled Models": {
    "input": {
      "required": {
        "mode": [
          [
            "Load default Model",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_model": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "model_list": [
          "MODEL_LIST"
        ],
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "schedule_alias",
        "default_model",
        "schedule_format"
      ],
      "optional": [
        "model_list",
        "schedule"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "show_help"
    ],
    "name": "CR Load Scheduled Models",
    "display_name": "📑 CR Load Scheduled Models",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Load Scheduled LoRAs": {
    "input": {
      "required": {
        "mode": [
          [
            "Off",
            "Load default LoRA",
            "Schedule"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "schedule_alias": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "default_lora": [
          []
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      },
      "optional": {
        "lora_list": [
          "LORA_LIST"
        ],
        "schedule": [
          "SCHEDULE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "clip",
        "current_frame",
        "schedule_alias",
        "default_lora",
        "strength_model",
        "strength_clip",
        "schedule_format"
      ],
      "optional": [
        "lora_list",
        "schedule"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Load Scheduled LoRAs",
    "display_name": "📑 CR Load Scheduled LoRAs",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Prompt Scheduler": {
    "input": {
      "required": {
        "mode": [
          [
            "Default Prompt",
            "Keyframe List",
            "Schedule"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "default_prompt": [
          "STRING",
          {
            "multiline": false,
            "default": "default prompt"
          }
        ],
        "schedule_format": [
          [
            "CR",
            "Deforum"
          ]
        ],
        "interpolate_prompt": [
          [
            "Yes",
            "No"
          ]
        ]
      },
      "optional": {
        "schedule": [
          "SCHEDULE"
        ],
        "schedule_alias": [
          "STRING",
          {
            "default prompt": "",
            "multiline": false
          }
        ],
        "keyframe_list": [
          "STRING",
          {
            "multiline": true,
            "default": "keyframe list"
          }
        ],
        "prepend_text": [
          "STRING",
          {
            "multiline": true,
            "default": "prepend text"
          }
        ],
        "append_text": [
          "STRING",
          {
            "multiline": true,
            "default": "append text"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "current_frame",
        "default_prompt",
        "schedule_format",
        "interpolate_prompt"
      ],
      "optional": [
        "schedule",
        "schedule_alias",
        "keyframe_list",
        "prepend_text",
        "append_text"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "current_prompt",
      "next_prompt",
      "weight",
      "show_help"
    ],
    "name": "CR Prompt Scheduler",
    "display_name": "📑 CR Prompt Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Simple Prompt Scheduler": {
    "input": {
      "required": {
        "keyframe_list": [
          "STRING",
          {
            "multiline": true,
            "default": "frame_number, text"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "keyframe_format": [
          [
            "CR",
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "keyframe_list",
        "current_frame",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "current_prompt",
      "next_prompt",
      "weight",
      "show_help"
    ],
    "name": "CR Simple Prompt Scheduler",
    "display_name": "📑 CR Simple Prompt Scheduler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📑 Schedulers",
    "output_node": false
  },
  "CR Keyframe List": {
    "input": {
      "required": {
        "keyframe_list": [
          "STRING",
          {
            "multiline": true,
            "default": "keyframes"
          }
        ],
        "keyframe_format": [
          [
            "Deforum",
            "CR"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "keyframe_list",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "keyframe_list",
      "show_help"
    ],
    "name": "CR Keyframe List",
    "display_name": "📝 CR Keyframe List",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📝 Prompt",
    "output_node": false
  },
  "CR Encode Scheduled Prompts": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "current_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "next_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -9999.0,
            "max": 9999.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "current_prompt",
        "next_prompt",
        "weight"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "show_help"
    ],
    "name": "CR Encode Scheduled Prompts",
    "display_name": "📝 CR Encode Scheduled Prompts",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/📝 Prompt",
    "output_node": false
  },
  "CR Gradient Float": {
    "input": {
      "required": {
        "start_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "end_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.01
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "gradient_profile": [
          [
            "Lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "end_value",
        "start_frame",
        "frame_duration",
        "current_frame",
        "gradient_profile"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "show_help"
    ],
    "name": "CR Gradient Float",
    "display_name": "🔢 CR Gradient Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    "output_node": false
  },
  "CR Gradient Integer": {
    "input": {
      "required": {
        "start_value": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "end_value": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "gradient_profile": [
          [
            "Lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "end_value",
        "start_frame",
        "frame_duration",
        "current_frame",
        "gradient_profile"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Gradient Integer",
    "display_name": "🔢 CR Gradient Integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    "output_node": false
  },
  "CR Increment Float": {
    "input": {
      "required": {
        "start_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 0.001
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 0.1,
            "min": -9999.0,
            "max": 9999.0,
            "step": 0.001
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "step",
        "start_frame",
        "frame_duration",
        "current_frame"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "show_help"
    ],
    "name": "CR Increment Float",
    "display_name": "🔢 CR Increment Float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    "output_node": true
  },
  "CR Increment Integer": {
    "input": {
      "required": {
        "start_value": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "step": [
          "INT",
          {
            "default": 1.0,
            "min": -9999.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "frame_duration": [
          "INT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_value",
        "step",
        "start_frame",
        "frame_duration",
        "current_frame"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "show_help"
    ],
    "name": "CR Increment Integer",
    "display_name": "🔢 CR Increment Integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    "output_node": true
  },
  "CR Interpolate Latents": {
    "input": {
      "required": {
        "latent1": [
          "LATENT"
        ],
        "latent2": [
          "LATENT"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "method": [
          [
            "lerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "latent1",
        "latent2",
        "weight",
        "method"
      ]
    },
    "output": [
      "LATENT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "show_help"
    ],
    "name": "CR Interpolate Latents",
    "display_name": "🔢 CR Interpolate Latents",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/🔢 Interpolate",
    "output_node": false
  },
  "CR Debatch Frames": {
    "input": {
      "required": {
        "frames": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "frames"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "debatched_frames"
    ],
    "name": "CR Debatch Frames",
    "display_name": "🛠️ CR Debatch Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/🛠️ Utils",
    "output_node": false
  },
  "CR Current Frame": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 1,
            "min": -10000,
            "max": 10000
          }
        ],
        "print_to_console": [
          [
            "Yes",
            "No"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "index",
        "print_to_console"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "index"
    ],
    "name": "CR Current Frame",
    "display_name": "🛠️ CR Current Frame",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/🛠️ Utils",
    "output_node": false
  },
  "CR Load Animation Frames": {
    "input": {
      "required": {
        "image_sequence_folder": [
          [
            "Bjornulf",
            "flux.1_d",
            "flux.1_s",
            "lora_flux.1_d",
            "lora_hunyuan_video",
            "lora_pony",
            "lora_sd_1.5",
            "lora_sdxl_1.0",
            "pony",
            "sd_1.5",
            "sdxl_1.0"
          ]
        ],
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ],
        "max_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_sequence_folder",
        "start_index",
        "max_frames"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Load Animation Frames",
    "display_name": "⌨️ CR Load Animation Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/⌨️ IO",
    "output_node": false
  },
  "CR Load Flow Frames": {
    "input": {
      "required": {
        "input_folder": [
          [
            "Bjornulf",
            "flux.1_d",
            "flux.1_s",
            "lora_flux.1_d",
            "lora_hunyuan_video",
            "lora_pony",
            "lora_sd_1.5",
            "lora_sdxl_1.0",
            "pony",
            "sd_1.5",
            "sdxl_1.0"
          ]
        ],
        "sort_by": [
          [
            "Index",
            "Alphabetic"
          ]
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "forceInput": true
          }
        ],
        "skip_start_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      },
      "optional": {
        "input_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "file_pattern": [
          "STRING",
          {
            "default": "*.png",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_folder",
        "sort_by",
        "current_frame",
        "skip_start_frames"
      ],
      "optional": [
        "input_path",
        "file_pattern"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "current_image",
      "previous_image",
      "current_frame",
      "show_help"
    ],
    "name": "CR Load Flow Frames",
    "display_name": "⌨️ CR Load Flow Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/⌨️ IO",
    "output_node": false
  },
  "CR Output Flow Frames": {
    "input": {
      "required": {
        "output_folder": [
          []
        ],
        "current_image": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "CR"
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999999,
            "forceInput": true
          }
        ]
      },
      "optional": {
        "interpolated_img": [
          "IMAGE"
        ],
        "output_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "output_folder",
        "current_image",
        "filename_prefix",
        "current_frame"
      ],
      "optional": [
        "interpolated_img",
        "output_path"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CR Output Flow Frames",
    "display_name": "⌨️ CR Output Flow Frames",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/⌨️ IO",
    "output_node": true
  },
  "CR Prompt List Keyframes": {
    "input": {
      "required": {
        "prompt_list": [
          "PROMPT_LIST"
        ],
        "keyframe_format": [
          [
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_list",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "keyframe_list",
      "show_help"
    ],
    "name": "CR Prompt List Keyframes",
    "display_name": "CR Prompt List Keyframes (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Simple Prompt List": {
    "input": {
      "required": {
        "prompt_1": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_2": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_3": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_4": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ],
        "prompt_5": [
          "STRING",
          {
            "multiline": true,
            "default": "prompt"
          }
        ]
      },
      "optional": {
        "simple_prompt_list": [
          "SIMPLE_PROMPT_LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_1",
        "prompt_2",
        "prompt_3",
        "prompt_4",
        "prompt_5"
      ],
      "optional": [
        "simple_prompt_list"
      ]
    },
    "output": [
      "SIMPLE_PROMPT_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SIMPLE_PROMPT_LIST",
      "show_help"
    ],
    "name": "CR Simple Prompt List",
    "display_name": "CR Simple Prompt List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Simple Prompt List Keyframes": {
    "input": {
      "required": {
        "simple_prompt_list": [
          "SIMPLE_PROMPT_LIST"
        ],
        "keyframe_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "transition_type": [
          [
            "Default"
          ]
        ],
        "transition_speed": [
          [
            "Default"
          ]
        ],
        "transition_profile": [
          [
            "Default"
          ]
        ],
        "keyframe_format": [
          [
            "Deforum"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "simple_prompt_list",
        "keyframe_interval",
        "loops",
        "transition_type",
        "transition_speed",
        "transition_profile",
        "keyframe_format"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "keyframe_list",
      "show_help"
    ],
    "name": "CR Simple Prompt List Keyframes",
    "display_name": "CR Simple Prompt List Keyframes (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Cycle Models": {
    "input": {
      "required": {
        "mode": [
          [
            "Off",
            "Sequential"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "model_list": [
          "MODEL_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "clip",
        "model_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "show_help"
    ],
    "name": "CR Cycle Models",
    "display_name": "CR Cycle Models (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Cycle LoRAs": {
    "input": {
      "required": {
        "mode": [
          [
            "Off",
            "Sequential"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_list": [
          "LORA_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "clip",
        "lora_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "show_help"
    ],
    "name": "CR Cycle LoRAs",
    "display_name": "CR Cycle LoRAs (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Cycle Text": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "text_list": [
          "TEXT_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "text_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Cycle Text",
    "display_name": "CR Cycle Text (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Cycle Text Simple": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      },
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_list_simple": [
          "TEXT_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "frame_interval",
        "loops",
        "current_frame"
      ],
      "optional": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_list_simple"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "show_help"
    ],
    "name": "CR Cycle Text Simple",
    "display_name": "CR Cycle Text Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Cycle Images": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "image_list": [
          "IMAGE_LIST"
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "image_list",
        "frame_interval",
        "loops",
        "current_frame"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Cycle Images",
    "display_name": "CR Cycle Images (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Cycle Images Simple": {
    "input": {
      "required": {
        "mode": [
          [
            "Sequential"
          ]
        ],
        "frame_interval": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 999,
            "step": 1
          }
        ],
        "loops": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000
          }
        ],
        "current_frame": [
          "INT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 9999.0,
            "step": 1.0
          }
        ]
      },
      "optional": {
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ],
        "image_list_simple": [
          "IMAGE_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "frame_interval",
        "loops",
        "current_frame"
      ],
      "optional": [
        "image_1",
        "image_2",
        "image_3",
        "image_4",
        "image_5",
        "image_list_simple"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "show_help"
    ],
    "name": "CR Cycle Images Simple",
    "display_name": "CR Cycle Images Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Model List": {
    "input": {
      "required": {
        "ckpt_name1": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name2": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name3": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name4": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "alias4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "ckpt_name5": [
          [
            "None",
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ]
        ],
        "alias5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      },
      "optional": {
        "model_list": [
          "MODEL_LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name1",
        "alias1",
        "ckpt_name2",
        "alias2",
        "ckpt_name3",
        "alias3",
        "ckpt_name4",
        "alias4",
        "ckpt_name5",
        "alias5"
      ],
      "optional": [
        "model_list"
      ]
    },
    "output": [
      "MODEL_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL_LIST",
      "show_text"
    ],
    "name": "CR Model List",
    "display_name": "CR Model List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR LoRA List": {
    "input": {
      "required": {
        "lora_name1": [
          [
            "None"
          ]
        ],
        "alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "model_strength_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name2": [
          [
            "None"
          ]
        ],
        "alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "model_strength_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name3": [
          [
            "None"
          ]
        ],
        "alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "model_strength_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_list": [
          "lora_LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name1",
        "alias1",
        "model_strength_1",
        "clip_strength_1",
        "lora_name2",
        "alias2",
        "model_strength_2",
        "clip_strength_2",
        "lora_name3",
        "alias3",
        "model_strength_3",
        "clip_strength_3"
      ],
      "optional": [
        "lora_list"
      ]
    },
    "output": [
      "LORA_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LORA_LIST",
      "show_text"
    ],
    "name": "CR LoRA List",
    "display_name": "CR LoRA List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Text List Simple": {
    "input": {
      "required": {},
      "optional": {
        "text_1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "text_list_simple": [
          "TEXT_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_list_simple"
      ]
    },
    "output": [
      "TEXT_LIST_SIMPLE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "TEXT_LIST_SIMPLE",
      "show_help"
    ],
    "name": "CR Text List Simple",
    "display_name": "CR Text List Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Image List": {
    "input": {
      "required": {},
      "optional": {
        "image_1": [
          "IMAGE"
        ],
        "alias1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_2": [
          "IMAGE"
        ],
        "alias2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_3": [
          "IMAGE"
        ],
        "alias3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_4": [
          "IMAGE"
        ],
        "alias4": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_5": [
          "IMAGE"
        ],
        "alias5": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "image_list": [
          "image_LIST"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_1",
        "alias1",
        "image_2",
        "alias2",
        "image_3",
        "alias3",
        "image_4",
        "alias4",
        "image_5",
        "alias5",
        "image_list"
      ]
    },
    "output": [
      "IMAGE_LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_LIST",
      "show_help"
    ],
    "name": "CR Image List",
    "display_name": "CR Image List (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "CR Image List Simple": {
    "input": {
      "required": {},
      "optional": {
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ],
        "image_list_simple": [
          "IMAGE_LIST_SIMPLE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_1",
        "image_2",
        "image_3",
        "image_4",
        "image_5",
        "image_list_simple"
      ]
    },
    "output": [
      "IMAGE_LIST_SIMPLE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_LIST_SIMPLE",
      "show_help"
    ],
    "name": "CR Image List Simple",
    "display_name": "CR Image List Simple (Legacy)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
    "category": "🧩 Comfyroll Studio/🎥 Animation/💀 Legacy",
    "output_node": false
  },
  "Context Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "steps": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "step_refiner": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "ckpt_name": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "forceInput": true
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "forceInput": true
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "forceInput": true
          }
        ],
        "clip_width": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "clip_height": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "text_pos_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_pos_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ]
      },
      "hidden": {}
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed",
        "steps",
        "step_refiner",
        "cfg",
        "ckpt_name",
        "sampler",
        "scheduler",
        "clip_width",
        "clip_height",
        "text_pos_g",
        "text_pos_l",
        "text_neg_g",
        "text_neg_l",
        "mask",
        "control_net"
      ],
      "hidden": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Big (rgthree)",
    "display_name": "Context Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "version": "FLOAT"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed"
      ],
      "hidden": [
        "version"
      ]
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context (rgthree)",
    "display_name": "Context (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Switch (rgthree)",
    "display_name": "Context Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Switch Big (rgthree)",
    "display_name": "Context Switch Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Merge (rgthree)",
    "display_name": "Context Merge (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Merge Big (rgthree)",
    "display_name": "Context Merge Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Display Int (rgthree)": {
    "input": {
      "required": {
        "input": [
          "INT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Int (rgthree)",
    "display_name": "Display Int (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Display Any (rgthree)": {
    "input": {
      "required": {
        "source": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "source"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Any (rgthree)",
    "display_name": "Display Any (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Lora Loader Stack (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_01": [
          [
            "None"
          ]
        ],
        "strength_01": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_02": [
          [
            "None"
          ]
        ],
        "strength_02": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_03": [
          [
            "None"
          ]
        ],
        "strength_03": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_04": [
          [
            "None"
          ]
        ],
        "strength_04": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_01",
        "strength_01",
        "lora_02",
        "strength_02",
        "lora_03",
        "strength_03",
        "lora_04",
        "strength_04"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Loader Stack (rgthree)",
    "display_name": "Lora Loader Stack (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Seed (rgthree)": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": -1125899906842624,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEED"
    ],
    "name": "Seed (rgthree)",
    "display_name": "Seed (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Inset Crop (rgthree)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "Pixels",
            "Percentage"
          ]
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "left",
        "right",
        "top",
        "bottom"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Inset Crop (rgthree)",
    "display_name": "Image Inset Crop (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "insert_lora",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT"
    ],
    "name": "Power Prompt (rgthree)",
    "display_name": "Power Prompt (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt - Simple (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_clip",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT"
    ],
    "name": "Power Prompt - Simple (rgthree)",
    "display_name": "Power Prompt - Simple (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "KSampler Config (rgthree)": {
    "input": {
      "required": {
        "steps_total": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "refiner_step": [
          "INT",
          {
            "default": 24,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "steps_total",
        "refiner_step",
        "cfg",
        "sampler_name",
        "scheduler"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "STEPS",
      "REFINER_STEP",
      "CFG",
      "SAMPLER",
      "SCHEDULER"
    ],
    "name": "KSampler Config (rgthree)",
    "display_name": "KSampler Config (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Empty Latent Image (rgthree)": {
    "input": {
      "required": {
        "dimensions": [
          [
            "1536 x 640   (landscape)",
            "1344 x 768   (landscape)",
            "1216 x 832   (landscape)",
            "1152 x 896   (landscape)",
            "1024 x 1024  (square)",
            " 896 x 1152  (portrait)",
            " 832 x 1216  (portrait)",
            " 768 x 1344  (portrait)",
            " 640 x 1536  (portrait)"
          ],
          {
            "default": "1024 x 1024  (square)"
          }
        ],
        "clip_scale": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.5
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "clip_scale",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "CLIP_WIDTH",
      "CLIP_HEIGHT"
    ],
    "name": "SDXL Empty Latent Image (rgthree)",
    "display_name": "SDXL Empty Latent Image (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Positive (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_lora",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Positive (rgthree)",
    "display_name": "SDXL Power Prompt - Positive (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Simple / Negative (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "display_name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Any Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Any Switch (rgthree)",
    "display_name": "Any Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Comparer (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_a",
        "image_b"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Comparer (rgthree)",
    "display_name": "Image Comparer (rgthree)",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Power Lora Loader (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      },
      "optional": {},
      "hidden": {}
    },
    "input_order": {
      "required": [
        "model",
        "clip"
      ],
      "optional": [],
      "hidden": []
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Power Lora Loader (rgthree)",
    "display_name": "Power Lora Loader (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "FaceRestoreCFWithModel": {
    "input": {
      "required": {
        "facerestore_model": [
          "FACERESTORE_MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ],
        "codeformer_fidelity": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "facerestore_model",
        "image",
        "facedetection",
        "codeformer_fidelity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FaceRestoreCFWithModel",
    "display_name": "FaceRestoreCFWithModel",
    "description": "",
    "python_module": "custom_nodes.facerestore_cf",
    "category": "facerestore_cf",
    "output_node": false
  },
  "CropFace": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "facedetection": [
          [
            "retinaface_resnet50",
            "retinaface_mobile0.25",
            "YOLOv5l",
            "YOLOv5n"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "facedetection"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CropFace",
    "display_name": "CropFace",
    "description": "",
    "python_module": "custom_nodes.facerestore_cf",
    "category": "facerestore_cf",
    "output_node": false
  },
  "FaceRestoreModelLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "GFPGANv1.4.pth",
            "codeformer.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "FACERESTORE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACERESTORE_MODEL"
    ],
    "name": "FaceRestoreModelLoader",
    "display_name": "FaceRestoreModelLoader",
    "description": "",
    "python_module": "custom_nodes.facerestore_cf",
    "category": "facerestore_cf",
    "output_node": false
  },
  "Bjornulf_LoadCivitAILinks": {
    "input": {
      "required": {
        "api_token": [
          "STRING",
          {
            "default": "",
            "placeholder": "CivitAI API token"
          }
        ],
        "links_file_path": [
          "STRING",
          {
            "default": "",
            "placeholder": "Path to links file (priority if not empty)"
          }
        ],
        "selected_file": [
          [
            "Not selected"
          ],
          {
            "default": "Not selected"
          }
        ],
        "direct_links": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "placeholder": "Enter links directly (e.g., Style;Model;URN;Link;Token: <token>;Job ID: <job_id>)"
          }
        ]
      },
      "optional": {
        "auto_save": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enable Auto-Save",
            "label_off": "Disable Auto-Save"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_token",
        "links_file_path",
        "selected_file",
        "direct_links"
      ],
      "optional": [
        "auto_save"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      true
    ],
    "output_name": [
      "images",
      "status_info",
      "LIST_style"
    ],
    "name": "Bjornulf_LoadCivitAILinks",
    "display_name": "📥🕑🤖 Load CivitAI Links",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Civitai",
    "output_node": false
  },
  "Bjornulf_SplitImageGrid": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rows": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9
          }
        ],
        "columns": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9
          }
        ],
        "MODIFIED_part_index": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rows",
        "columns",
        "MODIFIED_part_index"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "INT",
      "INT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "part_1",
      "part_2",
      "part_3",
      "part_4",
      "part_5",
      "part_6",
      "part_7",
      "part_8",
      "part_9",
      "rows",
      "columns",
      "MODIFIED_part",
      "MODIFIED_part_index"
    ],
    "name": "Bjornulf_SplitImageGrid",
    "display_name": "🖼📹🔪 Split Image/Video Grid",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "image",
    "output_node": false
  },
  "Bjornulf_ReassembleImageGrid": {
    "input": {
      "required": {
        "original": [
          "IMAGE"
        ],
        "rows": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "columns": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ]
      },
      "optional": {
        "part_1": [
          "IMAGE"
        ],
        "part_2": [
          "IMAGE"
        ],
        "part_3": [
          "IMAGE"
        ],
        "part_4": [
          "IMAGE"
        ],
        "part_5": [
          "IMAGE"
        ],
        "part_6": [
          "IMAGE"
        ],
        "part_7": [
          "IMAGE"
        ],
        "part_8": [
          "IMAGE"
        ],
        "part_9": [
          "IMAGE"
        ],
        "MODIFIED_part": [
          "IMAGE"
        ],
        "MODIFIED_part_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9
          }
        ],
        "reference_video_part_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9
          }
        ],
        "auto_resize": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original",
        "rows",
        "columns"
      ],
      "optional": [
        "part_1",
        "part_2",
        "part_3",
        "part_4",
        "part_5",
        "part_6",
        "part_7",
        "part_8",
        "part_9",
        "MODIFIED_part",
        "MODIFIED_part_index",
        "reference_video_part_index",
        "auto_resize"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Bjornulf_ReassembleImageGrid",
    "display_name": "🖼📹🔨 Reassemble Image/Video Grid",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "image",
    "output_node": false
  },
  "Bjornulf_StyleSelector": {
    "input": {
      "required": {
        "category": [
          [
            "Painting",
            "Photography",
            "Digital Art",
            "3D Rendering",
            "Illustration"
          ]
        ],
        "style": [
          [
            "Abstract Expressionism",
            "Algorithmic Art",
            "Analog Film",
            "Anime",
            "Architectural Rendering",
            "Baroque",
            "Black and White",
            "Botanical Illustration",
            "Cartoon",
            "Cinematic",
            "Color",
            "Comic Book",
            "Concept Art",
            "Cubism",
            "Dadaism",
            "Digital Painting",
            "Expressionism",
            "Fashion",
            "Fauvism",
            "Fractal Art",
            "Futurism",
            "Glitch Art",
            "HDR",
            "Impressionism",
            "Isometric",
            "Landscape",
            "Line Art",
            "Long Exposure",
            "Low Poly",
            "Macro",
            "Manga",
            "Minimalism",
            "Neoclassicism",
            "Op Art",
            "Pixel Art",
            "Pop Art",
            "Portrait",
            "Post-Impressionism",
            "Ray Tracing",
            "Realism",
            "Renaissance",
            "Rococo",
            "Romanticism",
            "Sepia Tone",
            "Storyboard Art",
            "Street",
            "Surrealism",
            "Technical Illustration",
            "Vector Art",
            "Vintage",
            "Voxel"
          ]
        ],
        "model": [
          [
            "None",
            "BriXL",
            "Copax TimeLessXL",
            "FormulaXL",
            "Hassaku XL",
            "Juggernaut XL",
            "PixelPaint - Beautiful Painting Style",
            "Realistic Stock Photo",
            "SDXL",
            "SDXL Unstable Diffusers",
            "Samaritan 3D Cartoon",
            "[Lah] Mysterious"
          ],
          {
            "default": "None"
          }
        ],
        "seed": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9223372036854775807
          }
        ],
        "LOOP_random_LIST": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "LOOP_style_LIST": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "LOOP_SEQUENTIAL": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "jump": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "category",
        "style",
        "model",
        "seed",
        "LOOP_random_LIST",
        "LOOP_style_LIST",
        "LOOP_SEQUENTIAL",
        "jump"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      true,
      false,
      true
    ],
    "output_name": [
      "selected_category",
      "selected_style_LIST",
      "recommended_with_selected_category",
      "random_LIST_with_selected_category"
    ],
    "name": "Bjornulf_StyleSelector",
    "display_name": "🎨📜 Style Selector (🎲 or ♻ or ♻📑) + Civitai urn",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_OllamaVisionPromptSelector": {
    "input": {
      "required": {
        "prompt_type": [
          [
            "NONE",
            "basic",
            "advanced",
            "characters",
            "objects",
            "semantic",
            "basic_action",
            "advanced_action",
            "context",
            "SDXL",
            "FLUX",
            "video"
          ]
        ]
      },
      "optional": {
        "prefix_custom_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "suffix_custom_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "Do not include any introductory text or explanations, make it a clean one line answer."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_type"
      ],
      "optional": [
        "prefix_custom_prompt",
        "suffix_custom_prompt"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OLLAMA_VISION_PROMPT"
    ],
    "name": "Bjornulf_OllamaVisionPromptSelector",
    "display_name": "🦙👁 Ollama Vision Prompt Selector",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_AudioPreview": {
    "input": {
      "required": {
        "audio_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "autoplay": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "loop": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio_path",
        "autoplay",
        "loop"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_AudioPreview",
    "display_name": "🔊▶ Audio Preview (Audio player)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "audio",
    "output_node": true
  },
  "Bjornulf_SaveTmpAudio": {
    "input": {
      "optional": {
        "audio": [
          "AUDIO"
        ],
        "audio_path": [
          "STRING"
        ]
      }
    },
    "input_order": {
      "optional": [
        "audio",
        "audio_path"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_SaveTmpAudio",
    "display_name": "💾🔊 Save Audio (tmp_api.wav/mp3) ⚠️💣",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_SaveTmpVideo": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_SaveTmpVideo",
    "display_name": "💾📹 Save Video (tmp_api.mp4/mkv/webm) ⚠️💣",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_MathNode": {
    "input": {
      "required": {
        "operation": [
          [
            "+",
            "-",
            "*",
            "/",
            "%"
          ],
          {
            "default": "+"
          }
        ],
        "num_inputs": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ]
      },
      "hidden": {
        "value_1": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_2": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_3": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_4": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_5": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_6": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_7": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_8": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_9": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_10": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_11": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_12": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_13": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_14": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_15": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_16": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_17": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_18": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_19": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_20": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_21": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_22": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_23": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_24": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_25": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_26": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_27": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_28": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_29": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_30": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_31": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_32": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_33": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_34": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_35": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_36": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_37": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_38": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_39": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_40": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_41": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_42": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_43": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_44": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_45": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_46": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_47": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_48": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_49": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_50": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_51": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_52": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_53": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_54": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_55": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_56": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_57": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_58": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_59": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_60": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_61": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_62": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_63": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_64": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_65": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_66": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_67": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_68": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_69": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_70": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_71": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_72": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_73": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_74": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_75": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_76": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_77": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_78": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_79": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_80": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_81": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_82": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_83": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_84": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_85": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_86": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_87": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_88": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_89": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_90": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_91": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_92": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_93": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_94": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_95": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_96": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_97": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_98": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_99": [
          "*",
          {
            "forceInput": true
          }
        ],
        "value_100": [
          "*",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "operation",
        "num_inputs"
      ],
      "hidden": [
        "value_1",
        "value_2",
        "value_3",
        "value_4",
        "value_5",
        "value_6",
        "value_7",
        "value_8",
        "value_9",
        "value_10",
        "value_11",
        "value_12",
        "value_13",
        "value_14",
        "value_15",
        "value_16",
        "value_17",
        "value_18",
        "value_19",
        "value_20",
        "value_21",
        "value_22",
        "value_23",
        "value_24",
        "value_25",
        "value_26",
        "value_27",
        "value_28",
        "value_29",
        "value_30",
        "value_31",
        "value_32",
        "value_33",
        "value_34",
        "value_35",
        "value_36",
        "value_37",
        "value_38",
        "value_39",
        "value_40",
        "value_41",
        "value_42",
        "value_43",
        "value_44",
        "value_45",
        "value_46",
        "value_47",
        "value_48",
        "value_49",
        "value_50",
        "value_51",
        "value_52",
        "value_53",
        "value_54",
        "value_55",
        "value_56",
        "value_57",
        "value_58",
        "value_59",
        "value_60",
        "value_61",
        "value_62",
        "value_63",
        "value_64",
        "value_65",
        "value_66",
        "value_67",
        "value_68",
        "value_69",
        "value_70",
        "value_71",
        "value_72",
        "value_73",
        "value_74",
        "value_75",
        "value_76",
        "value_77",
        "value_78",
        "value_79",
        "value_80",
        "value_81",
        "value_82",
        "value_83",
        "value_84",
        "value_85",
        "value_86",
        "value_87",
        "value_88",
        "value_89",
        "value_90",
        "value_91",
        "value_92",
        "value_93",
        "value_94",
        "value_95",
        "value_96",
        "value_97",
        "value_98",
        "value_99",
        "value_100"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "INT",
      "STRING"
    ],
    "name": "Bjornulf_MathNode",
    "display_name": "🧮 Basic Math",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Utilities/Math",
    "output_node": false
  },
  "Bjornulf_TextAnalyzer": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "STRING",
      "STRING",
      "FLOAT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "number_lines",
      "number_words",
      "number_characters",
      "language",
      "sentiment",
      "sentiment_polarity",
      "type",
      "character",
      "sentence",
      "subject",
      "action",
      "target"
    ],
    "name": "Bjornulf_TextAnalyzer",
    "display_name": "📊🔍 Text Analyzer",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ListSelector": {
    "input": {
      "required": {
        "input_LIST": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "selection": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9999
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": ";",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_LIST",
        "selection",
        "delimiter"
      ]
    },
    "output": [
      "INT",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "selected_element_INT",
      "selected_element_STRING",
      "list_length_INT"
    ],
    "name": "Bjornulf_ListSelector",
    "display_name": "📑👈 Select from List",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_WriteTextPickMeGlobal": {
    "input": {
      "required": {
        "global_pickme_id": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "picked": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "lines": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "global_pickme_id",
        "picked",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "Bjornulf_WriteTextPickMeGlobal",
    "display_name": "🌎✒👉 Global Write Pick Me",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_LoadTextPickMeGlobal": {
    "input": {
      "required": {
        "global_pickme_id": [
          "STRING",
          {
            "default": "default"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "global_pickme_id"
      ],
      "hidden": [
        "prompt"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "picked_text",
      "picked_text_as_variable",
      "random"
    ],
    "name": "Bjornulf_LoadTextPickMeGlobal",
    "display_name": "🌎📥 Load Global Pick Me",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_PlayAudio": {
    "input": {
      "required": {
        "anything": [
          "*",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "AUDIO": [
          "AUDIO",
          {
            "forceInput": true
          }
        ],
        "audio_path": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "anything"
      ],
      "optional": [
        "AUDIO",
        "audio_path"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "anything"
    ],
    "name": "Bjornulf_PlayAudio",
    "display_name": "🔊▶ Play Audio",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "audio",
    "output_node": false
  },
  "Bjornulf_SwitchText": {
    "input": {
      "required": {
        "STRING": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "switch": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "ONLY_ME_combine_text": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "STRING",
        "switch",
        "ONLY_ME_combine_text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_SwitchText",
    "display_name": "🔛📝 Text Switch On/Off",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_SwitchAnything": {
    "input": {
      "required": {
        "anything": [
          "*",
          {
            "forceInput": true
          }
        ],
        "switch": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "anything",
        "switch"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "anything"
    ],
    "name": "Bjornulf_SwitchAnything",
    "display_name": "🔛✨ Anything Switch On/Off",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_GlobalSeedManager": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4294967294
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT",
      "STRING",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "new_seed_INT",
      "new_seed_STRING",
      "previous_seed_INT",
      "all_seeds_LIST"
    ],
    "name": "Bjornulf_GlobalSeedManager",
    "display_name": "🌎🎲 Global Seed Manager",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_RandomIntNode": {
    "input": {
      "required": {
        "min_value": [
          "INT",
          {
            "default": 1
          }
        ],
        "max_value": [
          "INT",
          {
            "default": 10
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "min_value",
        "max_value",
        "seed"
      ]
    },
    "output": [
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "STRING"
    ],
    "name": "Bjornulf_RandomIntNode",
    "display_name": "🎲 Random Integer",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_RandomFloatNode": {
    "input": {
      "required": {
        "min_value": [
          "FLOAT",
          {
            "default": 1.0
          }
        ],
        "max_value": [
          "FLOAT",
          {
            "default": 10.0
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "min_value",
        "max_value",
        "seed"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "STRING"
    ],
    "name": "Bjornulf_RandomFloatNode",
    "display_name": "🎲 Random Float",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextToVariable": {
    "input": {
      "required": {
        "variable_name": [
          "STRING",
          {
            "default": "variable_name"
          }
        ],
        "text_value": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "variable_name",
        "text_value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_TextToVariable",
    "display_name": "📌🅰️ Set Variable from Text",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Custom",
    "output_node": false
  },
  "Bjornulf_WriteTextPickMeChain": {
    "input": {
      "required": {
        "picked": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "lines": 10
          }
        ]
      },
      "optional": {
        "pickme_chain": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "picked",
        "text"
      ],
      "optional": [
        "pickme_chain"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "text",
      "chain_text"
    ],
    "name": "Bjornulf_WriteTextPickMeChain",
    "display_name": "✒👉 Write Pick Me Chain",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_FourImageViewer": {
    "input": {
      "required": {},
      "optional": {
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_1",
        "image_2",
        "image_3",
        "image_4"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_FourImageViewer",
    "display_name": "🖼👁 Preview 1-4 images (compare)",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_PreviewFirstImage": {
    "input": {
      "required": {},
      "optional": {
        "images": [
          "IMAGE"
        ],
        "path": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "images",
        "path"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_PreviewFirstImage",
    "display_name": "🖼👁 Preview (first) image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "image",
    "output_node": true
  },
  "Bjornulf_HuggingFaceDownloader": {
    "input": {
      "required": {
        "hf_token": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "repo_id": [
          "STRING",
          {
            "multiline": false,
            "default": "Kijai/HunyuanVideo_comfy"
          }
        ],
        "filename": [
          "STRING",
          {
            "multiline": false,
            "default": "hunyuan_video_vae_bf16.safetensors"
          }
        ],
        "model_type": [
          [
            "models/vae",
            "models/unet",
            "models/clip",
            "models/text_encoders",
            "models/diffusion_models",
            "models/lora",
            "models/controlnet",
            "models/upscale",
            "models/embeddings"
          ]
        ]
      },
      "optional": {
        "custom_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hf_token",
        "repo_id",
        "filename",
        "model_type"
      ],
      "optional": [
        "custom_path"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "status"
    ],
    "name": "Bjornulf_HuggingFaceDownloader",
    "display_name": "💾 Huggingface Downloader",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_AllLoraSelector": {
    "input": {
      "required": {
        "number_of_loras": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      },
      "optional": {
        "lora_1": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_2": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_3": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_4": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_5": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_6": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_7": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_8": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_9": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_10": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_11": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_12": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_13": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_14": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_15": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_16": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_17": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_18": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_19": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_20": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_loras",
        "model",
        "clip"
      ],
      "optional": [
        "lora_1",
        "strength_model_1",
        "strength_clip_1",
        "lora_2",
        "strength_model_2",
        "strength_clip_2",
        "lora_3",
        "strength_model_3",
        "strength_clip_3",
        "lora_4",
        "strength_model_4",
        "strength_clip_4",
        "lora_5",
        "strength_model_5",
        "strength_clip_5",
        "lora_6",
        "strength_model_6",
        "strength_clip_6",
        "lora_7",
        "strength_model_7",
        "strength_clip_7",
        "lora_8",
        "strength_model_8",
        "strength_clip_8",
        "lora_9",
        "strength_model_9",
        "strength_clip_9",
        "lora_10",
        "strength_model_10",
        "strength_clip_10",
        "lora_11",
        "strength_model_11",
        "strength_clip_11",
        "lora_12",
        "strength_model_12",
        "strength_clip_12",
        "lora_13",
        "strength_model_13",
        "strength_clip_13",
        "lora_14",
        "strength_model_14",
        "strength_clip_14",
        "lora_15",
        "strength_model_15",
        "strength_clip_15",
        "lora_16",
        "strength_model_16",
        "strength_clip_16",
        "lora_17",
        "strength_model_17",
        "strength_clip_17",
        "lora_18",
        "strength_model_18",
        "strength_clip_18",
        "lora_19",
        "strength_model_19",
        "strength_clip_19",
        "lora_20",
        "strength_model_20",
        "strength_clip_20"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "lora_paths",
      "lora_names",
      "lora_folders"
    ],
    "name": "Bjornulf_AllLoraSelector",
    "display_name": "👑 Combine Loras, Lora stack",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoadGlobalVariables": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9223372036854775807
          }
        ]
      },
      "optional": {
        "filename": [
          "STRING",
          {
            "default": ""
          }
        ],
        "file_list": [
          [
            "default"
          ],
          {
            "default": "default"
          }
        ],
        "connect_to_workflow": [
          "*",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "optional": [
        "filename",
        "file_list",
        "connect_to_workflow"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "variables"
    ],
    "name": "Bjornulf_LoadGlobalVariables",
    "display_name": "📥🅰️ Load Global Variables",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_SaveGlobalVariables": {
    "input": {
      "required": {
        "variables": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "mode": [
          [
            "append",
            "overwrite"
          ],
          {
            "default": "append"
          }
        ]
      },
      "optional": {
        "filename": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "variables",
        "mode"
      ],
      "optional": [
        "filename"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "connect_to_workflow"
    ],
    "name": "Bjornulf_SaveGlobalVariables",
    "display_name": "💾🅰️ Save Global Variables",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ModelClipVaeSelector": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 10,
            "step": 1
          }
        ],
        "selected_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "model_1": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_1": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_1": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "model_2": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_2": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_2": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "RANDOM": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "LOOP": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "LOOP_SEQUENTIAL": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "jump": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 9223372036854775807
          }
        ]
      },
      "hidden": {
        "model_3": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_4": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_5": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_6": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_7": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_8": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_9": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_10": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_3": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_4": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_5": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_6": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_7": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_8": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_9": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_10": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_3": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_4": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_5": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_6": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_7": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_8": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_9": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_10": [
          "VAE",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs",
        "selected_number",
        "model_1",
        "clip_1",
        "vae_1",
        "model_2",
        "clip_2",
        "vae_2",
        "RANDOM",
        "LOOP",
        "LOOP_SEQUENTIAL",
        "jump",
        "seed"
      ],
      "hidden": [
        "model_3",
        "model_4",
        "model_5",
        "model_6",
        "model_7",
        "model_8",
        "model_9",
        "model_10",
        "clip_3",
        "clip_4",
        "clip_5",
        "clip_6",
        "clip_7",
        "clip_8",
        "clip_9",
        "clip_10",
        "vae_3",
        "vae_4",
        "vae_5",
        "vae_6",
        "vae_7",
        "vae_8",
        "vae_9",
        "vae_10"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "INT"
    ],
    "output_is_list": [
      true,
      true,
      true,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "current_selection"
    ],
    "name": "Bjornulf_ModelClipVaeSelector",
    "display_name": "📝👈 Model-Clip-Vae selector (🎲 or ♻ or ♻📑)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_DisplayNote": {
    "input": {
      "required": {
        "any": [
          "*",
          {
            "forceInput": true
          }
        ],
        "display_text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "display_text"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "any"
    ],
    "name": "Bjornulf_DisplayNote",
    "display_name": "📒 Note",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ImageNote": {
    "input": {
      "optional": {
        "images": [
          "IMAGE"
        ],
        "image_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "note": [
          "STRING",
          {
            "default": ""
          }
        ],
        "note_2": [
          "STRING",
          {
            "default": ""
          }
        ],
        "note_3": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "optional": [
        "images",
        "image_path",
        "note",
        "note_2",
        "note_3"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image_path",
      "note"
    ],
    "name": "Bjornulf_ImageNote",
    "display_name": "🖼📒 Image Note",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ImageNoteLoadImage": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "note": [
          "STRING",
          {
            "default": ""
          }
        ],
        "note_2": [
          "STRING",
          {
            "default": ""
          }
        ],
        "note_3": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "note",
        "note_2",
        "note_3"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "image_path",
      "note"
    ],
    "name": "Bjornulf_ImageNoteLoadImage",
    "display_name": "📥🖼📒 Image Note (Load image)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LineSelector": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "line_number": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999
          }
        ],
        "RANDOM": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "LOOP": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "LOOP_SEQUENTIAL": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "jump": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "pick_random_variable": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "variables": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9223372036854775807
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "line_number",
        "RANDOM",
        "LOOP",
        "LOOP_SEQUENTIAL",
        "jump",
        "pick_random_variable"
      ],
      "optional": [
        "variables",
        "seed"
      ]
    },
    "output": [
      "STRING",
      "INT",
      "INT"
    ],
    "output_is_list": [
      true,
      false,
      false
    ],
    "output_name": [
      "text",
      "remaining_cycles",
      "current_line"
    ],
    "name": "Bjornulf_LineSelector",
    "display_name": "📝👈🅰️ Line selector (🎲 or ♻ or ♻📑)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_XTTSConfig": {
    "input": {
      "required": {
        "TTS_url": [
          "STRING",
          {
            "default": "http://localhost:8020"
          }
        ],
        "language": [
          [
            "Arabic",
            "Czech",
            "German",
            "English",
            "Spanish",
            "French",
            "Hindi",
            "Hungarian",
            "Italian",
            "Japanese",
            "Korean",
            "Dutch",
            "Polish",
            "Portuguese",
            "Russian",
            "Turkish",
            "Chinese"
          ],
          {
            "default": "English"
          }
        ],
        "speaker_wav": [
          "STRING",
          {
            "default": "default"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "TTS_url",
        "language",
        "speaker_wav"
      ]
    },
    "output": [
      "TTS_URL",
      "TTS_LANGUAGE",
      "TTS_SPEAKER"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "TTS_URL",
      "TTS_LANGUAGE",
      "TTS_SPEAKER"
    ],
    "name": "Bjornulf_XTTSConfig",
    "display_name": "🔊 TTS Configuration ⚙",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_KokoroTTS": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "voice": [
          [
            "Bella (American Female) - af_bella",
            "Nicole (American Female) - af_nicole",
            "Sarah (American Female) - af_sarah",
            "Sky (American Female) - af_sky",
            "Default (American Female) - af",
            "Adam (American Male) - am_adam",
            "Michael (American Male) - am_michael",
            "Emma (British Female) - bf_emma",
            "Isabella (British Female) - bf_isabella",
            "George (British Male) - bm_george",
            "Lewis (British Male) - bm_lewis"
          ],
          {
            "default": "Default (American Female) - af"
          }
        ],
        "language": [
          [
            "en-us",
            "en-gb",
            "fr-fr",
            "ja",
            "ko",
            "cmn"
          ],
          {
            "default": "en-us"
          }
        ],
        "speed": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.5,
            "max": 2.0,
            "step": 0.1
          }
        ],
        "autoplay": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "save_audio": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "connect_to_workflow": [
          "*",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "voice",
        "language",
        "speed",
        "autoplay",
        "save_audio",
        "overwrite",
        "seed"
      ],
      "optional": [
        "connect_to_workflow"
      ]
    },
    "output": [
      "AUDIO",
      "STRING",
      "STRING",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "AUDIO",
      "audio_path",
      "audio_full_path",
      "audio_duration"
    ],
    "name": "Bjornulf_KokoroTTS",
    "display_name": "📝➜🔊 Kokoro - Text to Speech",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf/Kokoro",
    "output_node": false
  },
  "Bjornulf_LatentResolutionSelector": {
    "input": {
      "required": {
        "resolution_preset": [
          [
            "SD1.5 - Square - 512x512 (1:1)",
            "SD1.5 - Square - 640x640 (1:1)",
            "SD1.5 - Square - 768x768 (1:1)",
            "SD1.5 - Landscape - 640x480 (4:3)",
            "SD1.5 - Landscape - 768x512 (3:2)",
            "SD1.5 - Landscape - 704x384 (16:9)",
            "SD1.5 - Landscape - 768x384 (2:1)",
            "SD1.5 - Portrait - 480x640 (3:4)",
            "SD1.5 - Portrait - 512x768 (2:3)",
            "SD1.5 - Portrait - 384x704 (9:16)",
            "SD1.5 - Portrait - 384x768 (1:2)",
            "SDXL - Square - 1024x1024 (1:1)",
            "SDXL - Square - 1280x1280 (1:1)",
            "SDXL - Landscape - 1024x768 (4:3)",
            "SDXL - Landscape - 1152x864 (4:3)",
            "SDXL - Landscape - 1280x960 (4:3)",
            "SDXL - Landscape - 1152x768 (3:2)",
            "SDXL - Landscape - 1344x896 (3:2)",
            "SDXL - Landscape - 1344x768 (16:9)",
            "SDXL - Landscape - 1344x576 (21:9)",
            "SDXL - Portrait - 768x1024 (3:4)",
            "SDXL - Portrait - 864x1152 (3:4)",
            "SDXL - Portrait - 960x1280 (3:4)",
            "SDXL - Portrait - 768x1152 (2:3)",
            "SDXL - Portrait - 896x1344 (2:3)",
            "SDXL - Portrait - 768x1344 (9:16)",
            "FLUX - Square - 1536x1536 (1:1)",
            "FLUX - Square - 1920x1920 (1:1)",
            "FLUX - Landscape - 1536x1152 (4:3)",
            "FLUX - Landscape - 1920x1440 (4:3)",
            "FLUX - Landscape - 1536x1024 (3:2)",
            "FLUX - Landscape - 1856x1088 (~16:9)",
            "FLUX - Landscape - 1920x1280 (3:2)",
            "FLUX - Landscape - 1920x1080 (16:9)",
            "FLUX - Landscape - 1920x816 (21:9)",
            "FLUX - Portrait - 1152x1536 (3:4)",
            "FLUX - Portrait - 1440x1920 (3:4)",
            "FLUX - Portrait - 1024x1536 (2:3)",
            "FLUX - Portrait - 1088x1856 (~16:9)",
            "FLUX - Portrait - 1280x1920 (2:3)",
            "FLUX - Portrait - 1080x1920 (9:16)",
            "FLUX - Portrait - 816x1920 (21:9)"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution_preset",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "Bjornulf_LatentResolutionSelector",
    "display_name": "🩷 Empty Latent Selector",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoaderLoraWithPath": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_path",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "name": "Bjornulf_LoaderLoraWithPath",
    "display_name": "📥👑 Load Lora with Path",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoadTextFromPath": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": "Bjornulf/Text/example.txt"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "file_path"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "text",
      "filename",
      "full_path"
    ],
    "name": "Bjornulf_LoadTextFromPath",
    "display_name": "📥 Load Text From Path",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoadTextFromFolder": {
    "input": {
      "required": {
        "text_file": [
          [
            "no_files_found"
          ],
          {
            "default": "no_files_found"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_file"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "text",
      "filename",
      "full_path"
    ],
    "name": "Bjornulf_LoadTextFromFolder",
    "display_name": "📥 Load Text From Bjornulf Folder",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextSplitin5": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": "\\n",
            "multiline": false
          }
        ],
        "ignore_before_equals": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "delimiter",
        "ignore_before_equals"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "part1",
      "part2",
      "part3",
      "part4",
      "part5"
    ],
    "name": "Bjornulf_TextSplitin5",
    "display_name": "📝🔪 Text split in 5",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextSplitin10": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": "\\n",
            "multiline": false
          }
        ],
        "ignore_before_equals": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "delimiter",
        "ignore_before_equals"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "part1",
      "part2",
      "part3",
      "part4",
      "part5",
      "part6",
      "part7",
      "part8",
      "part9",
      "part10"
    ],
    "name": "Bjornulf_TextSplitin10",
    "display_name": "📝🔪 Text split in 10",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_APIGenerateFlux": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "multiline": false,
            "default": "1ae1f1cc-de28-4682-bc4c-6ac2fdff79cc"
          }
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "A beautiful landscape"
          }
        ],
        "model": [
          [
            "flux-pro-1.1-ultra",
            "flux-pro-1.1",
            "flux-pro",
            "flux-dev"
          ],
          {
            "default": "flux-pro-1.1-ultra"
          }
        ],
        "aspect_ratio": [
          [
            "16:9",
            "1:1",
            "4:3",
            "3:2",
            "21:9",
            "9:21"
          ],
          {
            "default": "16:9"
          }
        ],
        "width": [
          "INT",
          {
            "default": 2752,
            "min": 256,
            "max": 2752,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 1536,
            "min": 256,
            "max": 1536,
            "step": 32
          }
        ],
        "output_format": [
          [
            "png",
            "jpeg"
          ],
          {
            "default": "png"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "safety_tolerance": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 6
          }
        ],
        "raw": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image_prompt_strength": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 50,
            "min": 15,
            "max": 50
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 2.5,
            "min": 1.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "prompt_upsampling": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "prompt",
        "model",
        "aspect_ratio",
        "width",
        "height",
        "output_format"
      ],
      "optional": [
        "seed",
        "safety_tolerance",
        "raw",
        "image_prompt_strength",
        "steps",
        "guidance",
        "prompt_upsampling"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_APIGenerateFlux",
    "display_name": "☁🎨 API Image Generator (Black Forest Labs - Flux) 🎨☁",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "BFL API",
    "output_node": false
  },
  "Bjornulf_APIGenerateFalAI": {
    "input": {
      "required": {
        "api_token": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "display": "Fal.ai API Token"
          }
        ],
        "model": [
          [
            "fal-ai/flux-pro/v1.1-ultra",
            "fal-ai/recraft-v3",
            "fal-ai/flux-general/image-to-image"
          ],
          {
            "default": "fal-ai/flux-pro/v1.1-ultra"
          }
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "A blackhole in space"
          }
        ],
        "number_of_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 2147483647
          }
        ],
        "timeout": [
          "INT",
          {
            "default": 300,
            "min": 60,
            "max": 1800,
            "step": 60,
            "display": "Timeout (seconds)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_token",
        "model",
        "prompt",
        "number_of_images",
        "seed",
        "timeout"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "generation_info"
    ],
    "name": "Bjornulf_APIGenerateFalAI",
    "display_name": "☁🎨 API Image Generator (FalAI) 🎨☁",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "FalAI",
    "output_node": false
  },
  "Bjornulf_APIGenerateStability": {
    "input": {
      "required": {
        "api_key": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "A beautiful landscape"
          }
        ]
      },
      "optional": {
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "aspect_ratio": [
          [
            "16:9",
            "1:1",
            "21:9",
            "2:3",
            "3:2",
            "4:5",
            "5:4",
            "9:16",
            "9:21"
          ],
          {
            "default": "1:1"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294
          }
        ],
        "output_format": [
          [
            "jpeg",
            "png",
            "webp"
          ],
          {
            "default": "png"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_key",
        "prompt"
      ],
      "optional": [
        "negative_prompt",
        "aspect_ratio",
        "seed",
        "output_format",
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_APIGenerateStability",
    "display_name": "☁🎨 API Image Generator (Stability - Stable Diffusion) 🎨☁",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_APIGenerateCivitAI": {
    "input": {
      "required": {
        "api_token": [
          "STRING",
          {
            "default": "",
            "placeholder": "CivitAI API token"
          }
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "RAW photo, face portrait photo of 26 y.o woman"
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "low quality, blurry, pixelated, distorted, artifacts"
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 128,
            "max": 1024,
            "step": 64
          }
        ],
        "height": [
          "INT",
          {
            "default": 768,
            "min": 128,
            "max": 1024,
            "step": 64
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 1.0,
            "max": 30.0,
            "step": 0.1
          }
        ],
        "seed": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9223372036854775807
          }
        ],
        "number_of_images": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "timeout": [
          "INT",
          {
            "default": 300,
            "min": 60,
            "max": 1800,
            "step": 60
          }
        ]
      },
      "optional": {
        "model_urn": [
          "STRING",
          {
            "default": "urn:air:sdxl:checkpoint:civitai:101055@128078"
          }
        ],
        "add_LORA": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "DO_NOT_WAIT": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Save Links Only",
            "label_off": "Generate Now"
          }
        ],
        "links_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "LIST_from_style_selector": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "e.g., Low Poly ;Samaritan 3D Cartoon;urn:air:sdxl:checkpoint:civitai:81270@144566;https://civitai.green/models/81270?modelVersionId=144566"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "api_token",
        "prompt",
        "negative_prompt",
        "width",
        "height",
        "steps",
        "cfg_scale",
        "seed",
        "number_of_images",
        "timeout"
      ],
      "optional": [
        "model_urn",
        "add_LORA",
        "DO_NOT_WAIT",
        "links_file",
        "LIST_from_style_selector"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "generation_info"
    ],
    "name": "Bjornulf_APIGenerateCivitAI",
    "display_name": "☁🎨 API Image Generator (CivitAI) 🎨☁",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Civitai",
    "output_node": false
  },
  "Bjornulf_CivitAIModelSelectorPony": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "name",
      "civitai_url"
    ],
    "name": "Bjornulf_CivitAIModelSelectorPony",
    "display_name": "📥 Load checkpoint Pony (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAIModelSelectorSD15": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "name",
      "civitai_url"
    ],
    "name": "Bjornulf_CivitAIModelSelectorSD15",
    "display_name": "📥 Load checkpoint SD1.5 (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAIModelSelectorSDXL": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "name",
      "civitai_url"
    ],
    "name": "Bjornulf_CivitAIModelSelectorSDXL",
    "display_name": "📥 Load checkpoint SDXL (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAIModelSelectorFLUX_S": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "name",
      "civitai_url"
    ],
    "name": "Bjornulf_CivitAIModelSelectorFLUX_S",
    "display_name": "📥 Load checkpoint FLUX Schnell (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAIModelSelectorFLUX_D": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "name",
      "civitai_url"
    ],
    "name": "Bjornulf_CivitAIModelSelectorFLUX_D",
    "display_name": "📥 Load checkpoint FLUX Dev (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAILoraSelectorSD15": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "clip",
        "strength_model",
        "strength_clip",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "name",
      "civitai_url",
      "trigger_words"
    ],
    "name": "Bjornulf_CivitAILoraSelectorSD15",
    "display_name": "📥👑 Load Lora SD1.5 (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAILoraSelectorSDXL": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "clip",
        "strength_model",
        "strength_clip",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "name",
      "civitai_url",
      "trigger_words"
    ],
    "name": "Bjornulf_CivitAILoraSelectorSDXL",
    "display_name": "📥👑 Load Lora SDXL (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAILoraSelectorPONY": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "clip",
        "strength_model",
        "strength_clip",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "name",
      "civitai_url",
      "trigger_words"
    ],
    "name": "Bjornulf_CivitAILoraSelectorPONY",
    "display_name": "📥👑 Load Lora Pony (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CivitAILoraSelectorHunyuan": {
    "input": {
      "required": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": true
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "civitai_token": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "clip",
        "strength_model",
        "strength_clip",
        "civitai_token"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "name",
      "civitai_url",
      "trigger_words"
    ],
    "name": "Bjornulf_CivitAILoraSelectorHunyuan",
    "display_name": "📥👑📹 Load Lora Hunyuan Video (+Download from CivitAi)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_APIGenerateCivitAIAddLORA": {
    "input": {
      "required": {
        "lora_urn": [
          "STRING",
          {
            "multiline": false,
            "default": "urn:air:flux1:lora:civitai:790034@883473"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "add_LORA": [
          "add_LORA",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_urn",
        "strength"
      ],
      "optional": [
        "add_LORA"
      ]
    },
    "output": [
      "add_LORA"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "add_LORA"
    ],
    "name": "Bjornulf_APIGenerateCivitAIAddLORA",
    "display_name": "☁👑 Add Lora (API ONLY - CivitAI) 👑☁",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Civitai",
    "output_node": false
  },
  "Bjornulf_TextGenerator": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "camera_angle": [
          [
            "NONE",
            "RANDOM",
            "front view",
            "side view",
            "three-quarter view",
            "back view",
            "bird's eye view",
            "worm's eye view",
            "dutch angle",
            "over-the-shoulder",
            "high angle",
            "low angle",
            "eye level",
            "aerial view",
            "tilted angle"
          ]
        ],
        "shot_type": [
          [
            "NONE",
            "RANDOM",
            "close-up",
            "medium shot",
            "full body",
            "wide shot",
            "extreme close-up",
            "medium close-up",
            "medium long shot",
            "long shot",
            "extreme long shot",
            "establishing shot"
          ]
        ],
        "multi_char_action": [
          [
            "NONE",
            "CUSTOM",
            "RANDOM",
            "talking to each other",
            "fighting",
            "dancing",
            "walking together",
            "having dinner",
            "playing games",
            "working together",
            "arguing",
            "celebrating",
            "performing",
            "studying",
            "shopping"
          ]
        ],
        "CUSTOM_action": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "GEN_STYLE": [
          "GEN_STYLE,STRING"
        ],
        "GEN_CHARACTER": [
          "GEN_CHARACTER,STRING"
        ],
        "GEN_SCENE": [
          "GEN_SCENE,STRING"
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "camera_angle",
        "shot_type",
        "multi_char_action",
        "CUSTOM_action",
        "CUSTOM_PROMPT"
      ],
      "optional": [
        "GEN_STYLE",
        "GEN_CHARACTER",
        "GEN_SCENE"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_TextGenerator",
    "display_name": "🔥📝 Image Text Generator 📝🔥",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorCharacterPose": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "pose_view": [
          [
            "NONE",
            "RANDOM",
            "view from the front",
            "view from the back",
            "view from the side",
            "view from above",
            "view from below",
            "three-quarter view",
            "profile view"
          ]
        ],
        "pose_camera": [
          [
            "NONE",
            "RANDOM",
            "facing camera",
            "looking away from camera",
            "looking towards camera",
            "looking past camera",
            "side glance at camera",
            "avoiding camera",
            "direct eye contact with camera"
          ]
        ],
        "pose_face": [
          [
            "NONE",
            "RANDOM",
            "smiling",
            "serious",
            "laughing",
            "crying",
            "angry",
            "neutral",
            "surprised",
            "smirking",
            "winking",
            "thoughtful",
            "joyful",
            "flirty",
            "disgusted",
            "fearful",
            "confident",
            "curious",
            "big wide smile",
            "closed-mouth smile",
            "grinning with teeth showing",
            "smirk with one eyebrow raised",
            "playful wink",
            "both eyebrows raised in surprise",
            "squinting in skepticism",
            "eyes wide open in shock",
            "blowing a kiss",
            "cheeks puffed out",
            "pursed lips",
            "sticking tongue out playfully",
            "sticking tongue out and winking",
            "biting lower lip",
            "frowning deeply",
            "pout with lower lip pushed out",
            "teeth clenched in frustration",
            "grimace",
            "closed eyes with a serene smile",
            "tears streaming down face",
            "sniffing back tears",
            "brows furrowed in anger",
            "scowling",
            "intense glare",
            "half-smile with eyes looking to the side",
            "expression of utter boredom",
            "slight frown with head tilted",
            "narrowed eyes in suspicion",
            "cheek resting in one hand",
            "laughing with head tilted back",
            "cheeky grin with eyes squinted",
            "lip curled in a sneer",
            "tongue sticking out in mock disgust",
            "face scrunched up in mock anger",
            "confused look with one eyebrow raised",
            "blinking rapidly in disbelief",
            "mouth open in exaggerated gasp",
            "biting the inside of cheek",
            "tongue pressed against cheek in thought",
            "mouth slightly open in awe",
            "nostrils flared in anger",
            "eyes closed with a broad grin",
            "head tilted with eyes closed in bliss",
            "half-closed eyes in tiredness",
            "face scrunched in concentration",
            "eyebrows arched in flirtation",
            "head tilted with lips slightly parted",
            "chin raised in defiance",
            "rolling eyes dramatically",
            "wide eyes and mouth open in excitement",
            "lips drawn into a straight line of neutrality",
            "sucking in cheeks",
            "lip biting with shyness",
            "lower lip quivering in sadness",
            "snarling with bared teeth",
            "lips puckered as if blowing",
            "tongue clicking against teeth",
            "smiling through clenched teeth",
            "head tilted slightly with soft smile",
            "face tilted downward with eyes looking up",
            "cheek resting against fist in boredom",
            "glaring intensely while squinting",
            "eyes tightly shut in frustration",
            "face in an exaggerated yawn",
            "sneaky grin with eyes darting to the side",
            "mock shock with hands framing face",
            "head tilted back with mouth wide open in laughter",
            "eyes narrowed with lips curled upwards",
            "face cringing as if tasting something sour",
            "eyebrows drawn together in determination",
            "playful tongue between teeth",
            "one eyebrow raised with a small smile",
            "eyelids fluttering with a dreamy expression",
            "pained expression with eyes closed",
            "nostrils flared with head tilted back in triumph",
            "terrified wide eyes and mouth agape",
            "trembling lower lip with tearful eyes",
            "fearful expression with eyebrows high and pulled together",
            "screaming face with mouth wide open and eyes shut tight",
            "face frozen in shock with wide eyes and raised eyebrows",
            "quivering lips with eyes darting nervously",
            "looking over shoulder with fearful glance",
            "clenched jaw with darting eyes in paranoia",
            "horrified expression with hands covering mouth",
            "gasp of surprise with hands pressed to cheeks",
            "face twisted in agony, teeth bared",
            "face half-hidden in hands in shame",
            "smirking with lips curled on one side",
            "sneaky smirk with narrowed eyes",
            "sarcastic smirk with head slightly tilted",
            "eyes narrowed in resentment with tight-lipped smile",
            "mocking smile with exaggerated lip curve",
            "sad smile with downcast eyes",
            "cautious smile with one eyebrow raised",
            "hesitant expression with eyes glancing sideways",
            "overwhelmed expression with a shaky breath and moist eyes",
            "fearful squinting with head recoiled",
            "deeply worried frown with chin resting on hands",
            "anxious look with lip pressed between teeth",
            "shocked with hand covering one eye and wide open mouth",
            "frantic expression with eyebrows raised and eyes darting around",
            "expression of disbelief with head tilted slightly and a blank stare",
            "teasing grin with head tilted forward",
            "expression of mischief with eyes squinting and tongue peeking out"
          ]
        ],
        "pose_arms": [
          [
            "NONE",
            "RANDOM",
            "one hand in the air",
            "thumbs up with both hands",
            "thumbs up with one hand",
            "hands raised above head",
            "hands behind head",
            "hands in pockets",
            "hand on chin",
            "peace sign",
            "pointing with index finger",
            "hand on heart",
            "palm outstretched",
            "hands together in prayer",
            "hands in front of face",
            "hand on cheek",
            "grabbing head",
            "fist raised",
            "finger on lips",
            "saluting",
            "both hands on hips",
            "arms crossed over chest",
            "hands resting on knees",
            "hand touching forehead",
            "hands framing face",
            "fingers spread wide",
            "one hand on hip",
            "hands clasped together",
            "hands cupping face",
            "index fingers touching",
            "hands behind back",
            "one hand pointing up",
            "both hands pointing outwards",
            "hand covering one eye",
            "fingers making a circle",
            "two hands clasped in front",
            "arms relaxed at sides",
            "one hand brushing hair back",
            "hand resting on chest",
            "one hand raised to ear",
            "both arms out to sides palms up",
            "one hand pinching bridge of nose",
            "hands making a heart shape",
            "one hand scratching head",
            "both hands in a 'stop' position",
            "fingers interlocked and stretched outwards",
            "one hand touching neck",
            "hands making a triangle shape",
            "one hand rubbing chin",
            "fingers folded together",
            "both hands in fists held close to chest",
            "both hands outstretched upwards",
            "hand resting on opposite shoulder",
            "one hand covering mouth in surprise",
            "arms gesturing a large circle",
            "hand resting on hip with elbow out",
            "one hand raised with palm outward",
            "hands together over head in a triangle",
            "one hand casually dangling at the side",
            "both hands folded behind neck",
            "hands apart and slightly forward as if pushing away",
            "fingers held together in a neutral position",
            "hands pressed flat together above head",
            "one hand tapping chin thoughtfully",
            "hands angled outward from waist",
            "hands forming a V-shape",
            "both arms extended forward with hands open",
            "one hand lightly touching the cheek",
            "both hands resting on thighs",
            "hands crossed gently over chest",
            "one hand under chin, head tilted",
            "hands resting calmly at the sides",
            "fingers of one hand lightly touching wrist",
            "palms pressed flat together in front of chest",
            "arms crossed over stomach",
            "arms raised with elbows bent",
            "elbows pointing outward",
            "arms bent with fists near shoulders",
            "arms extended forward parallel to the ground",
            "arms outstretched sideways",
            "arms hanging loosely at sides",
            "elbows tucked in tightly to sides",
            "arms behind back holding opposite elbows",
            "elbows resting on knees in seated pose"
          ]
        ],
        "pose_legs": [
          [
            "NONE",
            "RANDOM",
            "one foot forward",
            "standing on tiptoe",
            "one leg slightly bent",
            "kick",
            "kicking in the air",
            "one leg up",
            "legs crossed while standing",
            "legs crossed while seated",
            "feet together",
            "feet apart",
            "feet wide in a stance",
            "squatting",
            "foot pointed",
            "feet in lotus position",
            "stepping forward",
            "feet positioned in a lunge",
            "knees bent in a crouch",
            "running stance with one knee bent",
            "sprinting stance",
            "marching pose with knees raised",
            "walking on toes",
            "side stepping pose",
            "feet raised off ground slightly",
            "sitting with legs crossed",
            "sitting with one knee raised",
            "standing on one leg",
            "knee raised to waist height",
            "legs bent in fighting stance",
            "legs extended straight in front (seated)",
            "legs bent inward at knees",
            "one foot crossed behind the other",
            "one leg extended to the side",
            "feet in a pigeon-toed stance",
            "knees pressed together",
            "knees apart in a relaxed seated pose",
            "legs angled outward in a wide squat",
            "kneeling on one knee",
            "both knees bent slightly while standing",
            "legs outstretched in a V shape (seated)",
            "feet touching with knees bent outward (butterfly pose)",
            "legs held in a figure-four shape while seated",
            "standing with one leg crossed over the other at ankle",
            "heels raised while knees are bent",
            "one foot angled outward, toes pointed",
            "toes turned inward while heels apart",
            "one leg stretched back in a dramatic pose",
            "legs bent to simulate a low crouch"
          ]
        ],
        "pose_body": [
          [
            "NONE",
            "RANDOM",
            "standing",
            "twisting torso",
            "body bent forward",
            "arching back",
            "leaning to the side",
            "bending over",
            "flexing muscles",
            "body turned sideways",
            "reaching forward",
            "stretching backwards",
            "half bent",
            "crouching",
            "ducking",
            "laying on stomach",
            "laying on back",
            "crawling",
            "squatting with arms outstretched",
            "sitting with back straight",
            "rolling body",
            "jump squat",
            "climbing position",
            "hanging from something"
          ]
        ],
        "pose_head_neck": [
          [
            "NONE",
            "RANDOM",
            "head tilted",
            "head down",
            "head up",
            "looking over shoulder",
            "looking forward",
            "looking to the side",
            "head held high",
            "head resting on hand",
            "nodding",
            "shaking head"
          ]
        ],
        "pose_dynamic": [
          [
            "NONE",
            "RANDOM",
            "running with arms outstretched",
            "jumping with arms raised",
            "kicking while running",
            "dancing with hands in air",
            "spinning",
            "cartwheel",
            "flip",
            "somersault",
            "leap",
            "twisting jump",
            "spinning kick",
            "high jump",
            "forward roll",
            "backflip",
            "front flip",
            "breakdancing move",
            "dance pose"
          ]
        ],
        "pose_action": [
          [
            "NONE",
            "RANDOM",
            "sword fighting stance",
            "boxing stance",
            "martial arts pose",
            "archery stance",
            "holding a bow",
            "shooting a gun",
            "throwing something",
            "catching something",
            "hitting something",
            "dodging",
            "pushing",
            "pulling",
            "lifting",
            "picking up",
            "throwing punch",
            "guard stance",
            "block",
            "kickboxing stance",
            "karate chop",
            "tai chi",
            "spinning staff pose",
            "kung fu pose",
            "spinning attack"
          ]
        ],
        "pose_sitting": [
          [
            "NONE",
            "RANDOM",
            "cross-legged sitting",
            "legs hanging off edge",
            "one leg up sitting",
            "knees bent up sitting",
            "one leg stretched out sitting",
            "leaning back sitting",
            "sitting on the floor",
            "sitting on a chair",
            "sitting with back straight",
            "sitting with hands on lap"
          ]
        ],
        "pose_unique": [
          [
            "NONE",
            "RANDOM",
            "superhero pose",
            "yoga pose",
            "lotus position",
            "zombie walk",
            "angel pose",
            "devil pose",
            "ballet pose",
            "high kick",
            "spinning fist",
            "hands over head",
            "holding a pose for balance",
            "vogue pose",
            "exaggerated model pose",
            "stretching arms wide",
            "standing with one leg raised",
            "hands clasped in front",
            "elbows out in victory",
            "hands holding head",
            "looking up with arms extended",
            "celebrating pose",
            "stretching backward with arms to sides",
            "picking up something off the ground",
            "t-rex arms",
            "hand over eyes shielding from sun",
            "hands placed firmly on hips",
            "twist and shout pose",
            "jumping jacks",
            "dabbing pose",
            "sitting with hands behind",
            "leaning forward on knees",
            "swaying arms to music",
            "bending sideways",
            "laying sideways"
          ]
        ],
        "pose_for_GEN_OBJECT": [
          [
            "NONE",
            "RANDOM",
            "holding",
            "carrying",
            "looking at",
            "examining",
            "reaching for",
            "grabbing",
            "lifting",
            "showing",
            "presenting",
            "playing with",
            "manipulating",
            "inspecting",
            "balancing",
            "throwing",
            "catching",
            "offering",
            "wielding",
            "aiming",
            "pointing at",
            "touching"
          ]
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "GEN_OBJECT": [
          "GEN_OBJECT,STRING"
        ],
        "add_GEN_POSE": [
          "GEN_POSE,STRING"
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "pose_view",
        "pose_camera",
        "pose_face",
        "pose_arms",
        "pose_legs",
        "pose_body",
        "pose_head_neck",
        "pose_dynamic",
        "pose_action",
        "pose_sitting",
        "pose_unique",
        "pose_for_GEN_OBJECT",
        "CUSTOM_PROMPT"
      ],
      "optional": [
        "GEN_OBJECT",
        "add_GEN_POSE"
      ]
    },
    "output": [
      "GEN_POSE,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_POSE"
    ],
    "name": "Bjornulf_TextGeneratorCharacterPose",
    "display_name": "💃🕺📝 Text Generator (Character Pose)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorCharacterObject": {
    "input": {
      "required": {
        "object_selection": [
          [
            "CUSTOM",
            "sign",
            "paper",
            "sword",
            "shield",
            "staff",
            "wand",
            "book",
            "scroll",
            "potion",
            "dagger",
            "bow",
            "arrow",
            "spear",
            "axe",
            "hammer",
            "gun",
            "rifle",
            "pistol",
            "camera",
            "phone",
            "laptop",
            "tablet",
            "pen",
            "pencil",
            "notebook",
            "bag",
            "backpack",
            "hat",
            "glasses",
            "watch",
            "ring",
            "necklace",
            "bracelet",
            "umbrella",
            "lantern",
            "torch",
            "map",
            "compass",
            "key",
            "lock",
            "rope",
            "chain",
            "bottle",
            "cup",
            "plate",
            "fork",
            "knife",
            "spoon",
            "guitar",
            "violin",
            "drum",
            "flute",
            "microphone",
            "paintbrush",
            "canvas",
            "sculpture",
            "trophy",
            "medal",
            "flag",
            "banner",
            "crystal",
            "gem",
            "orb",
            "mirror",
            "clock",
            "hourglass",
            "basket",
            "box",
            "chest",
            "coin",
            "card",
            "dice",
            "mask",
            "crown",
            "scepter",
            "throne"
          ]
        ],
        "custom_object": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "CUSTOM_PROMPT_PREFIX": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "CUSTOM_PROMPT_SUFFIX": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "add_GEN_OBJECT": [
          "GEN_OBJECT,STRING"
        ]
      }
    },
    "input_order": {
      "required": [
        "object_selection",
        "custom_object",
        "CUSTOM_PROMPT_PREFIX",
        "CUSTOM_PROMPT_SUFFIX"
      ],
      "optional": [
        "add_GEN_OBJECT"
      ]
    },
    "output": [
      "GEN_OBJECT,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_OBJECT"
    ],
    "name": "Bjornulf_TextGeneratorCharacterObject",
    "display_name": "🔧👨‍🔧📝 Text Generator (Object for Character)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorScene": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "scene_type": [
          [
            "RANDOM",
            "NONE",
            "urban",
            "natural",
            "fantasy",
            "sci-fi",
            "historical",
            "industrial",
            "domestic",
            "underwater",
            "aerial",
            "space",
            "post-apocalyptic",
            "medieval",
            "futuristic",
            "tropical",
            "arctic"
          ]
        ],
        "time_period": [
          [
            "RANDOM",
            "NONE",
            "dawn",
            "morning",
            "noon",
            "afternoon",
            "dusk",
            "night",
            "midnight",
            "golden hour",
            "blue hour",
            "twilight"
          ]
        ],
        "weather_condition": [
          [
            "RANDOM",
            "NONE",
            "clear",
            "cloudy",
            "rainy",
            "stormy",
            "snowy",
            "foggy",
            "misty",
            "windy",
            "sunny",
            "overcast",
            "thunderstorm",
            "hazy",
            "humid",
            "frosty",
            "tropical"
          ]
        ],
        "ambiance": [
          [
            "RANDOM",
            "NONE",
            "peaceful",
            "mysterious",
            "chaotic",
            "serene",
            "bustling",
            "abandoned",
            "lively",
            "magical",
            "dystopian",
            "utopian",
            "ancient",
            "modern",
            "timeless",
            "ethereal",
            "supernatural"
          ]
        ],
        "setting": [
          [
            "RANDOM",
            "NONE",
            "city street",
            "forest",
            "beach",
            "mountains",
            "desert",
            "castle",
            "spaceship",
            "underwater city",
            "floating islands",
            "cyberpunk city",
            "shadow realm",
            "swamp",
            "volcano",
            "arctic",
            "skyancient ruins",
            "space station",
            "magical realm",
            "steampunk world",
            "parallel dimension",
            "snowy tundra",
            "volcanic island",
            "abandoned theme park",
            "alien planet",
            "dystopian future",
            "post-apocalyptic wasteland",
            "enchanted forest",
            "underworld",
            "moon base",
            "faerie kingdom",
            "dreamscape",
            "mystical cave",
            "giant's lair",
            "superhero city",
            "nuclear wasteland",
            "retro-futuristic city",
            "medieval village",
            "ancient library",
            "time machine interior",
            "supernatural mansion",
            "dark alleyway",
            "secret laboratory",
            "holographic world",
            "floating city",
            "temple ruins",
            "hidden jungle",
            "space colony",
            "fantasy kingdom",
            "mythical mountain",
            "glowing cave",
            "interdimensional rift",
            "underground bunker",
            "abandoned subway",
            "magic academy",
            "suburban neighborhood",
            "artificial intelligence city",
            "cybernetic jungle",
            "world on fire",
            "parallel universe",
            "virtual reality landscape",
            "sunken shipwreck",
            "enchanted castle",
            "cloud city",
            "futuristic metropolis",
            "labyrinthine ruins",
            "swampy marshlands",
            "toxic wasteland",
            "magician's tower",
            "swirling vortex",
            "ancient temple",
            "tropical island",
            "underground world",
            "geothermal spring",
            "haunted forest",
            "ice planet",
            "glittering city",
            "steampunk airship",
            "spooky mansion",
            "digital world",
            "wizard's tower",
            "deserted island",
            "space-time anomaly",
            "ancient battlefield",
            "crystal cavern",
            "underwater ruins",
            "abandoned military base",
            "stormy ocean",
            "mystical oasis",
            "frozen tundra",
            "high-tech laboratory",
            "rustic farmhouse",
            "glowing meadow",
            "alien jungle",
            "robot city",
            "hidden temple",
            "demonic realm",
            "lost city",
            "barren wasteland",
            "moonlit bay",
            "twisted carnival",
            "vampire's castle",
            "clockwork world",
            "intergalactic market",
            "fantasy battlefield",
            "sunny meadow",
            "mysterious island",
            "spaceport",
            "hacker's lair",
            "ancient fortress",
            "robotic wasteland"
          ]
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "scene_type",
        "time_period",
        "weather_condition",
        "ambiance",
        "setting",
        "CUSTOM_PROMPT"
      ]
    },
    "output": [
      "GEN_SCENE,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_SCENE"
    ],
    "name": "Bjornulf_TextGeneratorScene",
    "display_name": "🌄📝 Text Generator (Scene)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorStyle": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "artistic_style": [
          [
            "RANDOM",
            "NONE",
            "photography",
            "oil painting",
            "watercolor",
            "digital art",
            "pencil sketch",
            "anime",
            "photorealistic",
            "comic book",
            "impressionist",
            "pop art",
            "minimalist",
            "concept art",
            "3D render",
            "cinematic",
            "studio photography",
            "film noir"
          ]
        ],
        "color_palette": [
          [
            "RANDOM",
            "NONE",
            "vibrant",
            "muted",
            "monochromatic",
            "pastel",
            "dark and moody",
            "warm",
            "cool",
            "high contrast",
            "earthy",
            "neon",
            "vintage",
            "black and white",
            "sepia",
            "technicolor",
            "iridescent"
          ]
        ],
        "lighting_type": [
          [
            "RANDOM",
            "NONE",
            "natural",
            "dramatic",
            "soft",
            "harsh",
            "backlit",
            "rim lighting",
            "volumetric",
            "ambient",
            "studio",
            "cinematic",
            "golden hour",
            "blue hour",
            "neon",
            "candlelit",
            "spotlit"
          ]
        ],
        "mood": [
          [
            "RANDOM",
            "NONE",
            "peaceful",
            "mysterious",
            "dramatic",
            "romantic",
            "melancholic",
            "energetic",
            "serene",
            "tense",
            "whimsical",
            "ethereal",
            "dark",
            "cheerful",
            "nostalgic",
            "dreamy",
            "epic"
          ]
        ],
        "composition": [
          [
            "RANDOM",
            "NONE",
            "rule of thirds",
            "symmetrical",
            "dynamic",
            "minimalist",
            "centered",
            "diagonal",
            "framed",
            "leading lines",
            "golden ratio",
            "panoramic",
            "dutch angle"
          ]
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "artistic_style",
        "color_palette",
        "lighting_type",
        "mood",
        "composition",
        "CUSTOM_PROMPT"
      ]
    },
    "output": [
      "GEN_STYLE,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_STYLE"
    ],
    "name": "Bjornulf_TextGeneratorStyle",
    "display_name": "🎨📝 Text Generator (Style)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorCharacterFemale": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "number_of_characters": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "location_on_image": [
          [
            "NONE",
            "RANDOM",
            "left",
            "center",
            "right",
            "top",
            "bottom",
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right"
          ]
        ],
        "ethnicity": [
          [
            "NONE",
            "RANDOM",
            "Asian",
            "Caucasian",
            "African",
            "Latina",
            "Middle Eastern",
            "Indian",
            "Nord",
            "Argonian",
            "Khajiit",
            "High Elf",
            "Dark Elf",
            "Drow",
            "Orc",
            "Dwarf",
            "Dragonborn",
            "Tiefling",
            "Aasimar",
            "Warforged",
            "Na'vi",
            "Protoss",
            "Vulcan",
            "Tabaxi",
            "Goliath",
            "Minotaur"
          ],
          {
            "forceInput": false
          }
        ],
        "ethnicity_description": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "nationality": [
          [
            "NONE",
            "RANDOM",
            "Chinese",
            "Japanese",
            "Korean",
            "Mongolian",
            "Vietnamese",
            "Thai",
            "Filipino",
            "Indonesian",
            "Malaysian",
            "Singaporean",
            "Nepalese",
            "Bhutanese",
            "Cambodian",
            "Laotian",
            "French",
            "German",
            "Italian",
            "Spanish",
            "Portuguese",
            "Russian",
            "Ukrainian",
            "Polish",
            "Norwegian",
            "Swedish",
            "Finnish",
            "Danish",
            "Dutch",
            "Austrian",
            "Greek",
            "Icelandic",
            "Scottish",
            "Welsh",
            "English",
            "Irish",
            "Hungarian",
            "Swiss",
            "Belgian",
            "Czech",
            "Slovak",
            "Serbian",
            "Croatian",
            "Bulgarian",
            "Romanian",
            "Macedonian",
            "Latvian",
            "Lithuanian",
            "Estonian",
            "Georgian",
            "Armenian",
            "Moldovan",
            "Nigerian",
            "Ethiopian",
            "South African",
            "Kenyan",
            "Tanzanian",
            "Ugandan",
            "Somali",
            "Sudanese",
            "Egyptian",
            "Algerian",
            "Moroccan",
            "Ghanaian",
            "Congolese",
            "Rwandan",
            "Zimbabwean",
            "Senegalese",
            "Malian",
            "Ivory Coast (Ivorian)",
            "Botswanan",
            "Namibian",
            "Chadian",
            "Tunisian",
            "Libyan",
            "Mexican",
            "Argentinian",
            "Colombian",
            "Peruvian",
            "Chilean",
            "Venezuelan",
            "Ecuadorian",
            "Guatemalan",
            "Bolivian",
            "Uruguayan",
            "Honduran",
            "Cuban",
            "Panamanian",
            "Puerto Rican",
            "Costa Rican",
            "Dominican",
            "Salvadoran",
            "Paraguayan",
            "Turkish",
            "Persian (Iranian)",
            "Arabian (Saudi)",
            "Iraqi",
            "Syrian",
            "Lebanese",
            "Jordanian",
            "Israeli",
            "Palestinian",
            "Kuwaiti",
            "Emirati",
            "Omani",
            "Yemeni",
            "Qatari",
            "Bahraini",
            "Indian",
            "Pakistani",
            "Bangladeshi",
            "Sri Lankan",
            "Maldivian",
            "Australian",
            "New Zealander (Kiwi)",
            "Papua New Guinean",
            "Native Hawaiian",
            "Inuit",
            "Samoan",
            "Tongan",
            "Fijian",
            "Maori",
            "Caribbean (specific islands can be listed)"
          ]
        ],
        "age": [
          [
            "RANDOM",
            "baby girl",
            "girl",
            "teen girl",
            "young woman",
            "woman",
            "elderly woman"
          ],
          {
            "default": "woman"
          }
        ],
        "add_specific_age": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "body_shape": [
          [
            "RANDOM",
            "NONE",
            "athletic",
            "muscular",
            "slim",
            "slender",
            "petite",
            "average",
            "curvy",
            "full-figured",
            "tall and lean",
            "short and stocky",
            "broad-shouldered",
            "narrow-waisted",
            "hourglass figure",
            "pear-shaped",
            "apple-shaped",
            "rectangle-shaped",
            "diamond-shaped",
            "toned",
            "well-built",
            "lean muscular",
            "bodybuilder physique",
            "tall",
            "very tall",
            "short",
            "very short",
            "average height",
            "thin",
            "skinny",
            "plump",
            "heavy-set",
            "robust",
            "long-legged",
            "short-legged",
            "long-waisted",
            "short-waisted",
            "straight-postured",
            "broad-chested",
            "square-shouldered",
            "round-shouldered",
            "willowy",
            "statuesque",
            "compact",
            "lanky",
            "lithe",
            "svelte",
            "sturdy",
            "delicate",
            "graceful",
            "imposing"
          ]
        ],
        "breasts": [
          [
            "RANDOM",
            "NONE",
            "tiny",
            "small",
            "medium",
            "large",
            "very large",
            "extremely large",
            "round",
            "teardrop",
            "bell shaped",
            "conical",
            "wide set",
            "close set",
            "high set",
            "low set",
            "firm",
            "soft",
            "perky",
            "saggy"
          ]
        ],
        "ass": [
          [
            "RANDOM",
            "NONE",
            "tiny",
            "small",
            "medium",
            "large",
            "very large",
            "extremely large",
            "round",
            "heart shaped",
            "bubble",
            "pear shaped",
            "square",
            "high set",
            "low set",
            "outward facing",
            "inward facing",
            "firm",
            "soft",
            "muscular",
            "toned"
          ]
        ],
        "skin_tone": [
          [
            "NONE",
            "RANDOM",
            "fair",
            "pale",
            "medium",
            "olive",
            "tan",
            "dark",
            "ebony",
            "golden",
            "rosy",
            "ruddy",
            "porcelain",
            "chocolate",
            "mahogany",
            "amber",
            "ivory"
          ]
        ],
        "eye_color": [
          [
            "NONE",
            "RANDOM",
            "blue",
            "green",
            "brown",
            "hazel",
            "amber",
            "grey",
            "violet",
            "black",
            "golden",
            "silver",
            "turquoise",
            "aqua",
            "heterochromatic"
          ]
        ],
        "hair_style": [
          [
            "NONE",
            "RANDOM",
            "long",
            "short",
            "curly",
            "straight",
            "wavy",
            "braided",
            "bald",
            "buzzcut",
            "bob",
            "pixie",
            "ponytail",
            "buns",
            "double ponytail",
            "afro",
            "dreadlocks",
            "spiky",
            "layered",
            "feathered",
            "messy",
            "tied-back",
            "fishtail braid",
            "french braid",
            "cornrows",
            "twists",
            "shaved sides",
            "undercut",
            "fade",
            "pompadour",
            "quiff",
            "mohawk",
            "faux hawk",
            "half-up half-down",
            "space buns",
            "ringlets"
          ]
        ],
        "hair_color": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ]
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "add_GEN_CHARACTER": [
          "GEN_CHARACTER,STRING"
        ],
        "GEN_OUTFIT": [
          "GEN_OUTFIT,STRING"
        ],
        "GEN_POSE": [
          "GEN_POSE,STRING"
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "number_of_characters",
        "seed",
        "location_on_image",
        "ethnicity",
        "ethnicity_description",
        "nationality",
        "age",
        "add_specific_age",
        "body_shape",
        "breasts",
        "ass",
        "skin_tone",
        "eye_color",
        "hair_style",
        "hair_color",
        "CUSTOM_PROMPT"
      ],
      "optional": [
        "add_GEN_CHARACTER",
        "GEN_OUTFIT",
        "GEN_POSE"
      ]
    },
    "output": [
      "GEN_CHARACTER,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_CHARACTER"
    ],
    "name": "Bjornulf_TextGeneratorCharacterFemale",
    "display_name": "👩‍🦰📝 Text Generator (Character Female)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorCharacterMale": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "number_of_characters": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "location_on_image": [
          [
            "NONE",
            "RANDOM",
            "left",
            "center",
            "right",
            "top",
            "bottom",
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right"
          ]
        ],
        "ethnicity": [
          [
            "NONE",
            "RANDOM",
            "Asian",
            "Caucasian",
            "African",
            "Latino",
            "Middle Eastern",
            "Indian",
            "Nord",
            "Argonian",
            "Khajiit",
            "High Elf",
            "Dark Elf",
            "Drow",
            "Orc",
            "Dwarf",
            "Dragonborn",
            "Tiefling",
            "Aasimar",
            "Warforged",
            "Na'vi",
            "Protoss",
            "Vulcan",
            "Tabaxi",
            "Goliath",
            "Minotaur"
          ],
          {
            "forceInput": false
          }
        ],
        "ethnicity_description": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "nationality": [
          [
            "NONE",
            "RANDOM",
            "Chinese",
            "Japanese",
            "Korean",
            "Mongolian",
            "Vietnamese",
            "Thai",
            "Filipino",
            "Indonesian",
            "Malaysian",
            "Singaporean",
            "Nepalese",
            "Bhutanese",
            "Cambodian",
            "Laotian",
            "French",
            "German",
            "Italian",
            "Spanish",
            "Portuguese",
            "Russian",
            "Ukrainian",
            "Polish",
            "Norwegian",
            "Swedish",
            "Finnish",
            "Danish",
            "Dutch",
            "Austrian",
            "Greek",
            "Icelandic",
            "Scottish",
            "Welsh",
            "English",
            "Irish",
            "Hungarian",
            "Swiss",
            "Belgian",
            "Czech",
            "Slovak",
            "Serbian",
            "Croatian",
            "Bulgarian",
            "Romanian",
            "Macedonian",
            "Latvian",
            "Lithuanian",
            "Estonian",
            "Georgian",
            "Armenian",
            "Moldovan",
            "Nigerian",
            "Ethiopian",
            "South African",
            "Kenyan",
            "Tanzanian",
            "Ugandan",
            "Somali",
            "Sudanese",
            "Egyptian",
            "Algerian",
            "Moroccan",
            "Ghanaian",
            "Congolese",
            "Rwandan",
            "Zimbabwean",
            "Senegalese",
            "Malian",
            "Ivory Coast (Ivorian)",
            "Botswanan",
            "Namibian",
            "Chadian",
            "Tunisian",
            "Libyan",
            "Mexican",
            "Argentinian",
            "Colombian",
            "Peruvian",
            "Chilean",
            "Venezuelan",
            "Ecuadorian",
            "Guatemalan",
            "Bolivian",
            "Uruguayan",
            "Honduran",
            "Cuban",
            "Panamanian",
            "Puerto Rican",
            "Costa Rican",
            "Dominican",
            "Salvadoran",
            "Paraguayan",
            "Turkish",
            "Persian (Iranian)",
            "Arabian (Saudi)",
            "Iraqi",
            "Syrian",
            "Lebanese",
            "Jordanian",
            "Israeli",
            "Palestinian",
            "Kuwaiti",
            "Emirati",
            "Omani",
            "Yemeni",
            "Qatari",
            "Bahraini",
            "Indian",
            "Pakistani",
            "Bangladeshi",
            "Sri Lankan",
            "Maldivian",
            "Australian",
            "New Zealander (Kiwi)",
            "Papua New Guinean",
            "Native Hawaiian",
            "Inuit",
            "Samoan",
            "Tongan",
            "Fijian",
            "Maori",
            "Caribbean (specific islands can be listed)"
          ]
        ],
        "age": [
          [
            "RANDOM",
            "baby boy",
            "boy",
            "teen boy",
            "young man",
            "man",
            "elderly man"
          ],
          {
            "default": "man"
          }
        ],
        "add_specific_age": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "body_shape": [
          [
            "RANDOM",
            "NONE",
            "athletic",
            "muscular",
            "slim",
            "slender",
            "petite",
            "average",
            "curvy",
            "full-figured",
            "tall and lean",
            "short and stocky",
            "broad-shouldered",
            "narrow-waisted",
            "hourglass figure",
            "pear-shaped",
            "apple-shaped",
            "rectangle-shaped",
            "diamond-shaped",
            "toned",
            "well-built",
            "lean muscular",
            "bodybuilder physique",
            "tall",
            "very tall",
            "short",
            "very short",
            "average height",
            "thin",
            "skinny",
            "plump",
            "heavy-set",
            "robust",
            "long-legged",
            "short-legged",
            "long-waisted",
            "short-waisted",
            "straight-postured",
            "broad-chested",
            "square-shouldered",
            "round-shouldered",
            "willowy",
            "statuesque",
            "compact",
            "lanky",
            "lithe",
            "svelte",
            "sturdy",
            "delicate",
            "graceful",
            "imposing"
          ]
        ],
        "skin_tone": [
          [
            "NONE",
            "RANDOM",
            "fair",
            "pale",
            "medium",
            "olive",
            "tan",
            "dark",
            "ebony",
            "golden",
            "rosy",
            "ruddy",
            "porcelain",
            "chocolate",
            "mahogany",
            "amber",
            "ivory"
          ]
        ],
        "facial_hair": [
          [
            "NONE",
            "RANDOM",
            "clean-shaven",
            "stubble",
            "light stubble",
            "heavy stubble",
            "pencil mustache",
            "handlebar mustache",
            "horseshoe mustache",
            "walrus mustache",
            "chevron mustache",
            "toothbrush mustache",
            "English mustache",
            "goatee",
            "chinstrap beard",
            "soul patch",
            "balbo beard",
            "Van Dyke beard",
            "full beard",
            "ducktail beard",
            "bandholz beard",
            "Garibaldi beard",
            "short boxed beard",
            "Verdi beard",
            "mutton chops",
            "friendly mutton chops",
            "burnsides mustache",
            "anchor beard",
            "imperial beard"
          ]
        ],
        "eye_color": [
          [
            "NONE",
            "RANDOM",
            "blue",
            "green",
            "brown",
            "hazel",
            "amber",
            "grey",
            "violet",
            "black",
            "golden",
            "silver",
            "turquoise",
            "aqua",
            "heterochromatic"
          ]
        ],
        "hair_style": [
          [
            "NONE",
            "RANDOM",
            "long",
            "short",
            "curly",
            "straight",
            "wavy",
            "braided",
            "bald",
            "buzzcut",
            "bob",
            "pixie",
            "ponytail",
            "buns",
            "double ponytail",
            "afro",
            "dreadlocks",
            "spiky",
            "layered",
            "feathered",
            "messy",
            "tied-back",
            "fishtail braid",
            "french braid",
            "cornrows",
            "twists",
            "shaved sides",
            "undercut",
            "fade",
            "pompadour",
            "quiff",
            "mohawk",
            "faux hawk",
            "half-up half-down",
            "space buns",
            "ringlets"
          ]
        ],
        "hair_color": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ]
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "add_GEN_CHARACTER": [
          "GEN_CHARACTER,STRING"
        ],
        "GEN_OUTFIT": [
          "GEN_OUTFIT,STRING"
        ],
        "GEN_POSE": [
          "GEN_POSE,STRING"
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "number_of_characters",
        "seed",
        "location_on_image",
        "ethnicity",
        "ethnicity_description",
        "nationality",
        "age",
        "add_specific_age",
        "body_shape",
        "skin_tone",
        "facial_hair",
        "eye_color",
        "hair_style",
        "hair_color",
        "CUSTOM_PROMPT"
      ],
      "optional": [
        "add_GEN_CHARACTER",
        "GEN_OUTFIT",
        "GEN_POSE"
      ]
    },
    "output": [
      "GEN_CHARACTER,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_CHARACTER"
    ],
    "name": "Bjornulf_TextGeneratorCharacterMale",
    "display_name": "👨‍🦰📝 Text Generator (Character Male)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorCharacterCreature": {
    "input": {
      "required": {
        "enabled": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "number_of_creatures": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "location_on_image": [
          [
            "NONE",
            "RANDOM",
            "left",
            "center",
            "right",
            "top",
            "bottom",
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right"
          ]
        ],
        "creature_type": [
          [
            "RANDOM",
            "NONE",
            "Dragon",
            "Phoenix",
            "Unicorn",
            "Griffin",
            "Hydra",
            "Chimera",
            "Basilisk",
            "Kraken",
            "Werewolf",
            "Vampire",
            "Goblin",
            "Troll",
            "Ogre",
            "Fairy",
            "Pixie",
            "Mermaid",
            "Centaur",
            "Minotaur",
            "Harpy",
            "Sphinx",
            "Cerberus",
            "Pegasus",
            "Manticore",
            "Gorgon",
            "Selkie",
            "Yeti",
            "Sasquatch",
            "Wendigo",
            "Djinn",
            "Ifrit",
            "Banshee",
            "Kelpie",
            "Nymph",
            "Dryad",
            "Leprechaun",
            "Ghoul",
            "Zombie",
            "Skeleton Warrior",
            "Specter",
            "Wraith",
            "Shade",
            "Dullahan",
            "Cthulhu",
            "Deep One",
            "Shoggoth",
            "Behemoth",
            "Leviathan",
            "Rakshasa",
            "Asura",
            "Nagini",
            "Chupacabra",
            "Mothman",
            "Jiangshi",
            "Gremlin",
            "Imp",
            "Succubus",
            "Incubus",
            "Fomorian",
            "Fenrir",
            "Jörmungandr",
            "Hippogriff",
            "Wyvern",
            "Cockatrice",
            "Salamander",
            "Lamia",
            "Seraphim",
            "Cherubim",
            "Golem",
            "Elemental",
            "Shadow Demon",
            "Hellhound",
            "Bone Dragon",
            "Frost Giant",
            "Fire Giant",
            "Storm Giant",
            "Zombie Dragon",
            "Sea Serpent",
            "Anubite",
            "Grim Reaper",
            "Poltergeist",
            "Will-o'-the-Wisp",
            "Boggart",
            "Barghest",
            "Naga",
            "Kami",
            "Tengu",
            "Kappa",
            "Oni",
            "Yokai",
            "Bakemono",
            "Slime",
            "Mimic",
            "Beholder",
            "Mind Flayer",
            "Aboleth",
            "Displacer Beast",
            "Umber Hulk",
            "Bulette",
            "Rust Monster",
            "Gelatinous Cube",
            "Treant",
            "Ent",
            "Balrog",
            "Nazgûl",
            "Uruk-hai",
            "Shelob",
            "Warg",
            "Fell Beast",
            "Ettin",
            "Quetzalcoatl",
            "Garuda",
            "Thunderbird",
            "Amphiptere",
            "Jabberwock",
            "Nemean Lion",
            "Satyr",
            "Faun",
            "Echidna",
            "Typhon",
            "Cyclops",
            "Siren",
            "Scylla",
            "Charybdis",
            "Hecatoncheires",
            "Lilith",
            "Astral Projection",
            "Djinn of the Lamp",
            "Genasi",
            "Planar Entity",
            "Ethereal Spirit",
            "Archon",
            "Demon Lord",
            "Archdemon"
          ]
        ],
        "show_creature_description": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "land_animal": [
          [
            "NONE",
            "RANDOM",
            "Mouse",
            "Hamster",
            "Ant",
            "Gecko",
            "Shrew",
            "Cricket",
            "Ladybug",
            "Butterfly",
            "Grasshopper",
            "Scorpion",
            "Cat",
            "Rabbit",
            "Fox",
            "Raccoon",
            "Beaver",
            "Skunk",
            "Squirrel",
            "Chicken",
            "Meerkat",
            "Koala",
            "Wolf",
            "Dog",
            "Deer",
            "Lion",
            "Tiger",
            "Bear",
            "Leopard",
            "Cheetah",
            "Pig",
            "Sheep",
            "Horse",
            "Cow",
            "Moose",
            "Bison",
            "Rhinoceros",
            "Hippopotamus",
            "Giraffe",
            "Camel",
            "Elk",
            "Buffalo",
            "Elephant",
            "Grizzly Bear",
            "Polar Bear",
            "Gorilla",
            "Anaconda",
            "Python",
            "Komodo Dragon",
            "Ostrich",
            "Kangaroo",
            "Sloth Bear",
            "Brachiosaurus",
            "Tyrannosaurus Rex",
            "Spinosaurus",
            "Pteranodon",
            "Mammoth",
            "Ground Sloth",
            "Paraceratherium",
            "Deinotherium",
            "Woolly Rhinoceros",
            "Gigantopithecus",
            "Argentinosaurus",
            "Supersaurus",
            "Diplodocus",
            "Amphicoelias",
            "Ultrasaurus",
            "Sauroposeidon",
            "Titanosaurus",
            "Paralititan",
            "Antarctosaurus",
            "Mamenchisaurus"
          ]
        ],
        "water_animal": [
          [
            "NONE",
            "RANDOM",
            "Guppy",
            "Seahorse",
            "Clownfish",
            "Shrimp",
            "Crab",
            "Starfish",
            "Sea Urchin",
            "Jellyfish",
            "Coral Polyp",
            "Plankton",
            "Piranha",
            "Flying Fish",
            "Angel Fish",
            "Lobster",
            "Octopus",
            "Sea Bass",
            "Cuttlefish",
            "Ray",
            "Eel",
            "Salmon",
            "Dolphin",
            "Tuna",
            "Barracuda",
            "Sea Turtle",
            "Seal",
            "Manta Ray",
            "Swordfish",
            "Sturgeon",
            "Grouper",
            "Nurse Shark",
            "Great White Shark",
            "Tiger Shark",
            "Hammerhead Shark",
            "Sea Lion",
            "Beluga Whale",
            "Narwhal",
            "Manatee",
            "Dugong",
            "Giant Grouper",
            "Marlin",
            "Orca",
            "Great White Shark",
            "Saltwater Crocodile",
            "Giant Pacific Octopus",
            "Greenland Shark",
            "Basking Shark",
            "Megalodon",
            "Giant Manta Ray",
            "Oarfish",
            "Giant Squid",
            "Sperm Whale",
            "Humpback Whale",
            "Right Whale",
            "Colossal Squid",
            "Whale Shark",
            "Leedsichthys",
            "Megalodon",
            "Basilosaurus",
            "Mosasaurus",
            "Kronosaurus",
            "Blue Whale",
            "Fin Whale",
            "Sei Whale",
            "Brygmophyseter",
            "Livyatan",
            "Megalodon (Largest specimens)",
            "Liopleurodon",
            "Shastasaurus",
            "Thalattoarchon",
            "Shonisaurus"
          ]
        ],
        "size": [
          [
            "NONE",
            "RANDOM",
            "Tiny",
            "Small",
            "Medium",
            "Large",
            "Huge",
            "Colossal",
            "Gigantic"
          ]
        ],
        "temperament": [
          [
            "NONE",
            "RANDOM",
            "Aggressive",
            "Peaceful",
            "Territorial",
            "Friendly",
            "Hostile",
            "Neutral",
            "Protective",
            "Cunning",
            "Savage",
            "Docile",
            "Fearsome"
          ]
        ],
        "special_ability": [
          [
            "NONE",
            "RANDOM",
            "Fire-breathing",
            "Ice-spawning",
            "Lightning-wielding",
            "Poison-secreting",
            "Shape-shifting",
            "Mind-controlling",
            "Telepathic",
            "Regenerating",
            "Flying",
            "Invisible",
            "Stone-turning gaze",
            "Water-breathing",
            "Earth-shaking"
          ]
        ],
        "features": [
          [
            "NONE",
            "RANDOM",
            "Scales",
            "Fur",
            "Feathers",
            "Chitin",
            "Spikes",
            "Horns",
            "Wings",
            "Multiple heads",
            "Tentacles",
            "Claws",
            "Fangs",
            "Tail",
            "Ethereal body"
          ]
        ],
        "magical_properties": [
          [
            "NONE",
            "RANDOM",
            "Elemental power",
            "Ancient magic",
            "Cursed",
            "Blessed",
            "Soul-stealing",
            "Reality-bending",
            "Time-manipulating",
            "Dream-walking",
            "Nature-controlling"
          ]
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "add_GEN_CHARACTER": [
          "GEN_CHARACTER,STRING"
        ]
      }
    },
    "input_order": {
      "required": [
        "enabled",
        "number_of_creatures",
        "seed",
        "location_on_image",
        "creature_type",
        "show_creature_description",
        "land_animal",
        "water_animal",
        "size",
        "temperament",
        "special_ability",
        "features",
        "magical_properties",
        "CUSTOM_PROMPT"
      ],
      "optional": [
        "add_GEN_CHARACTER"
      ]
    },
    "output": [
      "GEN_CHARACTER,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_CHARACTER"
    ],
    "name": "Bjornulf_TextGeneratorCharacterCreature",
    "display_name": "👾📝 Text Generator (Character Creature)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorOutfitFemale": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "top": [
          [
            "NONE",
            "RANDOM",
            "t-shirt",
            "shirt",
            "sweater",
            "hoodie",
            "tank top",
            "dress shirt",
            "button-up shirt",
            "turtleneck",
            "polo shirt",
            "blazer",
            "suit jacket",
            "military jacket",
            "bomber jacket",
            "windbreaker",
            "leather jacket",
            "v-neck shirt",
            "long sleeve shirt",
            "henley",
            "cardigan",
            "flannel shirt",
            "sweatshirt",
            "crop top",
            "puffer jacket",
            "parka",
            "fleece jacket",
            "chambray shirt",
            "duster coat",
            "peacoat",
            "raincoat",
            "golf shirt",
            "thermal shirt",
            "polo neck",
            "crew neck shirt",
            "kimono",
            "sherpa jacket",
            "bra",
            "bralette",
            "sports bra",
            "bikini top",
            "corset",
            "bustier",
            "lingerie",
            "silk robe",
            "lace top",
            "camisole",
            "pajama set"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_top": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "bottom": [
          [
            "NONE",
            "RANDOM",
            "jeans",
            "slacks",
            "trousers",
            "cargo pants",
            "dress pants",
            "shorts",
            "bermudas",
            "joggers",
            "track pants",
            "denim shorts",
            "leggings",
            "chinos",
            "bootcut jeans",
            "skinny jeans",
            "wide leg pants",
            "palazzo pants",
            "paperbag waist pants",
            "sweatpants",
            "overalls",
            "corduroys",
            "leather pants",
            "high-waisted pants",
            "capris",
            "harem pants",
            "biker shorts",
            "denim skirt",
            "pencil skirt",
            "midi skirt",
            "maxi skirt",
            "mini skirt",
            "A-line skirt",
            "pleated skirt",
            "skorts",
            "skater skirt",
            "panties",
            "boyshorts",
            "thong",
            "denim thong",
            "mesh shorts",
            "leather shorts",
            "lace shorts",
            "see-through leggings",
            "cut-off shorts",
            "ripped jeans",
            "chamois pants",
            "vinyl pants",
            "sequined pants",
            "jogger shorts",
            "spandex shorts",
            "tight leather pants",
            "short shorts",
            "cheeky shorts",
            "bandage skirt",
            "faux leather skirt",
            "leather mini skirt",
            "latex pants",
            "harness pants",
            "motorcycle pants",
            "cargo shorts",
            "tactical pants",
            "fishnet stockings",
            "lace stockings",
            "thigh-high stockings",
            "sheer stockings",
            "fishnet tights",
            "mesh stockings",
            "over-the-knee stockings",
            "suspender stockings",
            "wet-look leggings",
            "latex stockings",
            "lace garter belt",
            "silk stockings"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_bottom": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "dress": [
          [
            "NONE",
            "RANDOM",
            "dress",
            "sundress",
            "wrap dress",
            "cocktail dress",
            "evening gown",
            "princess dress",
            "babydoll dress",
            "bodycon dress",
            "shift dress",
            "maxi dress",
            "midi dress",
            "mini dress",
            "A-line dress",
            "sheath dress",
            "high-low dress",
            "peplum dress",
            "skater dress",
            "halter dress",
            "strapless dress",
            "tunic dress",
            "ball gown",
            "lace dress",
            "chiffon dress",
            "t-shirt dress",
            "denim dress",
            "floral dress",
            "knit dress",
            "sweater dress"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_dress": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "full_body": [
          [
            "NONE",
            "RANDOM",
            "jumpsuit",
            "romper",
            "playsuit",
            "catsuit",
            "bodysuit",
            "unitard",
            "leotard",
            "overalls",
            "dungarees",
            "boilersuit",
            "flight suit",
            "ski suit",
            "wetsuit",
            "onesie",
            "palazzo jumpsuit",
            "culotte jumpsuit",
            "denim jumpsuit",
            "utility jumpsuit",
            "wide-leg jumpsuit",
            "sleeveless jumpsuit",
            "halter jumpsuit",
            "strapless jumpsuit",
            "lace jumpsuit",
            "satin jumpsuit",
            "velvet jumpsuit",
            "corset bodysuit",
            "mesh bodysuit",
            "long sleeve bodysuit",
            "turtleneck bodysuit",
            "backless bodysuit",
            "dance leotard",
            "gymnastics leotard"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_full_body": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "footwear": [
          [
            "NONE",
            "RANDOM",
            "pumps",
            "stilettos",
            "kitten heels",
            "block heels",
            "thigh-high boots",
            "ballet shoes",
            "sandals",
            "sneakers",
            "oxford shoes",
            "loafers",
            "dress shoes",
            "chelsea boots",
            "combat boots",
            "derby shoes",
            "slip-ons",
            "work boots",
            "flip-flops",
            "boat shoes",
            "moccasins",
            "brogues",
            "athletic shoes",
            "high-top sneakers",
            "running shoes",
            "hiking boots",
            "desert boots",
            "chukka boots"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_footwear": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "head_item": [
          [
            "NONE",
            "RANDOM",
            "sun hat",
            "fedora",
            "beanie",
            "beret",
            "baseball cap",
            "bucket hat",
            "cloche hat",
            "cowboy hat",
            "wide-brim hat",
            "trilby",
            "visor hat",
            "boater hat",
            "newsboy cap",
            "turban",
            "headscarf",
            "wool hat",
            "straw hat",
            "trapper hat",
            "pillbox hat",
            "panama hat",
            "hijab",
            "bonnet",
            "snapback",
            "hat with veil",
            "knit hat",
            "fascinator",
            "skull cap",
            "safari hat",
            "military cap",
            "pork pie hat",
            "flower crown",
            "tiara",
            "crystal headpiece",
            "pearl-embellished hat",
            "feathered fascinator"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_head_item": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "eye_item": [
          [
            "NONE",
            "RANDOM",
            "sunglass",
            "cat-eye sunglass",
            "aviator",
            "oversized sunglass",
            "heart-shaped sunglass",
            "eyemask",
            "lace mask",
            "rhinestone-studded mask",
            "gold-rimmed sunglass",
            "retro goggle",
            "fashion visor"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_eye_item": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "mouth_item": [
          [
            "NONE",
            "RANDOM",
            "face veil",
            "mesh face cover",
            "choker with attached veil",
            "surgical face mask"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_mouth_item": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "accessories": [
          [
            "NONE",
            "RANDOM",
            "necklace",
            "earrings",
            "bracelet",
            "rings",
            "tiara",
            "crown",
            "clutch",
            "handbag",
            "hair clips",
            "choker"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_accessories": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "armors": [
          [
            "NONE",
            "RANDOM",
            "Bone Armor",
            "Wooden Plate Armor",
            "Reed Armor",
            "Stone-Studded Armor",
            "Animal Hide Armor",
            "Fiber-Woven Armor",
            "Primitive Scale Armor",
            "Bronze Armor",
            "Linothorax Armor",
            "Scale Armor",
            "Lamellar Armor",
            "Greek Hoplite Armor",
            "Assyrian Iron Armor",
            "Roman Lorica Segmentata",
            "Persian Sparabara Armor",
            "Celtic Chainmail Armor",
            "Etruscan Bronze Plate Armor",
            "Egyptian Leather Scale Armor",
            "Hittite Bronze Scale Armor",
            "Chainmail Armor",
            "Gambeson Armor",
            "Plate Armor",
            "Brigandine Armor",
            "Knight's Full Plate Armor",
            "Padded Armor",
            "Boiled Leather Armor",
            "Splint Armor",
            "Scale Hauberk Armor",
            "Mail-and-Plate Armor",
            "Kozane Samurai Armor",
            "Coat of Plates",
            "Crusader Surcoat Armor",
            "Byzantine Lamellar Armor",
            "Norman Hauberk Armor",
            "Viking Chainmail Armor",
            "Maximilian Armor",
            "Cuirassier Armor",
            "Half-Plate Armor",
            "Tournament Plate Armor",
            "Polish Hussar Winged Armor",
            "Blackened Plate Armor",
            "Landsknecht Armor",
            "O-Yoroi Samurai Armor",
            "Do-Maru Armor",
            "Han Chinese Lamellar Armor",
            "Mongol Lamellar Armor",
            "Tibetan Lamellar Armor",
            "Qing Dynasty Brigandine Armor",
            "Korean Brigandine Armor",
            "Japanese Tatami Armor",
            "Ryukyuan Gusuku Armor",
            "Vietnamese Lacquered Lamellar Armor",
            "Shikoro Armor",
            "Aztec Cotton Armor",
            "Inca Quilted Armor",
            "Native American Rawhide Armor",
            "Maori Woven Flax Armor",
            "Zulu Cowhide Shield Armor",
            "Iroquois Wooden Slat Armor",
            "Tupi Feathered Armor",
            "Pacific Islander Coconut Fiber Armor",
            "Ballistic Armor",
            "Kevlar Armor",
            "Exoskeleton Armor",
            "Powered Combat Armor",
            "Steampunk Brass Armor",
            "Dieselpunk Mechanized Armor",
            "Ceramic Plate Armor",
            "Carbon Fiber Combat Armor",
            "Graphene-Layered Armor",
            "Liquid Armor Suit",
            "Bulletproof Combat Suit",
            "Advanced Riot Control Armor",
            "Power Armor",
            "Energy Shield Armor",
            "Mech Armor",
            "Nanobot Weave Armor",
            "Plasma Reflective Armor",
            "Force Field Armor",
            "Stealth Camouflage Armor",
            "Cryo-Resistant Armor",
            "Magnetic Repulsion Armor",
            "Bio-Augmented Armor",
            "Gravity-Dampening Armor",
            "Photon Deflection Armor",
            "Plasma Shielded Suit",
            "Radiation-Absorbing Armor",
            "Zero-Gravity Combat Armor",
            "Neutron-Repellent Armor",
            "AI-Assisted Combat Suit",
            "Self-Healing Nano Armor",
            "Quantum Phase Armor",
            "Dragonbone Plate Armor",
            "Elven Chainmail Armor",
            "Dwarven Forge Plate Armor",
            "Shadow Silk Armor",
            "Runed Mithril Plate Armor",
            "Obsidian Plate Armor",
            "Crystal Armor",
            "Chitin Armor",
            "Demonforged Plate Armor",
            "Phoenix Feather Armor",
            "Hydra Scale Armor",
            "Lichlord's Bone Armor",
            "Stoneskin Plate Armor",
            "Celestial Radiance Armor",
            "Voidwalker Armor",
            "Bloodsteel Armor",
            "Frostforged Plate Armor",
            "Stormshard Armor",
            "Ethereal Woven Armor",
            "Spectral Plate Armor",
            "Wyrmscale Armor",
            "Aegis of the Eternal Flame",
            "Thornwood Plate Armor",
            "Silverlight Plate Armor",
            "Magus Enchanted Armor"
          ],
          {
            "forceInput": false
          }
        ],
        "uniforms": [
          [
            "NONE",
            "RANDOM",
            "Hunter-Gatherer Outfit",
            "Shaman Ritual Uniform",
            "Tribal War Paint Uniform",
            "Ceremonial Animal Skin Robe",
            "Roman Legionary Uniform",
            "Spartan Hoplite Uniform",
            "Egyptian Priest Uniform",
            "Persian Immortal Uniform",
            "Assyrian Archer Uniform",
            "Greek Charioteer Uniform",
            "Macedonian Phalanx Uniform",
            "Celtic Warrior Uniform",
            "Babylonian Scholar Robe",
            "Knight's Heraldic Tabard",
            "Monastic Robe Uniform",
            "Feudal Lord's Court Uniform",
            "Squire's Training Garb",
            "Medieval Peasant Work Uniform",
            "Crusader Knight Uniform",
            "Medieval Merchant's Outfit",
            "Plague Doctor's Uniform",
            "Jester's Costume Uniform",
            "Court Minstrel Attire",
            "Tournament Jousting Tabard",
            "Renaissance Merchant Uniform",
            "Italian City-State Militia Uniform",
            "Landsknecht Soldier Uniform",
            "French Musketeer Uniform",
            "English Longbowman Uniform",
            "Renaissance Painter's Robe",
            "Spanish Conquistador Uniform",
            "Royal Courtier Uniform",
            "Renaissance Scholar Gown",
            "Genoese Sailor Uniform",
            "Napoleonic Infantry Uniform",
            "British Redcoat Uniform",
            "French Revolutionary Guard Uniform",
            "American Continental Army Uniform",
            "Pirate Captain's Uniform",
            "Privateer's Garb",
            "East India Company Officer Uniform",
            "Spanish Armada Naval Uniform",
            "Russian Imperial Guard Uniform",
            "Prussian Hussar Uniform",
            "Ming Dynasty Imperial Guard Uniform",
            "Ottoman Janissary Uniform",
            "Victorian Policeman Uniform",
            "Industrial Revolution Factory Worker Uniform",
            "Victorian Nurse's Uniform",
            "British Officer Uniform",
            "Railroad Conductor Uniform",
            "Steampunk Engineer Uniform",
            "Victorian Schoolteacher Gown",
            "Steamship Captain's Uniform",
            "Circus Ringmaster Costume",
            "Victorian Fire Brigade Uniform",
            "World War I Infantry Uniform",
            "World War II Aviator Uniform",
            "Modern Army Combat Uniform (ACU)",
            "Marine Corps Dress Blues",
            "Navy SEAL Tactical Uniform",
            "Air Force Flight Suit",
            "Ghillie Suit (Sniper Uniform)",
            "UN Peacekeeper Uniform",
            "Special Forces Urban Combat Uniform",
            "Paratrooper Uniform",
            "Artillery Officer Dress Uniform",
            "Submarine Crew Uniform",
            "Desert Camo Uniform",
            "Arctic Survival Uniform",
            "Police Officer Uniform",
            "Firefighter Turnout Gear",
            "Paramedic Emergency Uniform",
            "Chef's Whites",
            "Doctor's Scrubs",
            "Nurse's Scrubs",
            "Mechanic's Coveralls",
            "Pilot's Flight Suit",
            "Train Engineer's Uniform",
            "Hotel Bellhop Uniform",
            "Mail Carrier Uniform",
            "Corporate Security Guard Uniform",
            "Construction Worker Safety Gear",
            "Factory Worker Uniform",
            "Judge's Robes",
            "Waiter's Service Uniform",
            "Clergy Vestments",
            "Graduation Cap and Gown",
            "School Uniform",
            "Sports Team Jersey",
            "Fencing Gear",
            "Karate Gi",
            "Football Quarterback Uniform",
            "Track and Field Athlete Uniform",
            "Cyclist Uniform",
            "Baseball Player Uniform",
            "Basketball Player Uniform",
            "Starfleet Officer Uniform",
            "Space Marine Combat Suit",
            "Alien Diplomatic Uniform",
            "Colonial Space Miner Outfit",
            "Zero-Gravity Technician Uniform",
            "Cyberpunk Hacker Attire",
            "Deep Space Pilot Suit",
            "Galactic Federation Guard Uniform",
            "Synth Overseer Uniform",
            "Time Traveler's Robe Uniform",
            "Elven Ranger's Uniform",
            "Wizard's Academic Robes",
            "Dwarven Smith's Garb",
            "Knight-Enchanter Uniform",
            "Royal Guard Uniform",
            "Dragon Priest's Ceremonial Robe",
            "Necromancer's Robe",
            "Thieves' Guild Shadow Uniform",
            "Battle Mage Combat Robe",
            "Assassin's Stealth Outfit",
            "Paladin's Holy Garb",
            "Forest Guardian Uniform",
            "Alchemist's Laboratory Coat",
            "Bard's Entertainer Uniform",
            "Vampire Court Uniform",
            "Warlock's Infernal Robe"
          ],
          {
            "forceInput": false
          }
        ],
        "material": [
          [
            "NONE",
            "RANDOM",
            "cotton",
            "wool",
            "silk",
            "linen",
            "cashmere",
            "polyester",
            "nylon",
            "spandex",
            "leather",
            "latex",
            "velvet",
            "satin",
            "lace",
            "mesh",
            "tulle",
            "denim",
            "tweed",
            "chiffon",
            "latex"
          ],
          {
            "forceInput": false
          }
        ],
        "pattern": [
          [
            "NONE",
            "RANDOM",
            "solid",
            "striped",
            "plaid",
            "checkered",
            "polka dot",
            "floral",
            "animal print",
            "camouflage",
            "paisley",
            "tropical",
            "geometric",
            "abstract",
            "chevron",
            "diamond",
            "hexagonal",
            "tie-dye",
            "ombre",
            "gradient",
            "glitter",
            "holographic",
            "psychedelic",
            "optical illusion",
            "digital print",
            "herringbone",
            "houndstooth",
            "argyle",
            "tartan",
            "pinstripe"
          ],
          {
            "forceInput": false
          }
        ],
        "style_details": [
          [
            "NONE",
            "RANDOM",
            "fitted",
            "loose",
            "oversized",
            "skin-tight",
            "baggy",
            "layered",
            "asymmetric",
            "structured",
            "flowing",
            "draped",
            "distressed",
            "ripped",
            "frayed",
            "patched",
            "embellished",
            "studded",
            "buckled",
            "zipped",
            "laced",
            "buttoned"
          ],
          {
            "forceInput": false
          }
        ],
        "style": [
          [
            "NONE",
            "RANDOM",
            "casual",
            "formal",
            "business",
            "streetwear",
            "athletic",
            "fantasy",
            "sci-fi",
            "historical",
            "military",
            "punk",
            "gothic",
            "bohemian",
            "minimal",
            "elegant",
            "vintage",
            "grunge",
            "preppy",
            "romantic",
            "avant-garde",
            "cyberpunk",
            "steampunk",
            "lolita",
            "kawaii"
          ],
          {
            "forceInput": false
          }
        ],
        "cosplay": [
          [
            "NONE",
            "RANDOM",
            "Sailor Moon",
            "Princess Leia",
            "Elsa",
            "Tifa Lockhart",
            "Lara Croft",
            "Asuka Langley",
            "Harley Quinn",
            "Wonder Woman",
            "Zero Two",
            "Mikasa Ackerman",
            "Yennefer of Vengerberg",
            "Ciri",
            "Ryuko Matoi",
            "Hatsune Miku",
            "Samus Aran",
            "Bulma",
            "Nezuko Kamado",
            "Hinata Hyuga",
            "Korra",
            "Bayonetta",
            "Aerith Gainsborough",
            "Android 18",
            "Raven",
            "Sakura Haruno",
            "D.Va",
            "Sheik",
            "Zelda",
            "Ada Wong",
            "Jean Grey"
          ],
          {
            "forceInput": false
          }
        ],
        "cosplay_description": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "top",
        "COLOR_top",
        "bottom",
        "COLOR_bottom",
        "dress",
        "COLOR_dress",
        "full_body",
        "COLOR_full_body",
        "footwear",
        "COLOR_footwear",
        "head_item",
        "COLOR_head_item",
        "eye_item",
        "COLOR_eye_item",
        "mouth_item",
        "COLOR_mouth_item",
        "accessories",
        "COLOR_accessories",
        "armors",
        "uniforms",
        "material",
        "pattern",
        "style_details",
        "style",
        "cosplay",
        "cosplay_description",
        "CUSTOM_PROMPT"
      ]
    },
    "output": [
      "GEN_OUTFIT,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_OUTFIT"
    ],
    "name": "Bjornulf_TextGeneratorOutfitFemale",
    "display_name": "👗 Text Generator (Outfit Female)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextGeneratorOutfitMale": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "top": [
          [
            "NONE",
            "RANDOM",
            "t-shirt",
            "button-up shirt",
            "sweater",
            "hoodie",
            "tank top",
            "dress shirt",
            "polo shirt",
            "blazer",
            "suit jacket",
            "military jacket",
            "bomber jacket",
            "windbreaker",
            "leather jacket",
            "v-neck shirt",
            "long sleeve shirt",
            "henley",
            "cardigan",
            "flannel shirt",
            "sweatshirt",
            "puffer jacket",
            "parka",
            "fleece jacket",
            "chambray shirt",
            "duster coat",
            "peacoat",
            "raincoat",
            "golf shirt",
            "thermal shirt",
            "polo neck",
            "crew neck shirt",
            "sherpa jacket"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_top": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "bottom": [
          [
            "NONE",
            "RANDOM",
            "jeans",
            "slacks",
            "trousers",
            "cargo pants",
            "dress pants",
            "shorts",
            "bermudas",
            "joggers",
            "track pants",
            "denim shorts",
            "chinos",
            "bootcut jeans",
            "skinny jeans",
            "wide leg pants",
            "sweatpants",
            "overalls",
            "corduroys",
            "leather pants",
            "high-waisted pants",
            "capris",
            "harem pants",
            "biker shorts"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_bottom": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "footwear": [
          [
            "NONE",
            "RANDOM",
            "sneakers",
            "oxford shoes",
            "loafers",
            "dress shoes",
            "chelsea boots",
            "combat boots",
            "derby shoes",
            "slip-ons",
            "work boots",
            "flip-flops",
            "boat shoes",
            "moccasins",
            "brogues",
            "athletic shoes",
            "high-top sneakers",
            "running shoes",
            "sandals",
            "hiking boots",
            "desert boots",
            "chukka boots"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_footwear": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "head_item": [
          [
            "NONE",
            "RANDOM",
            "fedora",
            "beanie",
            "baseball cap",
            "bucket hat",
            "cowboy hat",
            "wide-brim hat",
            "trilby",
            "visor hat",
            "boater hat",
            "newsboy cap",
            "flat cap",
            "snapback",
            "wool hat",
            "straw hat",
            "trapper hat",
            "panama hat",
            "military cap",
            "pork pie hat",
            "safari hat",
            "top hat",
            "bowler hat",
            "aviator cap",
            "hunting cap",
            "hard hat",
            "beret",
            "biker helmet",
            "sports helmet",
            "skull cap",
            "headband",
            "durag"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_head_item": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "eye_item": [
          [
            "NONE",
            "RANDOM",
            "sunglass",
            "aviator",
            "wayfarer",
            "retro sunglass",
            "polarized sunglass",
            "goggle",
            "tactical goggle",
            "steampunk goggle",
            "visor cap",
            "sun visor"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_eye_item": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "mouth_item": [
          [
            "NONE",
            "RANDOM",
            "bandana",
            "scarf",
            "neck gaiter",
            "face shield",
            "welding mask",
            "leather face cover",
            "decorative mask",
            "minimalist eyemask",
            "balaclava",
            "safari scarf"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_mouth_item": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "accessories": [
          [
            "NONE",
            "RANDOM",
            "watch",
            "tie",
            "bow tie",
            "hat",
            "cap",
            "scarf",
            "belt",
            "backpack"
          ],
          {
            "forceInput": false
          }
        ],
        "COLOR_accessories": [
          [
            "NONE",
            "RANDOM",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ],
          {
            "forceInput": false
          }
        ],
        "armors": [
          [
            "NONE",
            "RANDOM",
            "Bone Armor",
            "Wooden Plate Armor",
            "Reed Armor",
            "Stone-Studded Armor",
            "Animal Hide Armor",
            "Fiber-Woven Armor",
            "Primitive Scale Armor",
            "Bronze Armor",
            "Linothorax Armor",
            "Scale Armor",
            "Lamellar Armor",
            "Greek Hoplite Armor",
            "Assyrian Iron Armor",
            "Roman Lorica Segmentata",
            "Persian Sparabara Armor",
            "Celtic Chainmail Armor",
            "Etruscan Bronze Plate Armor",
            "Egyptian Leather Scale Armor",
            "Hittite Bronze Scale Armor",
            "Chainmail Armor",
            "Gambeson Armor",
            "Plate Armor",
            "Brigandine Armor",
            "Knight's Full Plate Armor",
            "Padded Armor",
            "Boiled Leather Armor",
            "Splint Armor",
            "Scale Hauberk Armor",
            "Mail-and-Plate Armor",
            "Kozane Samurai Armor",
            "Coat of Plates",
            "Crusader Surcoat Armor",
            "Byzantine Lamellar Armor",
            "Norman Hauberk Armor",
            "Viking Chainmail Armor",
            "Maximilian Armor",
            "Cuirassier Armor",
            "Half-Plate Armor",
            "Tournament Plate Armor",
            "Polish Hussar Winged Armor",
            "Blackened Plate Armor",
            "Landsknecht Armor",
            "O-Yoroi Samurai Armor",
            "Do-Maru Armor",
            "Han Chinese Lamellar Armor",
            "Mongol Lamellar Armor",
            "Tibetan Lamellar Armor",
            "Qing Dynasty Brigandine Armor",
            "Korean Brigandine Armor",
            "Japanese Tatami Armor",
            "Ryukyuan Gusuku Armor",
            "Vietnamese Lacquered Lamellar Armor",
            "Shikoro Armor",
            "Aztec Cotton Armor",
            "Inca Quilted Armor",
            "Native American Rawhide Armor",
            "Maori Woven Flax Armor",
            "Zulu Cowhide Shield Armor",
            "Iroquois Wooden Slat Armor",
            "Tupi Feathered Armor",
            "Pacific Islander Coconut Fiber Armor",
            "Ballistic Armor",
            "Kevlar Armor",
            "Exoskeleton Armor",
            "Powered Combat Armor",
            "Steampunk Brass Armor",
            "Dieselpunk Mechanized Armor",
            "Ceramic Plate Armor",
            "Carbon Fiber Combat Armor",
            "Graphene-Layered Armor",
            "Liquid Armor Suit",
            "Bulletproof Combat Suit",
            "Advanced Riot Control Armor",
            "Power Armor",
            "Energy Shield Armor",
            "Mech Armor",
            "Nanobot Weave Armor",
            "Plasma Reflective Armor",
            "Force Field Armor",
            "Stealth Camouflage Armor",
            "Cryo-Resistant Armor",
            "Magnetic Repulsion Armor",
            "Bio-Augmented Armor",
            "Gravity-Dampening Armor",
            "Photon Deflection Armor",
            "Plasma Shielded Suit",
            "Radiation-Absorbing Armor",
            "Zero-Gravity Combat Armor",
            "Neutron-Repellent Armor",
            "AI-Assisted Combat Suit",
            "Self-Healing Nano Armor",
            "Quantum Phase Armor",
            "Dragonbone Plate Armor",
            "Elven Chainmail Armor",
            "Dwarven Forge Plate Armor",
            "Shadow Silk Armor",
            "Runed Mithril Plate Armor",
            "Obsidian Plate Armor",
            "Crystal Armor",
            "Chitin Armor",
            "Demonforged Plate Armor",
            "Phoenix Feather Armor",
            "Hydra Scale Armor",
            "Lichlord's Bone Armor",
            "Stoneskin Plate Armor",
            "Celestial Radiance Armor",
            "Voidwalker Armor",
            "Bloodsteel Armor",
            "Frostforged Plate Armor",
            "Stormshard Armor",
            "Ethereal Woven Armor",
            "Spectral Plate Armor",
            "Wyrmscale Armor",
            "Aegis of the Eternal Flame",
            "Thornwood Plate Armor",
            "Silverlight Plate Armor",
            "Magus Enchanted Armor"
          ],
          {
            "forceInput": false
          }
        ],
        "uniforms": [
          [
            "NONE",
            "RANDOM",
            "Hunter-Gatherer Outfit",
            "Shaman Ritual Uniform",
            "Tribal War Paint Uniform",
            "Ceremonial Animal Skin Robe",
            "Roman Legionary Uniform",
            "Spartan Hoplite Uniform",
            "Egyptian Priest Uniform",
            "Persian Immortal Uniform",
            "Assyrian Archer Uniform",
            "Greek Charioteer Uniform",
            "Macedonian Phalanx Uniform",
            "Celtic Warrior Uniform",
            "Babylonian Scholar Robe",
            "Knight's Heraldic Tabard",
            "Monastic Robe Uniform",
            "Feudal Lord's Court Uniform",
            "Squire's Training Garb",
            "Medieval Peasant Work Uniform",
            "Crusader Knight Uniform",
            "Medieval Merchant's Outfit",
            "Plague Doctor's Uniform",
            "Jester's Costume Uniform",
            "Court Minstrel Attire",
            "Tournament Jousting Tabard",
            "Renaissance Merchant Uniform",
            "Italian City-State Militia Uniform",
            "Landsknecht Soldier Uniform",
            "French Musketeer Uniform",
            "English Longbowman Uniform",
            "Renaissance Painter's Robe",
            "Spanish Conquistador Uniform",
            "Royal Courtier Uniform",
            "Renaissance Scholar Gown",
            "Genoese Sailor Uniform",
            "Napoleonic Infantry Uniform",
            "British Redcoat Uniform",
            "French Revolutionary Guard Uniform",
            "American Continental Army Uniform",
            "Pirate Captain's Uniform",
            "Privateer's Garb",
            "East India Company Officer Uniform",
            "Spanish Armada Naval Uniform",
            "Russian Imperial Guard Uniform",
            "Prussian Hussar Uniform",
            "Ming Dynasty Imperial Guard Uniform",
            "Ottoman Janissary Uniform",
            "Victorian Policeman Uniform",
            "Industrial Revolution Factory Worker Uniform",
            "Victorian Nurse's Uniform",
            "British Officer Uniform",
            "Railroad Conductor Uniform",
            "Steampunk Engineer Uniform",
            "Victorian Schoolteacher Gown",
            "Steamship Captain's Uniform",
            "Circus Ringmaster Costume",
            "Victorian Fire Brigade Uniform",
            "World War I Infantry Uniform",
            "World War II Aviator Uniform",
            "Modern Army Combat Uniform (ACU)",
            "Marine Corps Dress Blues",
            "Navy SEAL Tactical Uniform",
            "Air Force Flight Suit",
            "Ghillie Suit (Sniper Uniform)",
            "UN Peacekeeper Uniform",
            "Special Forces Urban Combat Uniform",
            "Paratrooper Uniform",
            "Artillery Officer Dress Uniform",
            "Submarine Crew Uniform",
            "Desert Camo Uniform",
            "Arctic Survival Uniform",
            "Police Officer Uniform",
            "Firefighter Turnout Gear",
            "Paramedic Emergency Uniform",
            "Chef's Whites",
            "Doctor's Scrubs",
            "Nurse's Scrubs",
            "Mechanic's Coveralls",
            "Pilot's Flight Suit",
            "Train Engineer's Uniform",
            "Hotel Bellhop Uniform",
            "Mail Carrier Uniform",
            "Corporate Security Guard Uniform",
            "Construction Worker Safety Gear",
            "Factory Worker Uniform",
            "Judge's Robes",
            "Waiter's Service Uniform",
            "Clergy Vestments",
            "Graduation Cap and Gown",
            "School Uniform",
            "Sports Team Jersey",
            "Fencing Gear",
            "Karate Gi",
            "Football Quarterback Uniform",
            "Track and Field Athlete Uniform",
            "Cyclist Uniform",
            "Baseball Player Uniform",
            "Basketball Player Uniform",
            "Starfleet Officer Uniform",
            "Space Marine Combat Suit",
            "Alien Diplomatic Uniform",
            "Colonial Space Miner Outfit",
            "Zero-Gravity Technician Uniform",
            "Cyberpunk Hacker Attire",
            "Deep Space Pilot Suit",
            "Galactic Federation Guard Uniform",
            "Synth Overseer Uniform",
            "Time Traveler's Robe Uniform",
            "Elven Ranger's Uniform",
            "Wizard's Academic Robes",
            "Dwarven Smith's Garb",
            "Knight-Enchanter Uniform",
            "Royal Guard Uniform",
            "Dragon Priest's Ceremonial Robe",
            "Necromancer's Robe",
            "Thieves' Guild Shadow Uniform",
            "Battle Mage Combat Robe",
            "Assassin's Stealth Outfit",
            "Paladin's Holy Garb",
            "Forest Guardian Uniform",
            "Alchemist's Laboratory Coat",
            "Bard's Entertainer Uniform",
            "Vampire Court Uniform",
            "Warlock's Infernal Robe"
          ],
          {
            "forceInput": false
          }
        ],
        "material": [
          [
            "NONE",
            "RANDOM",
            "cotton",
            "wool",
            "silk",
            "linen",
            "cashmere",
            "polyester",
            "nylon",
            "spandex",
            "leather",
            "latex",
            "velvet",
            "satin",
            "lace",
            "mesh",
            "tulle",
            "denim",
            "tweed",
            "chiffon",
            "latex"
          ],
          {
            "forceInput": false
          }
        ],
        "pattern": [
          [
            "NONE",
            "RANDOM",
            "solid",
            "striped",
            "plaid",
            "checkered",
            "polka dot",
            "floral",
            "animal print",
            "camouflage",
            "paisley",
            "tropical",
            "geometric",
            "abstract",
            "chevron",
            "diamond",
            "hexagonal",
            "tie-dye",
            "ombre",
            "gradient",
            "glitter",
            "holographic",
            "psychedelic",
            "optical illusion",
            "digital print",
            "herringbone",
            "houndstooth",
            "argyle",
            "tartan",
            "pinstripe"
          ],
          {
            "forceInput": false
          }
        ],
        "style_details": [
          [
            "NONE",
            "RANDOM",
            "fitted",
            "loose",
            "oversized",
            "skin-tight",
            "baggy",
            "layered",
            "asymmetric",
            "structured",
            "flowing",
            "draped",
            "distressed",
            "ripped",
            "frayed",
            "patched",
            "embellished",
            "studded",
            "buckled",
            "zipped",
            "laced",
            "buttoned"
          ],
          {
            "forceInput": false
          }
        ],
        "style": [
          [
            "NONE",
            "RANDOM",
            "casual",
            "formal",
            "business",
            "streetwear",
            "athletic",
            "fantasy",
            "sci-fi",
            "historical",
            "military",
            "punk",
            "gothic",
            "bohemian",
            "minimal",
            "elegant",
            "vintage",
            "grunge",
            "preppy",
            "romantic",
            "avant-garde",
            "cyberpunk",
            "steampunk",
            "lolita",
            "kawaii"
          ],
          {
            "forceInput": false
          }
        ],
        "cosplay": [
          [
            "NONE",
            "RANDOM",
            "Naruto Uzumaki",
            "Geralt of Rivia",
            "Cloud Strife",
            "Goku",
            "Link",
            "Darth Vader",
            "Captain America",
            "Iron Man",
            "Luffy",
            "Spider-Man"
          ],
          {
            "forceInput": false
          }
        ],
        "cosplay_description": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "CUSTOM_PROMPT": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "top",
        "COLOR_top",
        "bottom",
        "COLOR_bottom",
        "footwear",
        "COLOR_footwear",
        "head_item",
        "COLOR_head_item",
        "eye_item",
        "COLOR_eye_item",
        "mouth_item",
        "COLOR_mouth_item",
        "accessories",
        "COLOR_accessories",
        "armors",
        "uniforms",
        "material",
        "pattern",
        "style_details",
        "style",
        "cosplay",
        "cosplay_description",
        "CUSTOM_PROMPT"
      ]
    },
    "output": [
      "GEN_OUTFIT,STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GEN_OUTFIT"
    ],
    "name": "Bjornulf_TextGeneratorOutfitMale",
    "display_name": "👚 Text Generator (Outfit Male)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ListLooper": {
    "input": {
      "required": {
        "SELECTION": [
          [
            "camera_angle",
            "shot_type",
            "lighting",
            "multi_char_action"
          ],
          {
            "forceInput": false
          }
        ],
        "camera_angle": [
          [
            "ALL (13)",
            "front view",
            "side view",
            "three-quarter view",
            "back view",
            "bird's eye view",
            "worm's eye view",
            "dutch angle",
            "over-the-shoulder",
            "high angle",
            "low angle",
            "eye level",
            "aerial view",
            "tilted angle"
          ],
          {
            "forceInput": false
          }
        ],
        "shot_type": [
          [
            "ALL (10)",
            "close-up",
            "medium shot",
            "full body",
            "wide shot",
            "extreme close-up",
            "medium close-up",
            "medium long shot",
            "long shot",
            "extreme long shot",
            "establishing shot"
          ],
          {
            "forceInput": false
          }
        ],
        "multi_char_action": [
          [
            "ALL (12)",
            "talking to each other",
            "fighting",
            "dancing",
            "walking together",
            "having dinner",
            "playing games",
            "working together",
            "arguing",
            "celebrating",
            "performing",
            "studying",
            "shopping"
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "SELECTION",
        "camera_angle",
        "shot_type",
        "multi_char_action"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Bjornulf_ListLooper",
    "display_name": "♻🔥📝 List Looper (Text Generator)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ListLooperScene": {
    "input": {
      "required": {
        "SELECTION": [
          [
            "scene_type",
            "time_period",
            "weather_condition",
            "ambiance",
            "setting"
          ],
          {
            "forceInput": false
          }
        ],
        "scene_type": [
          [
            "ALL (15)",
            "urban",
            "natural",
            "fantasy",
            "sci-fi",
            "historical",
            "industrial",
            "domestic",
            "underwater",
            "aerial",
            "space",
            "post-apocalyptic",
            "medieval",
            "futuristic",
            "tropical",
            "arctic"
          ]
        ],
        "time_period": [
          [
            "ALL (10)",
            "dawn",
            "morning",
            "noon",
            "afternoon",
            "dusk",
            "night",
            "midnight",
            "golden hour",
            "blue hour",
            "twilight"
          ]
        ],
        "weather_condition": [
          [
            "ALL (15)",
            "clear",
            "cloudy",
            "rainy",
            "stormy",
            "snowy",
            "foggy",
            "misty",
            "windy",
            "sunny",
            "overcast",
            "thunderstorm",
            "hazy",
            "humid",
            "frosty",
            "tropical"
          ]
        ],
        "ambiance": [
          [
            "ALL (15)",
            "peaceful",
            "mysterious",
            "chaotic",
            "serene",
            "bustling",
            "abandoned",
            "lively",
            "magical",
            "dystopian",
            "utopian",
            "ancient",
            "modern",
            "timeless",
            "ethereal",
            "supernatural"
          ]
        ],
        "setting": [
          [
            "ALL (109)",
            "city street",
            "forest",
            "beach",
            "mountains",
            "desert",
            "castle",
            "spaceship",
            "underwater city",
            "floating islands",
            "cyberpunk city",
            "shadow realm",
            "swamp",
            "volcano",
            "arctic",
            "skyancient ruins",
            "space station",
            "magical realm",
            "steampunk world",
            "parallel dimension",
            "snowy tundra",
            "volcanic island",
            "abandoned theme park",
            "alien planet",
            "dystopian future",
            "post-apocalyptic wasteland",
            "enchanted forest",
            "underworld",
            "moon base",
            "faerie kingdom",
            "dreamscape",
            "mystical cave",
            "giant's lair",
            "superhero city",
            "nuclear wasteland",
            "retro-futuristic city",
            "medieval village",
            "ancient library",
            "time machine interior",
            "supernatural mansion",
            "dark alleyway",
            "secret laboratory",
            "holographic world",
            "floating city",
            "temple ruins",
            "hidden jungle",
            "space colony",
            "fantasy kingdom",
            "mythical mountain",
            "glowing cave",
            "interdimensional rift",
            "underground bunker",
            "abandoned subway",
            "magic academy",
            "suburban neighborhood",
            "artificial intelligence city",
            "cybernetic jungle",
            "world on fire",
            "parallel universe",
            "virtual reality landscape",
            "sunken shipwreck",
            "enchanted castle",
            "cloud city",
            "futuristic metropolis",
            "labyrinthine ruins",
            "swampy marshlands",
            "toxic wasteland",
            "magician's tower",
            "swirling vortex",
            "ancient temple",
            "tropical island",
            "underground world",
            "geothermal spring",
            "haunted forest",
            "ice planet",
            "glittering city",
            "steampunk airship",
            "spooky mansion",
            "digital world",
            "wizard's tower",
            "deserted island",
            "space-time anomaly",
            "ancient battlefield",
            "crystal cavern",
            "underwater ruins",
            "abandoned military base",
            "stormy ocean",
            "mystical oasis",
            "frozen tundra",
            "high-tech laboratory",
            "rustic farmhouse",
            "glowing meadow",
            "alien jungle",
            "robot city",
            "hidden temple",
            "demonic realm",
            "lost city",
            "barren wasteland",
            "moonlit bay",
            "twisted carnival",
            "vampire's castle",
            "clockwork world",
            "intergalactic market",
            "fantasy battlefield",
            "sunny meadow",
            "mysterious island",
            "spaceport",
            "hacker's lair",
            "ancient fortress",
            "robotic wasteland"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "SELECTION",
        "scene_type",
        "time_period",
        "weather_condition",
        "ambiance",
        "setting"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Bjornulf_ListLooperScene",
    "display_name": "♻🌄📝 List Looper (Text Generator Scenes)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ListLooperStyle": {
    "input": {
      "required": {
        "SELECTION": [
          [
            "artistic_style",
            "color_palette",
            "lighting_type",
            "mood",
            "composition"
          ],
          {
            "forceInput": false
          }
        ],
        "artistic_style": [
          [
            "ALL (16)",
            "photography",
            "oil painting",
            "watercolor",
            "digital art",
            "pencil sketch",
            "anime",
            "photorealistic",
            "comic book",
            "impressionist",
            "pop art",
            "minimalist",
            "concept art",
            "3D render",
            "cinematic",
            "studio photography",
            "film noir"
          ]
        ],
        "color_palette": [
          [
            "ALL (15)",
            "vibrant",
            "muted",
            "monochromatic",
            "pastel",
            "dark and moody",
            "warm",
            "cool",
            "high contrast",
            "earthy",
            "neon",
            "vintage",
            "black and white",
            "sepia",
            "technicolor",
            "iridescent"
          ]
        ],
        "lighting_type": [
          [
            "ALL (15)",
            "natural",
            "dramatic",
            "soft",
            "harsh",
            "backlit",
            "rim lighting",
            "volumetric",
            "ambient",
            "studio",
            "cinematic",
            "golden hour",
            "blue hour",
            "neon",
            "candlelit",
            "spotlit"
          ]
        ],
        "mood": [
          [
            "ALL (15)",
            "peaceful",
            "mysterious",
            "dramatic",
            "romantic",
            "melancholic",
            "energetic",
            "serene",
            "tense",
            "whimsical",
            "ethereal",
            "dark",
            "cheerful",
            "nostalgic",
            "dreamy",
            "epic"
          ]
        ],
        "composition": [
          [
            "ALL (11)",
            "rule of thirds",
            "symmetrical",
            "dynamic",
            "minimalist",
            "centered",
            "diagonal",
            "framed",
            "leading lines",
            "golden ratio",
            "panoramic",
            "dutch angle"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "SELECTION",
        "artistic_style",
        "color_palette",
        "lighting_type",
        "mood",
        "composition"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Bjornulf_ListLooperStyle",
    "display_name": "♻🎨📝 List Looper (Text Generator Styles)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ListLooperCharacter": {
    "input": {
      "required": {
        "SELECTION": [
          [
            "location_on_image",
            "ethnicity",
            "nationality",
            "age_male",
            "age_female",
            "body_shape",
            "skin_tone",
            "eye_color",
            "hair_style",
            "hair_color",
            "facial_hair",
            "breasts",
            "ass",
            "land_animal",
            "water_animal",
            "creature_type",
            "creature_size",
            "creature_temperament",
            "creature_ability",
            "creature_features",
            "magical_properties"
          ],
          {
            "forceInput": false
          }
        ],
        "location_on_image": [
          [
            "ALL (9)",
            "left",
            "center",
            "right",
            "top",
            "bottom",
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right"
          ]
        ],
        "ethnicity": [
          [
            "ALL (48)",
            "Asian",
            "Caucasian",
            "African",
            "Latino",
            "Middle Eastern",
            "Indian",
            "Nord",
            "Argonian",
            "Khajiit",
            "High Elf",
            "Dark Elf",
            "Drow",
            "Orc",
            "Dwarf",
            "Dragonborn",
            "Tiefling",
            "Aasimar",
            "Warforged",
            "Na'vi",
            "Protoss",
            "Vulcan",
            "Tabaxi",
            "Goliath",
            "Minotaur",
            "Asian",
            "Caucasian",
            "African",
            "Latina",
            "Middle Eastern",
            "Indian",
            "Nord",
            "Argonian",
            "Khajiit",
            "High Elf",
            "Dark Elf",
            "Drow",
            "Orc",
            "Dwarf",
            "Dragonborn",
            "Tiefling",
            "Aasimar",
            "Warforged",
            "Na'vi",
            "Protoss",
            "Vulcan",
            "Tabaxi",
            "Goliath",
            "Minotaur"
          ]
        ],
        "nationality": [
          [
            "ALL (121)",
            "Chinese",
            "Japanese",
            "Korean",
            "Mongolian",
            "Vietnamese",
            "Thai",
            "Filipino",
            "Indonesian",
            "Malaysian",
            "Singaporean",
            "Nepalese",
            "Bhutanese",
            "Cambodian",
            "Laotian",
            "French",
            "German",
            "Italian",
            "Spanish",
            "Portuguese",
            "Russian",
            "Ukrainian",
            "Polish",
            "Norwegian",
            "Swedish",
            "Finnish",
            "Danish",
            "Dutch",
            "Austrian",
            "Greek",
            "Icelandic",
            "Scottish",
            "Welsh",
            "English",
            "Irish",
            "Hungarian",
            "Swiss",
            "Belgian",
            "Czech",
            "Slovak",
            "Serbian",
            "Croatian",
            "Bulgarian",
            "Romanian",
            "Macedonian",
            "Latvian",
            "Lithuanian",
            "Estonian",
            "Georgian",
            "Armenian",
            "Moldovan",
            "Nigerian",
            "Ethiopian",
            "South African",
            "Kenyan",
            "Tanzanian",
            "Ugandan",
            "Somali",
            "Sudanese",
            "Egyptian",
            "Algerian",
            "Moroccan",
            "Ghanaian",
            "Congolese",
            "Rwandan",
            "Zimbabwean",
            "Senegalese",
            "Malian",
            "Ivory Coast (Ivorian)",
            "Botswanan",
            "Namibian",
            "Chadian",
            "Tunisian",
            "Libyan",
            "Mexican",
            "Argentinian",
            "Colombian",
            "Peruvian",
            "Chilean",
            "Venezuelan",
            "Ecuadorian",
            "Guatemalan",
            "Bolivian",
            "Uruguayan",
            "Honduran",
            "Cuban",
            "Panamanian",
            "Puerto Rican",
            "Costa Rican",
            "Dominican",
            "Salvadoran",
            "Paraguayan",
            "Turkish",
            "Persian (Iranian)",
            "Arabian (Saudi)",
            "Iraqi",
            "Syrian",
            "Lebanese",
            "Jordanian",
            "Israeli",
            "Palestinian",
            "Kuwaiti",
            "Emirati",
            "Omani",
            "Yemeni",
            "Qatari",
            "Bahraini",
            "Indian",
            "Pakistani",
            "Bangladeshi",
            "Sri Lankan",
            "Maldivian",
            "Australian",
            "New Zealander (Kiwi)",
            "Papua New Guinean",
            "Native Hawaiian",
            "Inuit",
            "Samoan",
            "Tongan",
            "Fijian",
            "Maori",
            "Caribbean (specific islands can be listed)"
          ]
        ],
        "age_male": [
          [
            "ALL (6)",
            "baby boy",
            "boy",
            "teen boy",
            "young man",
            "man",
            "elderly man"
          ]
        ],
        "age_female": [
          [
            "ALL (6)",
            "baby girl",
            "girl",
            "teen girl",
            "young woman",
            "woman",
            "elderly woman"
          ]
        ],
        "body_shape": [
          [
            "ALL (49)",
            "athletic",
            "muscular",
            "slim",
            "slender",
            "petite",
            "average",
            "curvy",
            "full-figured",
            "tall and lean",
            "short and stocky",
            "broad-shouldered",
            "narrow-waisted",
            "hourglass figure",
            "pear-shaped",
            "apple-shaped",
            "rectangle-shaped",
            "diamond-shaped",
            "toned",
            "well-built",
            "lean muscular",
            "bodybuilder physique",
            "tall",
            "very tall",
            "short",
            "very short",
            "average height",
            "thin",
            "skinny",
            "plump",
            "heavy-set",
            "robust",
            "long-legged",
            "short-legged",
            "long-waisted",
            "short-waisted",
            "straight-postured",
            "broad-chested",
            "square-shouldered",
            "round-shouldered",
            "willowy",
            "statuesque",
            "compact",
            "lanky",
            "lithe",
            "svelte",
            "sturdy",
            "delicate",
            "graceful",
            "imposing"
          ]
        ],
        "skin_tone": [
          [
            "ALL (15)",
            "fair",
            "pale",
            "medium",
            "olive",
            "tan",
            "dark",
            "ebony",
            "golden",
            "rosy",
            "ruddy",
            "porcelain",
            "chocolate",
            "mahogany",
            "amber",
            "ivory"
          ]
        ],
        "eye_color": [
          [
            "ALL (13)",
            "blue",
            "green",
            "brown",
            "hazel",
            "amber",
            "grey",
            "violet",
            "black",
            "golden",
            "silver",
            "turquoise",
            "aqua",
            "heterochromatic"
          ]
        ],
        "hair_style": [
          [
            "ALL (34)",
            "long",
            "short",
            "curly",
            "straight",
            "wavy",
            "braided",
            "bald",
            "buzzcut",
            "bob",
            "pixie",
            "ponytail",
            "buns",
            "double ponytail",
            "afro",
            "dreadlocks",
            "spiky",
            "layered",
            "feathered",
            "messy",
            "tied-back",
            "fishtail braid",
            "french braid",
            "cornrows",
            "twists",
            "shaved sides",
            "undercut",
            "fade",
            "pompadour",
            "quiff",
            "mohawk",
            "faux hawk",
            "half-up half-down",
            "space buns",
            "ringlets"
          ]
        ],
        "hair_color": [
          [
            "ALL (29)",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ]
        ],
        "facial_hair": [
          [
            "ALL (27)",
            "clean-shaven",
            "stubble",
            "light stubble",
            "heavy stubble",
            "pencil mustache",
            "handlebar mustache",
            "horseshoe mustache",
            "walrus mustache",
            "chevron mustache",
            "toothbrush mustache",
            "English mustache",
            "goatee",
            "chinstrap beard",
            "soul patch",
            "balbo beard",
            "Van Dyke beard",
            "full beard",
            "ducktail beard",
            "bandholz beard",
            "Garibaldi beard",
            "short boxed beard",
            "Verdi beard",
            "mutton chops",
            "friendly mutton chops",
            "burnsides mustache",
            "anchor beard",
            "imperial beard"
          ]
        ],
        "breasts": [
          [
            "ALL (18)",
            "tiny",
            "small",
            "medium",
            "large",
            "very large",
            "extremely large",
            "round",
            "teardrop",
            "bell shaped",
            "conical",
            "wide set",
            "close set",
            "high set",
            "low set",
            "firm",
            "soft",
            "perky",
            "saggy"
          ]
        ],
        "ass": [
          [
            "ALL (19)",
            "tiny",
            "small",
            "medium",
            "large",
            "very large",
            "extremely large",
            "round",
            "heart shaped",
            "bubble",
            "pear shaped",
            "square",
            "high set",
            "low set",
            "outward facing",
            "inward facing",
            "firm",
            "soft",
            "muscular",
            "toned"
          ]
        ],
        "land_animal": [
          [
            "ALL (70)",
            "Mouse",
            "Hamster",
            "Ant",
            "Gecko",
            "Shrew",
            "Cricket",
            "Ladybug",
            "Butterfly",
            "Grasshopper",
            "Scorpion",
            "Cat",
            "Rabbit",
            "Fox",
            "Raccoon",
            "Beaver",
            "Skunk",
            "Squirrel",
            "Chicken",
            "Meerkat",
            "Koala",
            "Wolf",
            "Dog",
            "Deer",
            "Lion",
            "Tiger",
            "Bear",
            "Leopard",
            "Cheetah",
            "Pig",
            "Sheep",
            "Horse",
            "Cow",
            "Moose",
            "Bison",
            "Rhinoceros",
            "Hippopotamus",
            "Giraffe",
            "Camel",
            "Elk",
            "Buffalo",
            "Elephant",
            "Grizzly Bear",
            "Polar Bear",
            "Gorilla",
            "Anaconda",
            "Python",
            "Komodo Dragon",
            "Ostrich",
            "Kangaroo",
            "Sloth Bear",
            "Brachiosaurus",
            "Tyrannosaurus Rex",
            "Spinosaurus",
            "Pteranodon",
            "Mammoth",
            "Ground Sloth",
            "Paraceratherium",
            "Deinotherium",
            "Woolly Rhinoceros",
            "Gigantopithecus",
            "Argentinosaurus",
            "Supersaurus",
            "Diplodocus",
            "Amphicoelias",
            "Ultrasaurus",
            "Sauroposeidon",
            "Titanosaurus",
            "Paralititan",
            "Antarctosaurus",
            "Mamenchisaurus"
          ]
        ],
        "water_animal": [
          [
            "ALL (70)",
            "Guppy",
            "Seahorse",
            "Clownfish",
            "Shrimp",
            "Crab",
            "Starfish",
            "Sea Urchin",
            "Jellyfish",
            "Coral Polyp",
            "Plankton",
            "Piranha",
            "Flying Fish",
            "Angel Fish",
            "Lobster",
            "Octopus",
            "Sea Bass",
            "Cuttlefish",
            "Ray",
            "Eel",
            "Salmon",
            "Dolphin",
            "Tuna",
            "Barracuda",
            "Sea Turtle",
            "Seal",
            "Manta Ray",
            "Swordfish",
            "Sturgeon",
            "Grouper",
            "Nurse Shark",
            "Great White Shark",
            "Tiger Shark",
            "Hammerhead Shark",
            "Sea Lion",
            "Beluga Whale",
            "Narwhal",
            "Manatee",
            "Dugong",
            "Giant Grouper",
            "Marlin",
            "Orca",
            "Great White Shark",
            "Saltwater Crocodile",
            "Giant Pacific Octopus",
            "Greenland Shark",
            "Basking Shark",
            "Megalodon",
            "Giant Manta Ray",
            "Oarfish",
            "Giant Squid",
            "Sperm Whale",
            "Humpback Whale",
            "Right Whale",
            "Colossal Squid",
            "Whale Shark",
            "Leedsichthys",
            "Megalodon",
            "Basilosaurus",
            "Mosasaurus",
            "Kronosaurus",
            "Blue Whale",
            "Fin Whale",
            "Sei Whale",
            "Brygmophyseter",
            "Livyatan",
            "Megalodon (Largest specimens)",
            "Liopleurodon",
            "Shastasaurus",
            "Thalattoarchon",
            "Shonisaurus"
          ]
        ],
        "creature_type": [
          [
            "ALL (133)",
            "Dragon",
            "Phoenix",
            "Unicorn",
            "Griffin",
            "Hydra",
            "Chimera",
            "Basilisk",
            "Kraken",
            "Werewolf",
            "Vampire",
            "Goblin",
            "Troll",
            "Ogre",
            "Fairy",
            "Pixie",
            "Mermaid",
            "Centaur",
            "Minotaur",
            "Harpy",
            "Sphinx",
            "Cerberus",
            "Pegasus",
            "Manticore",
            "Gorgon",
            "Selkie",
            "Yeti",
            "Sasquatch",
            "Wendigo",
            "Djinn",
            "Ifrit",
            "Banshee",
            "Kelpie",
            "Nymph",
            "Dryad",
            "Leprechaun",
            "Ghoul",
            "Zombie",
            "Skeleton Warrior",
            "Specter",
            "Wraith",
            "Shade",
            "Dullahan",
            "Cthulhu",
            "Deep One",
            "Shoggoth",
            "Behemoth",
            "Leviathan",
            "Rakshasa",
            "Asura",
            "Nagini",
            "Chupacabra",
            "Mothman",
            "Jiangshi",
            "Gremlin",
            "Imp",
            "Succubus",
            "Incubus",
            "Fomorian",
            "Fenrir",
            "Jörmungandr",
            "Hippogriff",
            "Wyvern",
            "Cockatrice",
            "Salamander",
            "Lamia",
            "Seraphim",
            "Cherubim",
            "Golem",
            "Elemental",
            "Shadow Demon",
            "Hellhound",
            "Bone Dragon",
            "Frost Giant",
            "Fire Giant",
            "Storm Giant",
            "Zombie Dragon",
            "Sea Serpent",
            "Anubite",
            "Grim Reaper",
            "Poltergeist",
            "Will-o'-the-Wisp",
            "Boggart",
            "Barghest",
            "Naga",
            "Kami",
            "Tengu",
            "Kappa",
            "Oni",
            "Yokai",
            "Bakemono",
            "Slime",
            "Mimic",
            "Beholder",
            "Mind Flayer",
            "Aboleth",
            "Displacer Beast",
            "Umber Hulk",
            "Bulette",
            "Rust Monster",
            "Gelatinous Cube",
            "Treant",
            "Ent",
            "Balrog",
            "Nazgûl",
            "Uruk-hai",
            "Shelob",
            "Warg",
            "Fell Beast",
            "Ettin",
            "Quetzalcoatl",
            "Garuda",
            "Thunderbird",
            "Amphiptere",
            "Jabberwock",
            "Nemean Lion",
            "Satyr",
            "Faun",
            "Echidna",
            "Typhon",
            "Cyclops",
            "Siren",
            "Scylla",
            "Charybdis",
            "Hecatoncheires",
            "Lilith",
            "Astral Projection",
            "Djinn of the Lamp",
            "Genasi",
            "Planar Entity",
            "Ethereal Spirit",
            "Archon",
            "Demon Lord",
            "Archdemon"
          ]
        ],
        "creature_size": [
          [
            "ALL (7)",
            "Tiny",
            "Small",
            "Medium",
            "Large",
            "Huge",
            "Colossal",
            "Gigantic"
          ]
        ],
        "creature_temperament": [
          [
            "ALL (11)",
            "Aggressive",
            "Peaceful",
            "Territorial",
            "Friendly",
            "Hostile",
            "Neutral",
            "Protective",
            "Cunning",
            "Savage",
            "Docile",
            "Fearsome"
          ]
        ],
        "creature_ability": [
          [
            "ALL (13)",
            "Fire-breathing",
            "Ice-spawning",
            "Lightning-wielding",
            "Poison-secreting",
            "Shape-shifting",
            "Mind-controlling",
            "Telepathic",
            "Regenerating",
            "Flying",
            "Invisible",
            "Stone-turning gaze",
            "Water-breathing",
            "Earth-shaking"
          ]
        ],
        "creature_features": [
          [
            "ALL (13)",
            "Scales",
            "Fur",
            "Feathers",
            "Chitin",
            "Spikes",
            "Horns",
            "Wings",
            "Multiple heads",
            "Tentacles",
            "Claws",
            "Fangs",
            "Tail",
            "Ethereal body"
          ]
        ],
        "magical_properties": [
          [
            "ALL (9)",
            "Elemental power",
            "Ancient magic",
            "Cursed",
            "Blessed",
            "Soul-stealing",
            "Reality-bending",
            "Time-manipulating",
            "Dream-walking",
            "Nature-controlling"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "SELECTION",
        "location_on_image",
        "ethnicity",
        "nationality",
        "age_male",
        "age_female",
        "body_shape",
        "skin_tone",
        "eye_color",
        "hair_style",
        "hair_color",
        "facial_hair",
        "breasts",
        "ass",
        "land_animal",
        "water_animal",
        "creature_type",
        "creature_size",
        "creature_temperament",
        "creature_ability",
        "creature_features",
        "magical_properties"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Bjornulf_ListLooperCharacter",
    "display_name": "♻👨‍🦰👩‍🦰👾 List Looper (Text Generator Characters)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ListLooperOutfitMale": {
    "input": {
      "required": {
        "SELECTION": [
          [
            "top",
            "bottom",
            "footwear",
            "head_item",
            "eye_item",
            "mouth_item",
            "accessories",
            "armors",
            "uniforms",
            "material",
            "pattern",
            "style_details",
            "style",
            "cosplay",
            "colors"
          ],
          {
            "forceInput": false
          }
        ],
        "top": [
          [
            "ALL (31)",
            "t-shirt",
            "button-up shirt",
            "sweater",
            "hoodie",
            "tank top",
            "dress shirt",
            "polo shirt",
            "blazer",
            "suit jacket",
            "military jacket",
            "bomber jacket",
            "windbreaker",
            "leather jacket",
            "v-neck shirt",
            "long sleeve shirt",
            "henley",
            "cardigan",
            "flannel shirt",
            "sweatshirt",
            "puffer jacket",
            "parka",
            "fleece jacket",
            "chambray shirt",
            "duster coat",
            "peacoat",
            "raincoat",
            "golf shirt",
            "thermal shirt",
            "polo neck",
            "crew neck shirt",
            "sherpa jacket"
          ]
        ],
        "bottom": [
          [
            "ALL (22)",
            "jeans",
            "slacks",
            "trousers",
            "cargo pants",
            "dress pants",
            "shorts",
            "bermudas",
            "joggers",
            "track pants",
            "denim shorts",
            "chinos",
            "bootcut jeans",
            "skinny jeans",
            "wide leg pants",
            "sweatpants",
            "overalls",
            "corduroys",
            "leather pants",
            "high-waisted pants",
            "capris",
            "harem pants",
            "biker shorts"
          ]
        ],
        "footwear": [
          [
            "ALL (20)",
            "sneakers",
            "oxford shoes",
            "loafers",
            "dress shoes",
            "chelsea boots",
            "combat boots",
            "derby shoes",
            "slip-ons",
            "work boots",
            "flip-flops",
            "boat shoes",
            "moccasins",
            "brogues",
            "athletic shoes",
            "high-top sneakers",
            "running shoes",
            "sandals",
            "hiking boots",
            "desert boots",
            "chukka boots"
          ]
        ],
        "head_item": [
          [
            "ALL (30)",
            "fedora",
            "beanie",
            "baseball cap",
            "bucket hat",
            "cowboy hat",
            "wide-brim hat",
            "trilby",
            "visor hat",
            "boater hat",
            "newsboy cap",
            "flat cap",
            "snapback",
            "wool hat",
            "straw hat",
            "trapper hat",
            "panama hat",
            "military cap",
            "pork pie hat",
            "safari hat",
            "top hat",
            "bowler hat",
            "aviator cap",
            "hunting cap",
            "hard hat",
            "beret",
            "biker helmet",
            "sports helmet",
            "skull cap",
            "headband",
            "durag"
          ]
        ],
        "eye_item": [
          [
            "ALL (10)",
            "sunglass",
            "aviator",
            "wayfarer",
            "retro sunglass",
            "polarized sunglass",
            "goggle",
            "tactical goggle",
            "steampunk goggle",
            "visor cap",
            "sun visor"
          ]
        ],
        "mouth_item": [
          [
            "ALL (10)",
            "bandana",
            "scarf",
            "neck gaiter",
            "face shield",
            "welding mask",
            "leather face cover",
            "decorative mask",
            "minimalist eyemask",
            "balaclava",
            "safari scarf"
          ]
        ],
        "accessories": [
          [
            "ALL (8)",
            "watch",
            "tie",
            "bow tie",
            "hat",
            "cap",
            "scarf",
            "belt",
            "backpack"
          ]
        ],
        "armors": [
          [
            "ALL (117)",
            "Bone Armor",
            "Wooden Plate Armor",
            "Reed Armor",
            "Stone-Studded Armor",
            "Animal Hide Armor",
            "Fiber-Woven Armor",
            "Primitive Scale Armor",
            "Bronze Armor",
            "Linothorax Armor",
            "Scale Armor",
            "Lamellar Armor",
            "Greek Hoplite Armor",
            "Assyrian Iron Armor",
            "Roman Lorica Segmentata",
            "Persian Sparabara Armor",
            "Celtic Chainmail Armor",
            "Etruscan Bronze Plate Armor",
            "Egyptian Leather Scale Armor",
            "Hittite Bronze Scale Armor",
            "Chainmail Armor",
            "Gambeson Armor",
            "Plate Armor",
            "Brigandine Armor",
            "Knight's Full Plate Armor",
            "Padded Armor",
            "Boiled Leather Armor",
            "Splint Armor",
            "Scale Hauberk Armor",
            "Mail-and-Plate Armor",
            "Kozane Samurai Armor",
            "Coat of Plates",
            "Crusader Surcoat Armor",
            "Byzantine Lamellar Armor",
            "Norman Hauberk Armor",
            "Viking Chainmail Armor",
            "Maximilian Armor",
            "Cuirassier Armor",
            "Half-Plate Armor",
            "Tournament Plate Armor",
            "Polish Hussar Winged Armor",
            "Blackened Plate Armor",
            "Landsknecht Armor",
            "O-Yoroi Samurai Armor",
            "Do-Maru Armor",
            "Han Chinese Lamellar Armor",
            "Mongol Lamellar Armor",
            "Tibetan Lamellar Armor",
            "Qing Dynasty Brigandine Armor",
            "Korean Brigandine Armor",
            "Japanese Tatami Armor",
            "Ryukyuan Gusuku Armor",
            "Vietnamese Lacquered Lamellar Armor",
            "Shikoro Armor",
            "Aztec Cotton Armor",
            "Inca Quilted Armor",
            "Native American Rawhide Armor",
            "Maori Woven Flax Armor",
            "Zulu Cowhide Shield Armor",
            "Iroquois Wooden Slat Armor",
            "Tupi Feathered Armor",
            "Pacific Islander Coconut Fiber Armor",
            "Ballistic Armor",
            "Kevlar Armor",
            "Exoskeleton Armor",
            "Powered Combat Armor",
            "Steampunk Brass Armor",
            "Dieselpunk Mechanized Armor",
            "Ceramic Plate Armor",
            "Carbon Fiber Combat Armor",
            "Graphene-Layered Armor",
            "Liquid Armor Suit",
            "Bulletproof Combat Suit",
            "Advanced Riot Control Armor",
            "Power Armor",
            "Energy Shield Armor",
            "Mech Armor",
            "Nanobot Weave Armor",
            "Plasma Reflective Armor",
            "Force Field Armor",
            "Stealth Camouflage Armor",
            "Cryo-Resistant Armor",
            "Magnetic Repulsion Armor",
            "Bio-Augmented Armor",
            "Gravity-Dampening Armor",
            "Photon Deflection Armor",
            "Plasma Shielded Suit",
            "Radiation-Absorbing Armor",
            "Zero-Gravity Combat Armor",
            "Neutron-Repellent Armor",
            "AI-Assisted Combat Suit",
            "Self-Healing Nano Armor",
            "Quantum Phase Armor",
            "Dragonbone Plate Armor",
            "Elven Chainmail Armor",
            "Dwarven Forge Plate Armor",
            "Shadow Silk Armor",
            "Runed Mithril Plate Armor",
            "Obsidian Plate Armor",
            "Crystal Armor",
            "Chitin Armor",
            "Demonforged Plate Armor",
            "Phoenix Feather Armor",
            "Hydra Scale Armor",
            "Lichlord's Bone Armor",
            "Stoneskin Plate Armor",
            "Celestial Radiance Armor",
            "Voidwalker Armor",
            "Bloodsteel Armor",
            "Frostforged Plate Armor",
            "Stormshard Armor",
            "Ethereal Woven Armor",
            "Spectral Plate Armor",
            "Wyrmscale Armor",
            "Aegis of the Eternal Flame",
            "Thornwood Plate Armor",
            "Silverlight Plate Armor",
            "Magus Enchanted Armor"
          ]
        ],
        "uniforms": [
          [
            "ALL (123)",
            "Hunter-Gatherer Outfit",
            "Shaman Ritual Uniform",
            "Tribal War Paint Uniform",
            "Ceremonial Animal Skin Robe",
            "Roman Legionary Uniform",
            "Spartan Hoplite Uniform",
            "Egyptian Priest Uniform",
            "Persian Immortal Uniform",
            "Assyrian Archer Uniform",
            "Greek Charioteer Uniform",
            "Macedonian Phalanx Uniform",
            "Celtic Warrior Uniform",
            "Babylonian Scholar Robe",
            "Knight's Heraldic Tabard",
            "Monastic Robe Uniform",
            "Feudal Lord's Court Uniform",
            "Squire's Training Garb",
            "Medieval Peasant Work Uniform",
            "Crusader Knight Uniform",
            "Medieval Merchant's Outfit",
            "Plague Doctor's Uniform",
            "Jester's Costume Uniform",
            "Court Minstrel Attire",
            "Tournament Jousting Tabard",
            "Renaissance Merchant Uniform",
            "Italian City-State Militia Uniform",
            "Landsknecht Soldier Uniform",
            "French Musketeer Uniform",
            "English Longbowman Uniform",
            "Renaissance Painter's Robe",
            "Spanish Conquistador Uniform",
            "Royal Courtier Uniform",
            "Renaissance Scholar Gown",
            "Genoese Sailor Uniform",
            "Napoleonic Infantry Uniform",
            "British Redcoat Uniform",
            "French Revolutionary Guard Uniform",
            "American Continental Army Uniform",
            "Pirate Captain's Uniform",
            "Privateer's Garb",
            "East India Company Officer Uniform",
            "Spanish Armada Naval Uniform",
            "Russian Imperial Guard Uniform",
            "Prussian Hussar Uniform",
            "Ming Dynasty Imperial Guard Uniform",
            "Ottoman Janissary Uniform",
            "Victorian Policeman Uniform",
            "Industrial Revolution Factory Worker Uniform",
            "Victorian Nurse's Uniform",
            "British Officer Uniform",
            "Railroad Conductor Uniform",
            "Steampunk Engineer Uniform",
            "Victorian Schoolteacher Gown",
            "Steamship Captain's Uniform",
            "Circus Ringmaster Costume",
            "Victorian Fire Brigade Uniform",
            "World War I Infantry Uniform",
            "World War II Aviator Uniform",
            "Modern Army Combat Uniform (ACU)",
            "Marine Corps Dress Blues",
            "Navy SEAL Tactical Uniform",
            "Air Force Flight Suit",
            "Ghillie Suit (Sniper Uniform)",
            "UN Peacekeeper Uniform",
            "Special Forces Urban Combat Uniform",
            "Paratrooper Uniform",
            "Artillery Officer Dress Uniform",
            "Submarine Crew Uniform",
            "Desert Camo Uniform",
            "Arctic Survival Uniform",
            "Police Officer Uniform",
            "Firefighter Turnout Gear",
            "Paramedic Emergency Uniform",
            "Chef's Whites",
            "Doctor's Scrubs",
            "Nurse's Scrubs",
            "Mechanic's Coveralls",
            "Pilot's Flight Suit",
            "Train Engineer's Uniform",
            "Hotel Bellhop Uniform",
            "Mail Carrier Uniform",
            "Corporate Security Guard Uniform",
            "Construction Worker Safety Gear",
            "Factory Worker Uniform",
            "Judge's Robes",
            "Waiter's Service Uniform",
            "Clergy Vestments",
            "Graduation Cap and Gown",
            "School Uniform",
            "Sports Team Jersey",
            "Fencing Gear",
            "Karate Gi",
            "Football Quarterback Uniform",
            "Track and Field Athlete Uniform",
            "Cyclist Uniform",
            "Baseball Player Uniform",
            "Basketball Player Uniform",
            "Starfleet Officer Uniform",
            "Space Marine Combat Suit",
            "Alien Diplomatic Uniform",
            "Colonial Space Miner Outfit",
            "Zero-Gravity Technician Uniform",
            "Cyberpunk Hacker Attire",
            "Deep Space Pilot Suit",
            "Galactic Federation Guard Uniform",
            "Synth Overseer Uniform",
            "Time Traveler's Robe Uniform",
            "Elven Ranger's Uniform",
            "Wizard's Academic Robes",
            "Dwarven Smith's Garb",
            "Knight-Enchanter Uniform",
            "Royal Guard Uniform",
            "Dragon Priest's Ceremonial Robe",
            "Necromancer's Robe",
            "Thieves' Guild Shadow Uniform",
            "Battle Mage Combat Robe",
            "Assassin's Stealth Outfit",
            "Paladin's Holy Garb",
            "Forest Guardian Uniform",
            "Alchemist's Laboratory Coat",
            "Bard's Entertainer Uniform",
            "Vampire Court Uniform",
            "Warlock's Infernal Robe"
          ]
        ],
        "material": [
          [
            "ALL (19)",
            "cotton",
            "wool",
            "silk",
            "linen",
            "cashmere",
            "polyester",
            "nylon",
            "spandex",
            "leather",
            "latex",
            "velvet",
            "satin",
            "lace",
            "mesh",
            "tulle",
            "denim",
            "tweed",
            "chiffon",
            "latex"
          ]
        ],
        "pattern": [
          [
            "ALL (28)",
            "solid",
            "striped",
            "plaid",
            "checkered",
            "polka dot",
            "floral",
            "animal print",
            "camouflage",
            "paisley",
            "tropical",
            "geometric",
            "abstract",
            "chevron",
            "diamond",
            "hexagonal",
            "tie-dye",
            "ombre",
            "gradient",
            "glitter",
            "holographic",
            "psychedelic",
            "optical illusion",
            "digital print",
            "herringbone",
            "houndstooth",
            "argyle",
            "tartan",
            "pinstripe"
          ]
        ],
        "style_details": [
          [
            "ALL (20)",
            "fitted",
            "loose",
            "oversized",
            "skin-tight",
            "baggy",
            "layered",
            "asymmetric",
            "structured",
            "flowing",
            "draped",
            "distressed",
            "ripped",
            "frayed",
            "patched",
            "embellished",
            "studded",
            "buckled",
            "zipped",
            "laced",
            "buttoned"
          ]
        ],
        "style": [
          [
            "ALL (23)",
            "casual",
            "formal",
            "business",
            "streetwear",
            "athletic",
            "fantasy",
            "sci-fi",
            "historical",
            "military",
            "punk",
            "gothic",
            "bohemian",
            "minimal",
            "elegant",
            "vintage",
            "grunge",
            "preppy",
            "romantic",
            "avant-garde",
            "cyberpunk",
            "steampunk",
            "lolita",
            "kawaii"
          ]
        ],
        "cosplay": [
          [
            "ALL (10)",
            "Naruto Uzumaki",
            "Geralt of Rivia",
            "Cloud Strife",
            "Goku",
            "Link",
            "Darth Vader",
            "Captain America",
            "Iron Man",
            "Luffy",
            "Spider-Man"
          ]
        ],
        "colors": [
          [
            "ALL (29)",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "SELECTION",
        "top",
        "bottom",
        "footwear",
        "head_item",
        "eye_item",
        "mouth_item",
        "accessories",
        "armors",
        "uniforms",
        "material",
        "pattern",
        "style_details",
        "style",
        "cosplay",
        "colors"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Bjornulf_ListLooperOutfitMale",
    "display_name": "♻👚 List Looper (Text Generator Outfits Male)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ListLooperOutfitFemale": {
    "input": {
      "required": {
        "SELECTION": [
          [
            "top",
            "bottom",
            "dress",
            "full_body",
            "footwear",
            "head_item",
            "eye_item",
            "mouth_item",
            "accessories",
            "armors",
            "uniforms",
            "material",
            "pattern",
            "style_details",
            "style",
            "cosplay",
            "colors"
          ],
          {
            "forceInput": false
          }
        ],
        "top": [
          [
            "ALL (46)",
            "t-shirt",
            "shirt",
            "sweater",
            "hoodie",
            "tank top",
            "dress shirt",
            "button-up shirt",
            "turtleneck",
            "polo shirt",
            "blazer",
            "suit jacket",
            "military jacket",
            "bomber jacket",
            "windbreaker",
            "leather jacket",
            "v-neck shirt",
            "long sleeve shirt",
            "henley",
            "cardigan",
            "flannel shirt",
            "sweatshirt",
            "crop top",
            "puffer jacket",
            "parka",
            "fleece jacket",
            "chambray shirt",
            "duster coat",
            "peacoat",
            "raincoat",
            "golf shirt",
            "thermal shirt",
            "polo neck",
            "crew neck shirt",
            "kimono",
            "sherpa jacket",
            "bra",
            "bralette",
            "sports bra",
            "bikini top",
            "corset",
            "bustier",
            "lingerie",
            "silk robe",
            "lace top",
            "camisole",
            "pajama set"
          ]
        ],
        "bottom": [
          [
            "ALL (72)",
            "jeans",
            "slacks",
            "trousers",
            "cargo pants",
            "dress pants",
            "shorts",
            "bermudas",
            "joggers",
            "track pants",
            "denim shorts",
            "leggings",
            "chinos",
            "bootcut jeans",
            "skinny jeans",
            "wide leg pants",
            "palazzo pants",
            "paperbag waist pants",
            "sweatpants",
            "overalls",
            "corduroys",
            "leather pants",
            "high-waisted pants",
            "capris",
            "harem pants",
            "biker shorts",
            "denim skirt",
            "pencil skirt",
            "midi skirt",
            "maxi skirt",
            "mini skirt",
            "A-line skirt",
            "pleated skirt",
            "skorts",
            "skater skirt",
            "panties",
            "boyshorts",
            "thong",
            "denim thong",
            "mesh shorts",
            "leather shorts",
            "lace shorts",
            "see-through leggings",
            "cut-off shorts",
            "ripped jeans",
            "chamois pants",
            "vinyl pants",
            "sequined pants",
            "jogger shorts",
            "spandex shorts",
            "tight leather pants",
            "short shorts",
            "cheeky shorts",
            "bandage skirt",
            "faux leather skirt",
            "leather mini skirt",
            "latex pants",
            "harness pants",
            "motorcycle pants",
            "cargo shorts",
            "tactical pants",
            "fishnet stockings",
            "lace stockings",
            "thigh-high stockings",
            "sheer stockings",
            "fishnet tights",
            "mesh stockings",
            "over-the-knee stockings",
            "suspender stockings",
            "wet-look leggings",
            "latex stockings",
            "lace garter belt",
            "silk stockings"
          ]
        ],
        "dress": [
          [
            "ALL (28)",
            "dress",
            "sundress",
            "wrap dress",
            "cocktail dress",
            "evening gown",
            "princess dress",
            "babydoll dress",
            "bodycon dress",
            "shift dress",
            "maxi dress",
            "midi dress",
            "mini dress",
            "A-line dress",
            "sheath dress",
            "high-low dress",
            "peplum dress",
            "skater dress",
            "halter dress",
            "strapless dress",
            "tunic dress",
            "ball gown",
            "lace dress",
            "chiffon dress",
            "t-shirt dress",
            "denim dress",
            "floral dress",
            "knit dress",
            "sweater dress"
          ]
        ],
        "full_body": [
          [
            "ALL (32)",
            "jumpsuit",
            "romper",
            "playsuit",
            "catsuit",
            "bodysuit",
            "unitard",
            "leotard",
            "overalls",
            "dungarees",
            "boilersuit",
            "flight suit",
            "ski suit",
            "wetsuit",
            "onesie",
            "palazzo jumpsuit",
            "culotte jumpsuit",
            "denim jumpsuit",
            "utility jumpsuit",
            "wide-leg jumpsuit",
            "sleeveless jumpsuit",
            "halter jumpsuit",
            "strapless jumpsuit",
            "lace jumpsuit",
            "satin jumpsuit",
            "velvet jumpsuit",
            "corset bodysuit",
            "mesh bodysuit",
            "long sleeve bodysuit",
            "turtleneck bodysuit",
            "backless bodysuit",
            "dance leotard",
            "gymnastics leotard"
          ]
        ],
        "footwear": [
          [
            "ALL (26)",
            "pumps",
            "stilettos",
            "kitten heels",
            "block heels",
            "thigh-high boots",
            "ballet shoes",
            "sandals",
            "sneakers",
            "oxford shoes",
            "loafers",
            "dress shoes",
            "chelsea boots",
            "combat boots",
            "derby shoes",
            "slip-ons",
            "work boots",
            "flip-flops",
            "boat shoes",
            "moccasins",
            "brogues",
            "athletic shoes",
            "high-top sneakers",
            "running shoes",
            "hiking boots",
            "desert boots",
            "chukka boots"
          ]
        ],
        "head_item": [
          [
            "ALL (35)",
            "sun hat",
            "fedora",
            "beanie",
            "beret",
            "baseball cap",
            "bucket hat",
            "cloche hat",
            "cowboy hat",
            "wide-brim hat",
            "trilby",
            "visor hat",
            "boater hat",
            "newsboy cap",
            "turban",
            "headscarf",
            "wool hat",
            "straw hat",
            "trapper hat",
            "pillbox hat",
            "panama hat",
            "hijab",
            "bonnet",
            "snapback",
            "hat with veil",
            "knit hat",
            "fascinator",
            "skull cap",
            "safari hat",
            "military cap",
            "pork pie hat",
            "flower crown",
            "tiara",
            "crystal headpiece",
            "pearl-embellished hat",
            "feathered fascinator"
          ]
        ],
        "eye_item": [
          [
            "ALL (11)",
            "sunglass",
            "cat-eye sunglass",
            "aviator",
            "oversized sunglass",
            "heart-shaped sunglass",
            "eyemask",
            "lace mask",
            "rhinestone-studded mask",
            "gold-rimmed sunglass",
            "retro goggle",
            "fashion visor"
          ]
        ],
        "mouth_item": [
          [
            "ALL (4)",
            "face veil",
            "mesh face cover",
            "choker with attached veil",
            "surgical face mask"
          ]
        ],
        "accessories": [
          [
            "ALL (10)",
            "necklace",
            "earrings",
            "bracelet",
            "rings",
            "tiara",
            "crown",
            "clutch",
            "handbag",
            "hair clips",
            "choker"
          ]
        ],
        "armors": [
          [
            "ALL (117)",
            "Bone Armor",
            "Wooden Plate Armor",
            "Reed Armor",
            "Stone-Studded Armor",
            "Animal Hide Armor",
            "Fiber-Woven Armor",
            "Primitive Scale Armor",
            "Bronze Armor",
            "Linothorax Armor",
            "Scale Armor",
            "Lamellar Armor",
            "Greek Hoplite Armor",
            "Assyrian Iron Armor",
            "Roman Lorica Segmentata",
            "Persian Sparabara Armor",
            "Celtic Chainmail Armor",
            "Etruscan Bronze Plate Armor",
            "Egyptian Leather Scale Armor",
            "Hittite Bronze Scale Armor",
            "Chainmail Armor",
            "Gambeson Armor",
            "Plate Armor",
            "Brigandine Armor",
            "Knight's Full Plate Armor",
            "Padded Armor",
            "Boiled Leather Armor",
            "Splint Armor",
            "Scale Hauberk Armor",
            "Mail-and-Plate Armor",
            "Kozane Samurai Armor",
            "Coat of Plates",
            "Crusader Surcoat Armor",
            "Byzantine Lamellar Armor",
            "Norman Hauberk Armor",
            "Viking Chainmail Armor",
            "Maximilian Armor",
            "Cuirassier Armor",
            "Half-Plate Armor",
            "Tournament Plate Armor",
            "Polish Hussar Winged Armor",
            "Blackened Plate Armor",
            "Landsknecht Armor",
            "O-Yoroi Samurai Armor",
            "Do-Maru Armor",
            "Han Chinese Lamellar Armor",
            "Mongol Lamellar Armor",
            "Tibetan Lamellar Armor",
            "Qing Dynasty Brigandine Armor",
            "Korean Brigandine Armor",
            "Japanese Tatami Armor",
            "Ryukyuan Gusuku Armor",
            "Vietnamese Lacquered Lamellar Armor",
            "Shikoro Armor",
            "Aztec Cotton Armor",
            "Inca Quilted Armor",
            "Native American Rawhide Armor",
            "Maori Woven Flax Armor",
            "Zulu Cowhide Shield Armor",
            "Iroquois Wooden Slat Armor",
            "Tupi Feathered Armor",
            "Pacific Islander Coconut Fiber Armor",
            "Ballistic Armor",
            "Kevlar Armor",
            "Exoskeleton Armor",
            "Powered Combat Armor",
            "Steampunk Brass Armor",
            "Dieselpunk Mechanized Armor",
            "Ceramic Plate Armor",
            "Carbon Fiber Combat Armor",
            "Graphene-Layered Armor",
            "Liquid Armor Suit",
            "Bulletproof Combat Suit",
            "Advanced Riot Control Armor",
            "Power Armor",
            "Energy Shield Armor",
            "Mech Armor",
            "Nanobot Weave Armor",
            "Plasma Reflective Armor",
            "Force Field Armor",
            "Stealth Camouflage Armor",
            "Cryo-Resistant Armor",
            "Magnetic Repulsion Armor",
            "Bio-Augmented Armor",
            "Gravity-Dampening Armor",
            "Photon Deflection Armor",
            "Plasma Shielded Suit",
            "Radiation-Absorbing Armor",
            "Zero-Gravity Combat Armor",
            "Neutron-Repellent Armor",
            "AI-Assisted Combat Suit",
            "Self-Healing Nano Armor",
            "Quantum Phase Armor",
            "Dragonbone Plate Armor",
            "Elven Chainmail Armor",
            "Dwarven Forge Plate Armor",
            "Shadow Silk Armor",
            "Runed Mithril Plate Armor",
            "Obsidian Plate Armor",
            "Crystal Armor",
            "Chitin Armor",
            "Demonforged Plate Armor",
            "Phoenix Feather Armor",
            "Hydra Scale Armor",
            "Lichlord's Bone Armor",
            "Stoneskin Plate Armor",
            "Celestial Radiance Armor",
            "Voidwalker Armor",
            "Bloodsteel Armor",
            "Frostforged Plate Armor",
            "Stormshard Armor",
            "Ethereal Woven Armor",
            "Spectral Plate Armor",
            "Wyrmscale Armor",
            "Aegis of the Eternal Flame",
            "Thornwood Plate Armor",
            "Silverlight Plate Armor",
            "Magus Enchanted Armor"
          ]
        ],
        "uniforms": [
          [
            "ALL (123)",
            "Hunter-Gatherer Outfit",
            "Shaman Ritual Uniform",
            "Tribal War Paint Uniform",
            "Ceremonial Animal Skin Robe",
            "Roman Legionary Uniform",
            "Spartan Hoplite Uniform",
            "Egyptian Priest Uniform",
            "Persian Immortal Uniform",
            "Assyrian Archer Uniform",
            "Greek Charioteer Uniform",
            "Macedonian Phalanx Uniform",
            "Celtic Warrior Uniform",
            "Babylonian Scholar Robe",
            "Knight's Heraldic Tabard",
            "Monastic Robe Uniform",
            "Feudal Lord's Court Uniform",
            "Squire's Training Garb",
            "Medieval Peasant Work Uniform",
            "Crusader Knight Uniform",
            "Medieval Merchant's Outfit",
            "Plague Doctor's Uniform",
            "Jester's Costume Uniform",
            "Court Minstrel Attire",
            "Tournament Jousting Tabard",
            "Renaissance Merchant Uniform",
            "Italian City-State Militia Uniform",
            "Landsknecht Soldier Uniform",
            "French Musketeer Uniform",
            "English Longbowman Uniform",
            "Renaissance Painter's Robe",
            "Spanish Conquistador Uniform",
            "Royal Courtier Uniform",
            "Renaissance Scholar Gown",
            "Genoese Sailor Uniform",
            "Napoleonic Infantry Uniform",
            "British Redcoat Uniform",
            "French Revolutionary Guard Uniform",
            "American Continental Army Uniform",
            "Pirate Captain's Uniform",
            "Privateer's Garb",
            "East India Company Officer Uniform",
            "Spanish Armada Naval Uniform",
            "Russian Imperial Guard Uniform",
            "Prussian Hussar Uniform",
            "Ming Dynasty Imperial Guard Uniform",
            "Ottoman Janissary Uniform",
            "Victorian Policeman Uniform",
            "Industrial Revolution Factory Worker Uniform",
            "Victorian Nurse's Uniform",
            "British Officer Uniform",
            "Railroad Conductor Uniform",
            "Steampunk Engineer Uniform",
            "Victorian Schoolteacher Gown",
            "Steamship Captain's Uniform",
            "Circus Ringmaster Costume",
            "Victorian Fire Brigade Uniform",
            "World War I Infantry Uniform",
            "World War II Aviator Uniform",
            "Modern Army Combat Uniform (ACU)",
            "Marine Corps Dress Blues",
            "Navy SEAL Tactical Uniform",
            "Air Force Flight Suit",
            "Ghillie Suit (Sniper Uniform)",
            "UN Peacekeeper Uniform",
            "Special Forces Urban Combat Uniform",
            "Paratrooper Uniform",
            "Artillery Officer Dress Uniform",
            "Submarine Crew Uniform",
            "Desert Camo Uniform",
            "Arctic Survival Uniform",
            "Police Officer Uniform",
            "Firefighter Turnout Gear",
            "Paramedic Emergency Uniform",
            "Chef's Whites",
            "Doctor's Scrubs",
            "Nurse's Scrubs",
            "Mechanic's Coveralls",
            "Pilot's Flight Suit",
            "Train Engineer's Uniform",
            "Hotel Bellhop Uniform",
            "Mail Carrier Uniform",
            "Corporate Security Guard Uniform",
            "Construction Worker Safety Gear",
            "Factory Worker Uniform",
            "Judge's Robes",
            "Waiter's Service Uniform",
            "Clergy Vestments",
            "Graduation Cap and Gown",
            "School Uniform",
            "Sports Team Jersey",
            "Fencing Gear",
            "Karate Gi",
            "Football Quarterback Uniform",
            "Track and Field Athlete Uniform",
            "Cyclist Uniform",
            "Baseball Player Uniform",
            "Basketball Player Uniform",
            "Starfleet Officer Uniform",
            "Space Marine Combat Suit",
            "Alien Diplomatic Uniform",
            "Colonial Space Miner Outfit",
            "Zero-Gravity Technician Uniform",
            "Cyberpunk Hacker Attire",
            "Deep Space Pilot Suit",
            "Galactic Federation Guard Uniform",
            "Synth Overseer Uniform",
            "Time Traveler's Robe Uniform",
            "Elven Ranger's Uniform",
            "Wizard's Academic Robes",
            "Dwarven Smith's Garb",
            "Knight-Enchanter Uniform",
            "Royal Guard Uniform",
            "Dragon Priest's Ceremonial Robe",
            "Necromancer's Robe",
            "Thieves' Guild Shadow Uniform",
            "Battle Mage Combat Robe",
            "Assassin's Stealth Outfit",
            "Paladin's Holy Garb",
            "Forest Guardian Uniform",
            "Alchemist's Laboratory Coat",
            "Bard's Entertainer Uniform",
            "Vampire Court Uniform",
            "Warlock's Infernal Robe"
          ]
        ],
        "material": [
          [
            "ALL (19)",
            "cotton",
            "wool",
            "silk",
            "linen",
            "cashmere",
            "polyester",
            "nylon",
            "spandex",
            "leather",
            "latex",
            "velvet",
            "satin",
            "lace",
            "mesh",
            "tulle",
            "denim",
            "tweed",
            "chiffon",
            "latex"
          ]
        ],
        "pattern": [
          [
            "ALL (28)",
            "solid",
            "striped",
            "plaid",
            "checkered",
            "polka dot",
            "floral",
            "animal print",
            "camouflage",
            "paisley",
            "tropical",
            "geometric",
            "abstract",
            "chevron",
            "diamond",
            "hexagonal",
            "tie-dye",
            "ombre",
            "gradient",
            "glitter",
            "holographic",
            "psychedelic",
            "optical illusion",
            "digital print",
            "herringbone",
            "houndstooth",
            "argyle",
            "tartan",
            "pinstripe"
          ]
        ],
        "style_details": [
          [
            "ALL (20)",
            "fitted",
            "loose",
            "oversized",
            "skin-tight",
            "baggy",
            "layered",
            "asymmetric",
            "structured",
            "flowing",
            "draped",
            "distressed",
            "ripped",
            "frayed",
            "patched",
            "embellished",
            "studded",
            "buckled",
            "zipped",
            "laced",
            "buttoned"
          ]
        ],
        "style": [
          [
            "ALL (23)",
            "casual",
            "formal",
            "business",
            "streetwear",
            "athletic",
            "fantasy",
            "sci-fi",
            "historical",
            "military",
            "punk",
            "gothic",
            "bohemian",
            "minimal",
            "elegant",
            "vintage",
            "grunge",
            "preppy",
            "romantic",
            "avant-garde",
            "cyberpunk",
            "steampunk",
            "lolita",
            "kawaii"
          ]
        ],
        "cosplay": [
          [
            "ALL (29)",
            "Sailor Moon",
            "Princess Leia",
            "Elsa",
            "Tifa Lockhart",
            "Lara Croft",
            "Asuka Langley",
            "Harley Quinn",
            "Wonder Woman",
            "Zero Two",
            "Mikasa Ackerman",
            "Yennefer of Vengerberg",
            "Ciri",
            "Ryuko Matoi",
            "Hatsune Miku",
            "Samus Aran",
            "Bulma",
            "Nezuko Kamado",
            "Hinata Hyuga",
            "Korra",
            "Bayonetta",
            "Aerith Gainsborough",
            "Android 18",
            "Raven",
            "Sakura Haruno",
            "D.Va",
            "Sheik",
            "Zelda",
            "Ada Wong",
            "Jean Grey"
          ]
        ],
        "colors": [
          [
            "ALL (29)",
            "black",
            "white",
            "grey",
            "red",
            "crimson",
            "scarlet",
            "burgundy",
            "pink",
            "rose",
            "purple",
            "violet",
            "lavender",
            "blue",
            "navy",
            "sky",
            "cyan",
            "teal",
            "green",
            "emerald",
            "lime",
            "yellow",
            "gold",
            "orange",
            "brown",
            "tan",
            "beige",
            "silver",
            "metallic",
            "transparent"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "SELECTION",
        "top",
        "bottom",
        "dress",
        "full_body",
        "footwear",
        "head_item",
        "eye_item",
        "mouth_item",
        "accessories",
        "armors",
        "uniforms",
        "material",
        "pattern",
        "style_details",
        "style",
        "cosplay",
        "colors"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Bjornulf_ListLooperOutfitFemale",
    "display_name": "♻👗 List Looper (Text Generator Outfits Female)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ShowInt": {
    "input": {
      "required": {
        "INT": [
          "INT",
          {
            "default": 0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "INT"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_ShowInt",
    "display_name": "👁 Show (Int)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_TextReplace": {
    "input": {
      "required": {
        "input_text": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "search_text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "replace_text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "replace_count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "display": "number",
            "tooltip": "Number of replacements (0 = replace all)"
          }
        ],
        "use_regex": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "case_sensitive": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Whether the search should be case-sensitive"
          }
        ],
        "trim_whitespace": [
          [
            "none",
            "left",
            "right",
            "both"
          ],
          {
            "default": "none",
            "tooltip": "Remove whitespace around the found text"
          }
        ],
        "multiline_regex": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Make dot (.) match newlines in regex"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_text",
        "search_text",
        "replace_text",
        "replace_count",
        "use_regex",
        "case_sensitive",
        "trim_whitespace",
        "multiline_regex"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_TextReplace",
    "display_name": "📝➜📝 Replace text",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ShowFloat": {
    "input": {
      "required": {
        "FLOAT": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "FLOAT"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_ShowFloat",
    "display_name": "👁 Show (Float)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ShowJson": {
    "input": {
      "required": {
        "STRING": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "STRING"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_ShowJson",
    "display_name": "👁 Show (JSON)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ShowStringText": {
    "input": {
      "required": {
        "STRING": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "STRING"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_ShowStringText",
    "display_name": "👁 Show (String/Text)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_FFmpegConfig": {
    "input": {
      "required": {
        "ffmpeg_path": [
          "STRING",
          {
            "default": "ffmpeg"
          }
        ],
        "container_format": [
          [
            "None",
            "mp4",
            "mkv",
            "webm",
            "mov",
            "avi"
          ],
          {
            "default": "mkv"
          }
        ],
        "video_codec": [
          [
            "Auto",
            "copy",
            "libx264 (H.264)",
            "h264_nvenc (H.264 / NVIDIA GPU)",
            "libx265 (H.265)",
            "hevc_nvenc (H.265 / NVIDIA GPU)",
            "libvpx-vp9 (WebM)",
            "libaom-av1",
            "av1_nvenc (av1 / NVIDIA GPU)"
          ],
          {
            "default": "libx265 (H.265)"
          }
        ],
        "preset": [
          [
            "None",
            "ultrafast",
            "superfast",
            "veryfast",
            "faster",
            "fast",
            "medium",
            "slow",
            "slower",
            "veryslow"
          ],
          {
            "default": "veryslow"
          }
        ],
        "crf": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 63
          }
        ],
        "pixel_format": [
          [
            "None",
            "yuv420p",
            "yuv444p",
            "yuv420p10le",
            "yuv444p10le",
            "rgb24",
            "rgba",
            "yuva420p"
          ],
          {
            "default": "yuv444p10le"
          }
        ],
        "force_fps": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 240.0,
            "step": 0.01,
            "description": "Force output FPS (0 = use source FPS)"
          }
        ],
        "enabled_change_resolution": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "enable_change_audio": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "audio_codec": [
          [
            "None",
            "copy",
            "aac",
            "libmp3lame",
            "libvorbis",
            "libopus",
            "none"
          ],
          {
            "default": "aac"
          }
        ],
        "enabled_audio_bitrate": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "audio_bitrate": [
          "STRING",
          {
            "default": "192k"
          }
        ],
        "enabled_static_video_bitrate": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "video_bitrate": [
          "STRING",
          {
            "default": "3045k"
          }
        ],
        "force_transparency_webm": [
          "BOOLEAN",
          {
            "default": false,
            "description": "Force transparency in WebM output"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ffmpeg_path",
        "container_format",
        "video_codec",
        "preset",
        "crf",
        "pixel_format",
        "force_fps",
        "enabled_change_resolution",
        "width",
        "height",
        "enable_change_audio",
        "audio_codec",
        "enabled_audio_bitrate",
        "audio_bitrate",
        "enabled_static_video_bitrate",
        "video_bitrate",
        "force_transparency_webm"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FFMPEG_CONFIG_JSON"
    ],
    "name": "Bjornulf_FFmpegConfig",
    "display_name": "⚙📹 FFmpeg Configuration 📹⚙",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ConvertVideo": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "output_filename": [
          "STRING",
          {
            "default": "converted.mp4"
          }
        ],
        "use_python_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "FFMPEG_CONFIG_JSON": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path",
        "output_filename",
        "use_python_ffmpeg"
      ],
      "optional": [
        "FFMPEG_CONFIG_JSON"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "video_path",
      "ffmpeg_command"
    ],
    "name": "Bjornulf_ConvertVideo",
    "display_name": "📹➜📹 Convert Video (FFmpeg)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_AddLineNumbers": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_AddLineNumbers",
    "display_name": "🔢 Add line numbers",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextToAnything": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "anything"
    ],
    "name": "Bjornulf_TextToAnything",
    "display_name": "📝➜✨ Text to Anything",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_AnythingToText": {
    "input": {
      "required": {
        "anything": [
          "*",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "anything"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "Bjornulf_AnythingToText",
    "display_name": "✨➜📝 Anything to Text",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_AnythingToInt": {
    "input": {
      "required": {
        "anything": [
          "*",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "anything"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "integer"
    ],
    "name": "Bjornulf_AnythingToInt",
    "display_name": "✨➜🔢 Anything to Int",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_AnythingToFloat": {
    "input": {
      "required": {
        "anything": [
          "*",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "anything"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "float"
    ],
    "name": "Bjornulf_AnythingToFloat",
    "display_name": "✨➜🔢 Anything to Float",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_SpeechToText": {
    "input": {
      "required": {
        "model_size": [
          [
            "tiny",
            "base",
            "small",
            "medium",
            "large-v2"
          ],
          {
            "default": "base"
          }
        ]
      },
      "optional": {
        "AUDIO": [
          "AUDIO"
        ],
        "audio_path": [
          "STRING",
          {
            "default": null,
            "forceInput": true
          }
        ],
        "video_path": [
          "STRING",
          {
            "default": null,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_size"
      ],
      "optional": [
        "AUDIO",
        "audio_path",
        "video_path"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "transcript",
      "detected_language",
      "language_name"
    ],
    "name": "Bjornulf_SpeechToText",
    "display_name": "🔊➜📝 STT - Speech to Text",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_OllamaConfig": {
    "input": {
      "required": {
        "ollama_url": [
          "STRING",
          {
            "default": "http://0.0.0.0:11434"
          }
        ],
        "model_name": [
          "STRING",
          {
            "default": "undefined"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ollama_url",
        "model_name"
      ]
    },
    "output": [
      "OLLAMA_CONFIG"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "OLLAMA_CONFIG"
    ],
    "name": "Bjornulf_OllamaConfig",
    "display_name": "🦙 Ollama Configuration ⚙",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "ollama",
    "output_node": false
  },
  "Bjornulf_OllamaSystemPersonaSelector": {
    "input": {
      "required": {
        "selected_prompt": [
          [
            "None",
            "Default Assistant",
            "Sassy Teenager",
            "Friendly Neighbor",
            "Gothic Poet",
            "Mad Scientist",
            "Enthusiastic Nerd",
            "Shy Introvert",
            "Elderly Wisdom",
            "Flirty Charmer",
            "Stoic Philosopher",
            "Cheerleader",
            "Sarcastic Cynic",
            "Zen Master",
            "Overly Polite Gentleman/Lady",
            "Authoritarian",
            "Submissive",
            "Sassy Grandma",
            "Cowboy",
            "Mysterious Spy",
            "Drama Queen",
            "Hyperactive Child"
          ],
          {
            "default": "Default Assistant"
          }
        ]
      },
      "optional": {
        "custom_prompt_prefix": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "placeholder": "Add a custom prompt prefix here..."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "selected_prompt"
      ],
      "optional": [
        "custom_prompt_prefix"
      ]
    },
    "output": [
      "OLLAMA_PERSONA",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OLLAMA_PERSONA",
      "prompt_text"
    ],
    "name": "Bjornulf_OllamaSystemPersonaSelector",
    "display_name": "🦙 Ollama Persona Selector 👇",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_OllamaSystemJobSelector": {
    "input": {
      "required": {
        "selected_prompt": [
          [
            "None",
            "Storyteller, main story given (ex: 'Jerry the cat is in a bar.')",
            "Imaginator, specific event given (ex: 'Jerry the cat is fighting a dog.')",
            "SDXL, context given (Ex: 'black cat')",
            "FLUX, context given (Ex: 'black cat')"
          ],
          {
            "default": "None"
          }
        ]
      },
      "optional": {
        "OLLAMA_PERSONA": [
          "OLLAMA_PERSONA",
          {
            "forceInput": true
          }
        ],
        "custom_prompt_prefix": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "placeholder": "Add a custom prompt prefix here..."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "selected_prompt"
      ],
      "optional": [
        "OLLAMA_PERSONA",
        "custom_prompt_prefix"
      ]
    },
    "output": [
      "OLLAMA_JOB",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OLLAMA_JOB",
      "prompt_text"
    ],
    "name": "Bjornulf_OllamaSystemJobSelector",
    "display_name": "🦙 Ollama Job Selector 👇",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_OllamaImageVision": {
    "input": {
      "required": {
        "IMAGE": [
          "IMAGE"
        ],
        "OLLAMA_VISION_PROMPT": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "vram_retention_minutes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99
          }
        ],
        "seed": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 2147483647
          }
        ],
        "answer_single_line": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "OLLAMA_CONFIG": [
          "OLLAMA_CONFIG",
          {
            "forceInput": true
          }
        ],
        "context": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "IMAGE",
        "OLLAMA_VISION_PROMPT",
        "vram_retention_minutes",
        "seed",
        "answer_single_line"
      ],
      "optional": [
        "OLLAMA_CONFIG",
        "context"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "response"
    ],
    "name": "Bjornulf_OllamaImageVision",
    "display_name": "🦙👁 Ollama Vision",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_OllamaTalk": {
    "input": {
      "required": {
        "user_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "max_tokens": [
          "INT",
          {
            "default": 600,
            "min": 1,
            "max": 4096
          }
        ],
        "vram_retention_minutes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99
          }
        ],
        "answer_single_line": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "waiting_for_prompt": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_context_file": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "OLLAMA_CONFIG": [
          "OLLAMA_CONFIG",
          {
            "forceInput": true
          }
        ],
        "context": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "OLLAMA_JOB": [
          "OLLAMA_JOB",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "user_prompt",
        "seed",
        "max_tokens",
        "vram_retention_minutes",
        "answer_single_line",
        "waiting_for_prompt",
        "use_context_file"
      ],
      "optional": [
        "OLLAMA_CONFIG",
        "context",
        "OLLAMA_JOB"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "ollama_response",
      "updated_context",
      "system_prompt"
    ],
    "name": "Bjornulf_OllamaTalk",
    "display_name": "🦙💬 Ollama Talk",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_MergeImagesHorizontally": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      },
      "optional": {
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ],
      "optional": [
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_MergeImagesHorizontally",
    "display_name": "🖼🖼 Merge Images/Videos 📹📹 (Horizontally)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_MergeImagesVertically": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      },
      "optional": {
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ],
      "optional": [
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_MergeImagesVertically",
    "display_name": "🖼🖼 Merge Images/Videos 📹📹 (Vertically)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CombineVideoAudio": {
    "input": {
      "required": {},
      "optional": {
        "IMAGES": [
          "IMAGE",
          {
            "forceInput": true
          }
        ],
        "AUDIO": [
          "AUDIO",
          {
            "forceInput": true
          }
        ],
        "audio_path": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "video_path": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 30.0,
            "min": 1.0,
            "max": 120.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "IMAGES",
        "AUDIO",
        "audio_path",
        "video_path",
        "fps"
      ]
    },
    "output": [
      "STRING",
      "FLOAT",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "video_path",
      "video_duration",
      "fps",
      "number_of_frames"
    ],
    "name": "Bjornulf_CombineVideoAudio",
    "display_name": "📹🔊 Combine Video + Audio",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ConcatVideos": {
    "input": {
      "required": {
        "number_of_videos": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 50,
            "step": 1
          }
        ],
        "output_filename": [
          "STRING",
          {
            "default": "concatenated.mp4"
          }
        ],
        "use_python_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "FFMPEG_CONFIG_JSON": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "video_path_1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_2": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_3": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_4": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_5": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_6": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_7": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_8": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_9": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_10": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_11": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_12": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_13": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_14": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_15": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_16": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_17": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_18": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_19": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_20": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_21": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_22": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_23": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_24": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_25": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_26": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_27": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_28": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_29": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_30": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_31": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_32": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_33": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_34": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_35": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_36": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_37": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_38": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_39": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_40": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_41": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_42": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_43": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_44": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_45": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_46": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_47": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_48": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_49": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "video_path_50": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_videos",
        "output_filename",
        "use_python_ffmpeg"
      ],
      "optional": [
        "FFMPEG_CONFIG_JSON"
      ],
      "hidden": [
        "video_path_1",
        "video_path_2",
        "video_path_3",
        "video_path_4",
        "video_path_5",
        "video_path_6",
        "video_path_7",
        "video_path_8",
        "video_path_9",
        "video_path_10",
        "video_path_11",
        "video_path_12",
        "video_path_13",
        "video_path_14",
        "video_path_15",
        "video_path_16",
        "video_path_17",
        "video_path_18",
        "video_path_19",
        "video_path_20",
        "video_path_21",
        "video_path_22",
        "video_path_23",
        "video_path_24",
        "video_path_25",
        "video_path_26",
        "video_path_27",
        "video_path_28",
        "video_path_29",
        "video_path_30",
        "video_path_31",
        "video_path_32",
        "video_path_33",
        "video_path_34",
        "video_path_35",
        "video_path_36",
        "video_path_37",
        "video_path_38",
        "video_path_39",
        "video_path_40",
        "video_path_41",
        "video_path_42",
        "video_path_43",
        "video_path_44",
        "video_path_45",
        "video_path_46",
        "video_path_47",
        "video_path_48",
        "video_path_49",
        "video_path_50"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "concat_path",
      "ffmpeg_command"
    ],
    "name": "Bjornulf_ConcatVideos",
    "display_name": "📹🔗 Concat Videos (FFmpeg)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ConcatVideosFromList": {
    "input": {
      "required": {
        "files": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "output_filename": [
          "STRING",
          {
            "default": "output.mp4"
          }
        ],
        "use_python_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "FFMPEG_CONFIG_JSON": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "files",
        "output_filename",
        "use_python_ffmpeg"
      ],
      "optional": [
        "FFMPEG_CONFIG_JSON"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "concat_path",
      "ffmpeg_command"
    ],
    "name": "Bjornulf_ConcatVideosFromList",
    "display_name": "📹🔗 Concat Videos from list (FFmpeg)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_LoopLinesSequential": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "jump": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "jump"
      ]
    },
    "output": [
      "STRING",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "current_line",
      "remaining_cycles",
      "current_line_number"
    ],
    "name": "Bjornulf_LoopLinesSequential",
    "display_name": "♻📑 Loop Sequential (input Lines)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopIntegerSequential": {
    "input": {
      "required": {
        "from_this": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 50000,
            "step": 1
          }
        ],
        "to_that": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50000,
            "step": 1
          }
        ],
        "jump": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "from_this",
        "to_that",
        "jump"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "int_value",
      "remaining_cycles"
    ],
    "name": "Bjornulf_LoopIntegerSequential",
    "display_name": "♻📑 Loop Sequential (Integer)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopLoraSelector": {
    "input": {
      "required": {
        "number_of_loras": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      },
      "optional": {
        "lora_1": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_2": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_3": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_4": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_5": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_6": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_7": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_8": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_9": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_10": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_11": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_12": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_13": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_14": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_15": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_16": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_17": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_18": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_19": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "lora_20": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "strength_model_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_loras",
        "model",
        "clip"
      ],
      "optional": [
        "lora_1",
        "strength_model_1",
        "strength_clip_1",
        "lora_2",
        "strength_model_2",
        "strength_clip_2",
        "lora_3",
        "strength_model_3",
        "strength_clip_3",
        "lora_4",
        "strength_model_4",
        "strength_clip_4",
        "lora_5",
        "strength_model_5",
        "strength_clip_5",
        "lora_6",
        "strength_model_6",
        "strength_clip_6",
        "lora_7",
        "strength_model_7",
        "strength_clip_7",
        "lora_8",
        "strength_model_8",
        "strength_clip_8",
        "lora_9",
        "strength_model_9",
        "strength_clip_9",
        "lora_10",
        "strength_model_10",
        "strength_clip_10",
        "lora_11",
        "strength_model_11",
        "strength_clip_11",
        "lora_12",
        "strength_model_12",
        "strength_clip_12",
        "lora_13",
        "strength_model_13",
        "strength_clip_13",
        "lora_14",
        "strength_model_14",
        "strength_clip_14",
        "lora_15",
        "strength_model_15",
        "strength_clip_15",
        "lora_16",
        "strength_model_16",
        "strength_clip_16",
        "lora_17",
        "strength_model_17",
        "strength_clip_17",
        "lora_18",
        "strength_model_18",
        "strength_clip_18",
        "lora_19",
        "strength_model_19",
        "strength_clip_19",
        "lora_20",
        "strength_model_20",
        "strength_clip_20"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "model",
      "clip",
      "lora_path",
      "lora_name",
      "lora_folder"
    ],
    "name": "Bjornulf_LoopLoraSelector",
    "display_name": "♻👑 Loop Lora Selector",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_RandomLoraSelector": {
    "input": {
      "required": {
        "number_of_loras": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_1": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_2": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_3": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_4": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_5": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_6": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_7": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_8": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_9": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "lora_10": [
          [
            "none"
          ],
          {
            "default": "none"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_loras",
        "model",
        "clip",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "lora_1",
        "lora_2",
        "lora_3",
        "lora_4",
        "lora_5",
        "lora_6",
        "lora_7",
        "lora_8",
        "lora_9",
        "lora_10",
        "seed"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "lora_path",
      "lora_name",
      "lora_folder"
    ],
    "name": "Bjornulf_RandomLoraSelector",
    "display_name": "🎲👑 Random Lora Selector",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopModelSelector": {
    "input": {
      "required": {
        "number_of_models": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ]
      },
      "optional": {
        "model_1": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_2": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_3": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_4": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_5": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_6": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_7": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_8": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_9": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_10": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_models"
      ],
      "optional": [
        "model_1",
        "model_2",
        "model_3",
        "model_4",
        "model_5",
        "model_6",
        "model_7",
        "model_8",
        "model_9",
        "model_10"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "model_path",
      "model_name",
      "model_folder"
    ],
    "name": "Bjornulf_LoopModelSelector",
    "display_name": "♻ Loop Load checkpoint (Model Selector)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_VideoPreview": {
    "input": {
      "required": {
        "fps_for_IMAGES": [
          "FLOAT",
          {
            "default": 24.0,
            "min": 1.0,
            "max": 60.0
          }
        ],
        "autoplay": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mute": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "loop": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "video_path": [
          "STRING",
          {
            "forceInput": true,
            "default": ""
          }
        ],
        "IMAGES": [
          "IMAGE",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "fps_for_IMAGES",
        "autoplay",
        "mute",
        "loop"
      ],
      "optional": [
        "video_path",
        "IMAGES"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_VideoPreview",
    "display_name": "📹👁 Video Preview",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ImagesListToVideo": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "fps": [
          "FLOAT",
          {
            "default": 25,
            "min": 1,
            "max": 120,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "audio_path": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "audio": [
          "AUDIO",
          {
            "default": null
          }
        ],
        "FFMPEG_CONFIG_JSON": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "fps"
      ],
      "optional": [
        "audio_path",
        "audio",
        "FFMPEG_CONFIG_JSON"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "video_path"
    ],
    "name": "Bjornulf_ImagesListToVideo",
    "display_name": "🖼➜📹 Images to Video path (tmp video) (FFmpeg)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_VideoToImagesList": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_interval": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "max_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path",
        "frame_interval",
        "max_frames"
      ]
    },
    "output": [
      "IMAGE",
      "FLOAT",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "initial_fps",
      "new_fps",
      "total_frames"
    ],
    "name": "Bjornulf_VideoToImagesList",
    "display_name": "📹➜🖼 Video Path to Images (Load video)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_AudioVideoSync": {
    "input": {
      "required": {
        "max_speedup": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 1.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "max_slowdown": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "IMAGES": [
          "IMAGE"
        ],
        "AUDIO": [
          "AUDIO"
        ],
        "audio_path": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "audio_duration": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 3600.0,
            "step": 0.001
          }
        ],
        "video_path": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "output_fps": [
          "FLOAT",
          {
            "default": 30.0,
            "min": 1.0,
            "max": 120.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "max_speedup",
        "max_slowdown"
      ],
      "optional": [
        "IMAGES",
        "AUDIO",
        "audio_path",
        "audio_duration",
        "video_path",
        "output_fps"
      ]
    },
    "output": [
      "IMAGE",
      "AUDIO",
      "STRING",
      "STRING",
      "FLOAT",
      "FLOAT",
      "FLOAT",
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "sync_IMAGES",
      "sync_AUDIO",
      "sync_audio_path",
      "sync_video_path",
      "input_video_duration",
      "sync_video_duration",
      "input_audio_duration",
      "sync_audio_duration",
      "sync_video_frame_count"
    ],
    "name": "Bjornulf_AudioVideoSync",
    "display_name": "🔊📹 Audio Video Sync",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ScramblerCharacter": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": "photography portrait of a happy middle-aged swedish woman nurse with a fit body, wearing a black headband, large blue parka and orange jeans."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "image_styles": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "ages": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sex": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "body_types": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "colors": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "emotions": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "nationalities": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "clothing_head": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "clothing_top": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "clothing_bottom": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "occupations": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sizes": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image_types": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "seed"
      ],
      "optional": [
        "image_styles",
        "ages",
        "sex",
        "body_types",
        "colors",
        "emotions",
        "nationalities",
        "clothing_head",
        "clothing_top",
        "clothing_bottom",
        "occupations",
        "sizes",
        "image_types"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_ScramblerCharacter",
    "display_name": "🔀🎲 Text scrambler (🧑 Character)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CombineImages": {
    "input": {
      "required": {
        "number_of_images": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "all_in_one": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image_1": [
          "IMAGE"
        ]
      },
      "hidden": {
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ],
        "image_6": [
          "IMAGE"
        ],
        "image_7": [
          "IMAGE"
        ],
        "image_8": [
          "IMAGE"
        ],
        "image_9": [
          "IMAGE"
        ],
        "image_10": [
          "IMAGE"
        ],
        "image_11": [
          "IMAGE"
        ],
        "image_12": [
          "IMAGE"
        ],
        "image_13": [
          "IMAGE"
        ],
        "image_14": [
          "IMAGE"
        ],
        "image_15": [
          "IMAGE"
        ],
        "image_16": [
          "IMAGE"
        ],
        "image_17": [
          "IMAGE"
        ],
        "image_18": [
          "IMAGE"
        ],
        "image_19": [
          "IMAGE"
        ],
        "image_20": [
          "IMAGE"
        ],
        "image_21": [
          "IMAGE"
        ],
        "image_22": [
          "IMAGE"
        ],
        "image_23": [
          "IMAGE"
        ],
        "image_24": [
          "IMAGE"
        ],
        "image_25": [
          "IMAGE"
        ],
        "image_26": [
          "IMAGE"
        ],
        "image_27": [
          "IMAGE"
        ],
        "image_28": [
          "IMAGE"
        ],
        "image_29": [
          "IMAGE"
        ],
        "image_30": [
          "IMAGE"
        ],
        "image_31": [
          "IMAGE"
        ],
        "image_32": [
          "IMAGE"
        ],
        "image_33": [
          "IMAGE"
        ],
        "image_34": [
          "IMAGE"
        ],
        "image_35": [
          "IMAGE"
        ],
        "image_36": [
          "IMAGE"
        ],
        "image_37": [
          "IMAGE"
        ],
        "image_38": [
          "IMAGE"
        ],
        "image_39": [
          "IMAGE"
        ],
        "image_40": [
          "IMAGE"
        ],
        "image_41": [
          "IMAGE"
        ],
        "image_42": [
          "IMAGE"
        ],
        "image_43": [
          "IMAGE"
        ],
        "image_44": [
          "IMAGE"
        ],
        "image_45": [
          "IMAGE"
        ],
        "image_46": [
          "IMAGE"
        ],
        "image_47": [
          "IMAGE"
        ],
        "image_48": [
          "IMAGE"
        ],
        "image_49": [
          "IMAGE"
        ],
        "image_50": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_images",
        "all_in_one",
        "image_1"
      ],
      "hidden": [
        "image_2",
        "image_3",
        "image_4",
        "image_5",
        "image_6",
        "image_7",
        "image_8",
        "image_9",
        "image_10",
        "image_11",
        "image_12",
        "image_13",
        "image_14",
        "image_15",
        "image_16",
        "image_17",
        "image_18",
        "image_19",
        "image_20",
        "image_21",
        "image_22",
        "image_23",
        "image_24",
        "image_25",
        "image_26",
        "image_27",
        "image_28",
        "image_29",
        "image_30",
        "image_31",
        "image_32",
        "image_33",
        "image_34",
        "image_35",
        "image_36",
        "image_37",
        "image_38",
        "image_39",
        "image_40",
        "image_41",
        "image_42",
        "image_43",
        "image_44",
        "image_45",
        "image_46",
        "image_47",
        "image_48",
        "image_49",
        "image_50"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_CombineImages",
    "display_name": "🖼🔗 Combine Images",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ImageDetails": {
    "input": {
      "required": {
        "image_input": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_input"
      ]
    },
    "output": [
      "INT",
      "INT",
      "BOOL",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "WIDTH",
      "HEIGHT",
      "HAS_TRANSPARENCY",
      "ORIENTATION",
      "TYPE",
      "ALL"
    ],
    "name": "Bjornulf_ImageDetails",
    "display_name": "🖼🔍 Image Details",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_VideoDetails": {
    "input": {
      "required": {
        "video_path": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "ffprobe_path": [
          "STRING",
          {
            "default": "ffprobe"
          }
        ],
        "use_python_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video_path",
        "ffprobe_path",
        "use_python_ffmpeg"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "FLOAT",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "filename",
      "video_path",
      "width",
      "height",
      "fps",
      "total_frames",
      "duration_seconds",
      "video_codec",
      "video_bitrate",
      "pixel_format",
      "audio_codec",
      "audio_bitrate",
      "container_format",
      "duration_seconds_float",
      "full_info",
      "FFMPEG_CONFIG_JSON"
    ],
    "name": "Bjornulf_VideoDetails",
    "display_name": "📹🔍 Video details (FFmpeg) ⚙",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_IfElse": {
    "input": {
      "required": {
        "input": [
          "*",
          {
            "forceInput": true,
            "multiline": false
          }
        ],
        "input_type": [
          [
            "STRING: input EQUAL TO compare_with",
            "STRING: input NOT EQUAL TO compare_with",
            "BOOLEAN: input IS TRUE",
            "BOOLEAN: input IS FALSE",
            "NUMBER: input GREATER THAN compare_with",
            "NUMBER: input GREATER OR EQUAL TO compare_with",
            "NUMBER: input LESS THAN compare_with",
            "NUMBER: input LESS OR EQUAL TO compare_with"
          ],
          {
            "default": "STRING: input EQUAL TO compare_with"
          }
        ],
        "send_if_true": [
          "*"
        ],
        "compare_with": [
          "STRING",
          {
            "multiline": false
          }
        ]
      },
      "optional": {
        "send_if_false": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "input_type",
        "send_if_true",
        "compare_with"
      ],
      "optional": [
        "send_if_false"
      ]
    },
    "output": [
      "*",
      "*",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "output",
      "rejected",
      "input_type",
      "true_or_false",
      "details"
    ],
    "name": "Bjornulf_IfElse",
    "display_name": "🔀 If-Else (input / compare_with)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_RandomModelSelector": {
    "input": {
      "required": {
        "number_of_models": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ]
      },
      "optional": {
        "model_1": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_2": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_3": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_4": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_5": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_6": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_7": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_8": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_9": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "model_10": [
          [
            "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          ],
          {
            "default": "Adam-Doll.XL丨玩偶盲盒丨3D手办_V2.safetensors"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_models"
      ],
      "optional": [
        "model_1",
        "model_2",
        "model_3",
        "model_4",
        "model_5",
        "model_6",
        "model_7",
        "model_8",
        "model_9",
        "model_10",
        "seed"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "model_path",
      "model_name",
      "model_folder"
    ],
    "name": "Bjornulf_RandomModelSelector",
    "display_name": "🎲 Random Load checkpoint (Model Selector)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_SelectImageFromList": {
    "input": {
      "required": {
        "all_images": [
          "IMAGE",
          {}
        ],
        "selection": [
          "INT",
          {
            "default": 1,
            "min": -999999,
            "max": 999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "all_images",
        "selection"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "selected_image"
    ],
    "name": "Bjornulf_SelectImageFromList",
    "display_name": "🖼👈 Select an Image, Pick",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_WriteText": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "lines": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "Bjornulf_WriteText",
    "display_name": "✒ Write Text",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_LoadImagesFromSelectedFolder": {
    "input": {
      "required": {
        "selected_folder": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "selected_folder"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "Images resolution 1",
      "Images resolution 2",
      "Images resolution 3",
      "Images resolution 4"
    ],
    "name": "Bjornulf_LoadImagesFromSelectedFolder",
    "display_name": "📥🖼📂 Load Images from output folder",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopModelClipVae": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 10,
            "step": 1
          }
        ],
        "model_1": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_1": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_1": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "model_2": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_2": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_2": [
          "VAE",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "model_3": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_4": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_5": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_6": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_7": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_8": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_9": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_10": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_3": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_4": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_5": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_6": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_7": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_8": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_9": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_10": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_3": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_4": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_5": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_6": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_7": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_8": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_9": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_10": [
          "VAE",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs",
        "model_1",
        "clip_1",
        "vae_1",
        "model_2",
        "clip_2",
        "vae_2"
      ],
      "hidden": [
        "model_3",
        "model_4",
        "model_5",
        "model_6",
        "model_7",
        "model_8",
        "model_9",
        "model_10",
        "clip_3",
        "clip_4",
        "clip_5",
        "clip_6",
        "clip_7",
        "clip_8",
        "clip_9",
        "clip_10",
        "vae_3",
        "vae_4",
        "vae_5",
        "vae_6",
        "vae_7",
        "vae_8",
        "vae_9",
        "vae_10"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      true,
      true,
      true
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "Bjornulf_LoopModelClipVae",
    "display_name": "♻ Loop (Model+Clip+Vae)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopWriteText": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "optional": {
        "variables": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "variables"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "texts"
    ],
    "name": "Bjornulf_LoopWriteText",
    "display_name": "♻ Loop (✒🗔🅰️ Advanced Write Text)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_LoopImages": {
    "input": {
      "required": {
        "number_of_images": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 30,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_LoopImages",
    "display_name": "♻🖼 Loop (Images)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_RandomImage": {
    "input": {
      "required": {
        "number_of_images": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_RandomImage",
    "display_name": "🎲🖼 Random Image",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_PickInput": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1
          }
        ]
      },
      "hidden": {
        "input_1": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_2": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_3": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_4": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_5": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_6": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_7": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_8": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_9": [
          "*",
          {
            "forceInput": "True"
          }
        ],
        "input_10": [
          "*",
          {
            "forceInput": "True"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs",
        "seed"
      ],
      "hidden": [
        "input_1",
        "input_2",
        "input_3",
        "input_4",
        "input_5",
        "input_6",
        "input_7",
        "input_8",
        "input_9",
        "input_10"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "Bjornulf_PickInput",
    "display_name": "⏸️ Paused. Select input, Pick 👇",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_PauseResume": {
    "input": {
      "required": {
        "input": [
          "*",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "seed"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "Bjornulf_PauseResume",
    "display_name": "⏸️ Paused. Resume or Stop, Pick 👇",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_FreeVRAM": {
    "input": {
      "required": {
        "anything": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "anything"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Bjornulf_FreeVRAM",
    "display_name": "🧹 Free VRAM hack",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CombineTextsByLines": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "number_of_lines": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs",
        "number_of_lines"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "line_1",
      "line_2",
      "line_3",
      "line_4",
      "line_5",
      "line_6",
      "line_7",
      "line_8",
      "line_9",
      "line_10",
      "line_11",
      "line_12",
      "line_13",
      "line_14",
      "line_15",
      "line_16",
      "line_17",
      "line_18",
      "line_19",
      "line_20",
      "line_21",
      "line_22",
      "line_23",
      "line_24",
      "line_25",
      "line_26",
      "line_27",
      "line_28",
      "line_29",
      "line_30",
      "line_31",
      "line_32",
      "line_33",
      "line_34",
      "line_35",
      "line_36",
      "line_37",
      "line_38",
      "line_39",
      "line_40",
      "line_41",
      "line_42",
      "line_43",
      "line_44",
      "line_45",
      "line_46",
      "line_47",
      "line_48",
      "line_49",
      "line_50"
    ],
    "name": "Bjornulf_CombineTextsByLines",
    "display_name": "♻ Loop (All Lines from input 🔗 combine by lines)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_TextToSpeech": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "language": [
          [
            "Arabic",
            "Czech",
            "German",
            "English",
            "Spanish",
            "French",
            "Hindi",
            "Hungarian",
            "Italian",
            "Japanese",
            "Korean",
            "Dutch",
            "Polish",
            "Portuguese",
            "Russian",
            "Turkish",
            "Chinese"
          ],
          {
            "default": "English"
          }
        ],
        "speaker_wav": [
          "STRING",
          {
            "default": "default"
          }
        ],
        "autoplay": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "save_audio": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0
          }
        ]
      },
      "optional": {
        "connect_to_workflow": [
          "*",
          {
            "forceInput": true
          }
        ],
        "TTS_URL": [
          "TTS_URL",
          {
            "forceInput": true
          }
        ],
        "TTS_LANGUAGE": [
          "TTS_LANGUAGE",
          {
            "forceInput": true
          }
        ],
        "TTS_SPEAKER": [
          "TTS_SPEAKER",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "language",
        "speaker_wav",
        "autoplay",
        "save_audio",
        "overwrite",
        "seed"
      ],
      "optional": [
        "connect_to_workflow",
        "TTS_URL",
        "TTS_LANGUAGE",
        "TTS_SPEAKER"
      ]
    },
    "output": [
      "AUDIO",
      "STRING",
      "STRING",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "AUDIO",
      "audio_path",
      "audio_full_path",
      "audio_duration"
    ],
    "name": "Bjornulf_TextToSpeech",
    "display_name": "📝➜🔊 TTS - Text to Speech",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CharacterDescriptionGenerator": {
    "input": {
      "required": {
        "character_file": [
          [
            "Sean.json",
            "Jessica.json",
            "Lily.json",
            "Vanessa.json",
            "Marcel.json",
            "Amina.json",
            "Lukas.json",
            "Julien.json",
            "Albertine.json",
            "Chinedu.json"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "character_file"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "sentences",
      "words",
      "name"
    ],
    "name": "Bjornulf_CharacterDescriptionGenerator",
    "display_name": "🧑📝 Character Description Generator",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ImageMaskCutter": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_ImageMaskCutter",
    "display_name": "🖼✂ Cut Image with Mask",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoadImageWithTransparency": {
    "input": {
      "required": {
        "image": [
          [
            "D:\\boy_1.jpg",
            "D:\\comfyui_test1.jpg",
            "b919fa4777f9fc2eea79a99b9bda1634.jpg",
            "boy_1.jpg",
            "comfy_1745377827401_184935991.jpeg",
            "comfy_20250423112010_319772619.jpeg",
            "comfy_20250423122413_2123227682.jpeg",
            "comfy_20250423122947_2118245211.jpeg",
            "comfy_20250423123116_823845105.jpeg",
            "comfy_20250423134324_2008201995.jpeg",
            "comfy_20250423140142_242601892.jpeg",
            "comfy_20250423140816_1137040325.jpeg",
            "comfy_20250423141130_1591287454.jpeg",
            "comfy_20250423142118_1481305754.jpeg",
            "comfy_20250423142647_1858705086.jpeg",
            "comfy_20250423142730_259706676.jpeg",
            "comfy_20250423191230_2142590981.jpeg",
            "comfy_20250423191412_1729013067.jpeg",
            "comfy_20250423191559_1927692305.jpeg",
            "comfy_20250425094703_104093081.jpeg",
            "comfy_20250425095021_1536713243.jpeg",
            "comfy_20250425141339_2079820344.jpeg",
            "comfy_20250425144946_1882936217.jpeg",
            "comfy_20250425150351_2028290003.jpeg",
            "comfy_20250425150603_1128741906.jpeg",
            "comfy_20250425150949_1490916290.jpeg",
            "comfy_20250425151406_392020855.jpeg",
            "comfy_20250425151627_478716569.jpeg",
            "comfy_20250425154010_40611924.jpeg",
            "comfy_20250425161249_2102112902.jpeg",
            "comfy_20250425174036_1484582054.jpeg",
            "comfy_20250425174926_764395255.jpeg",
            "comfy_20250425180529_1734914548.jpeg",
            "comfy_20250427100122_806890505.jpeg",
            "comfy_20250427114912_1253297465.jpeg",
            "comfyui_340401197_.jpeg",
            "comfyui_505391490_.jpeg",
            "comfyui_test1.jpg",
            "comfyui_test2.jpg",
            "d194fdb1ae1450dce8b9e4e5c757855b83a773a6906972bfafc6a5383a6a28e4.jpg",
            "e4dde71190ef76c6cd144fa11127e9f5ae516732.webp",
            "example.png",
            "man_1.jpg",
            "man_2.jpg",
            "u=3132346354,1329268239&fm=253&fmt=auto&app=120&f=JPEG.webp",
            "woman_1.jpg",
            "丁一军.jpg",
            "苏宁豆芽图片20250402191604225.jpg",
            "苏宁豆芽图片20250402191618563.jpg",
            "苏宁豆芽图片20250425153720628.png",
            "苏宁豆芽图片20250425153918510.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "image_path"
    ],
    "name": "Bjornulf_LoadImageWithTransparency",
    "display_name": "📥🖼 Load Image with Transparency ▢",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopAllLines": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_LoopAllLines",
    "display_name": "♻ Loop (All Lines from input)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_TextToStringAndSeed": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "seed"
      ]
    },
    "output": [
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "text",
      "random_seed"
    ],
    "name": "Bjornulf_TextToStringAndSeed",
    "display_name": "🔢🎲 Text with random Seed",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_GreenScreenToTransparency": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {}
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_GreenScreenToTransparency",
    "display_name": "🟩➜▢ Green Screen to Transparency",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_RandomLineFromInput": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_RandomLineFromInput",
    "display_name": "🎲 Random line from input",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_SaveBjornulfLobeChat": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_SaveBjornulfLobeChat",
    "display_name": "🖼💬 Save image for Bjornulf LobeChat",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_WriteTextAdvanced": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "lines": 10
          }
        ]
      },
      "optional": {
        "variables": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "optional": [
        "variables",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "Bjornulf_WriteTextAdvanced",
    "display_name": "✒🗔🅰️ Advanced Write Text",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_RemoveTransparency": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "recover_background": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "background_color": [
          [
            "black",
            "white",
            "greenscreen"
          ],
          {
            "default": "black"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "recover_background",
        "background_color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_RemoveTransparency",
    "display_name": "▢➜⬛ Remove image Transparency (alpha)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_GrayscaleTransform": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "preserve_alpha": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "preserve_alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_GrayscaleTransform",
    "display_name": "🖼➜🔲 Image to grayscale (black & white)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_CombineBackgroundOverlay": {
    "input": {
      "required": {
        "background": [
          "IMAGE"
        ],
        "overlay": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "horizontal_position": [
          "FLOAT",
          {
            "default": 50,
            "min": -50,
            "max": 150,
            "step": 0.1
          }
        ],
        "vertical_position": [
          "FLOAT",
          {
            "default": 50,
            "min": -50,
            "max": 150,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "background",
        "overlay",
        "mask",
        "horizontal_position",
        "vertical_position"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_CombineBackgroundOverlay",
    "display_name": "🖼+🖼 Stack two images (Background+Overlay alpha)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_ShowText": {
    "input": {
      "required": {
        "text_int_float": [
          "*",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text_int_float"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_ShowText",
    "display_name": "👁 Show (Text, Int, Float)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_SaveText": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "filepath": [
          "STRING",
          {
            "default": "Bjornulf/Text/example.txt"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "filepath"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "added_text",
      "complete_text",
      "filename",
      "full_path"
    ],
    "name": "Bjornulf_SaveText",
    "display_name": "💾 Save Text",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ResizeImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 256
          }
        ],
        "height": [
          "INT",
          {
            "default": 256
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Bjornulf_ResizeImage",
    "display_name": "📏 Resize Image",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_ResizeImagePercentage": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {}
        ],
        "percentage": [
          "INT",
          {
            "default": 50,
            "min": 1,
            "max": 1000,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image",
        "percentage"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "Bjornulf_ResizeImagePercentage",
    "display_name": "📏 Resize Image Percentage",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_SaveImageToFolder": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "folder_name": [
          "STRING",
          {
            "default": "my_folder"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "folder_name"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_SaveImageToFolder",
    "display_name": "💾🖼📁 Save Image(s) to a folder",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_SaveTmpImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_SaveTmpImage",
    "display_name": "💾🖼 Save Image (tmp_api.png) ⚠️💣",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_SaveImagePath": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "forceInput": true
          }
        ],
        "path": [
          "STRING",
          {
            "default": "./output/default.png"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image",
        "path"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Bjornulf_SaveImagePath",
    "display_name": "💾🖼 Save Image (exact path, exact name) ⚠️💣",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_CombineTexts": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ],
        "delimiter": [
          [
            "newline",
            "comma",
            "space",
            "slash",
            "backslash",
            "nothing"
          ],
          {
            "default": "newline"
          }
        ]
      },
      "hidden": {
        "text_1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_2": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_3": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_4": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_5": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_6": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_7": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_8": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_9": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_10": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_11": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_12": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_13": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_14": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_15": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_16": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_17": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_18": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_19": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_20": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_21": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_22": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_23": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_24": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_25": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_26": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_27": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_28": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_29": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_30": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_31": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_32": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_33": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_34": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_35": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_36": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_37": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_38": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_39": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_40": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_41": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_42": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_43": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_44": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_45": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_46": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_47": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_48": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_49": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_50": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_51": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_52": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_53": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_54": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_55": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_56": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_57": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_58": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_59": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_60": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_61": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_62": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_63": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_64": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_65": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_66": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_67": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_68": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_69": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_70": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_71": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_72": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_73": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_74": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_75": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_76": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_77": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_78": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_79": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_80": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_81": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_82": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_83": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_84": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_85": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_86": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_87": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_88": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_89": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_90": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_91": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_92": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_93": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_94": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_95": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_96": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_97": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_98": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_99": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_100": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs",
        "delimiter"
      ],
      "hidden": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_6",
        "text_7",
        "text_8",
        "text_9",
        "text_10",
        "text_11",
        "text_12",
        "text_13",
        "text_14",
        "text_15",
        "text_16",
        "text_17",
        "text_18",
        "text_19",
        "text_20",
        "text_21",
        "text_22",
        "text_23",
        "text_24",
        "text_25",
        "text_26",
        "text_27",
        "text_28",
        "text_29",
        "text_30",
        "text_31",
        "text_32",
        "text_33",
        "text_34",
        "text_35",
        "text_36",
        "text_37",
        "text_38",
        "text_39",
        "text_40",
        "text_41",
        "text_42",
        "text_43",
        "text_44",
        "text_45",
        "text_46",
        "text_47",
        "text_48",
        "text_49",
        "text_50",
        "text_51",
        "text_52",
        "text_53",
        "text_54",
        "text_55",
        "text_56",
        "text_57",
        "text_58",
        "text_59",
        "text_60",
        "text_61",
        "text_62",
        "text_63",
        "text_64",
        "text_65",
        "text_66",
        "text_67",
        "text_68",
        "text_69",
        "text_70",
        "text_71",
        "text_72",
        "text_73",
        "text_74",
        "text_75",
        "text_76",
        "text_77",
        "text_78",
        "text_79",
        "text_80",
        "text_81",
        "text_82",
        "text_83",
        "text_84",
        "text_85",
        "text_86",
        "text_87",
        "text_88",
        "text_89",
        "text_90",
        "text_91",
        "text_92",
        "text_93",
        "text_94",
        "text_95",
        "text_96",
        "text_97",
        "text_98",
        "text_99",
        "text_100"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_CombineTexts",
    "display_name": "🔗 Combine (Texts)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopTexts": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 50,
            "step": 1
          }
        ]
      },
      "hidden": {
        "text_1": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_2": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_3": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_4": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_5": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_6": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_7": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_8": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_9": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_10": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_11": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_12": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_13": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_14": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_15": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_16": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_17": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_18": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_19": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_20": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_21": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_22": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_23": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_24": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_25": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_26": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_27": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_28": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_29": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_30": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_31": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_32": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_33": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_34": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_35": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_36": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_37": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_38": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_39": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_40": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_41": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_42": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_43": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_44": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_45": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_46": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_47": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_48": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_49": [
          "STRING",
          {
            "forceInput": "True"
          }
        ],
        "text_50": [
          "STRING",
          {
            "forceInput": "True"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs"
      ],
      "hidden": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_6",
        "text_7",
        "text_8",
        "text_9",
        "text_10",
        "text_11",
        "text_12",
        "text_13",
        "text_14",
        "text_15",
        "text_16",
        "text_17",
        "text_18",
        "text_19",
        "text_20",
        "text_21",
        "text_22",
        "text_23",
        "text_24",
        "text_25",
        "text_26",
        "text_27",
        "text_28",
        "text_29",
        "text_30",
        "text_31",
        "text_32",
        "text_33",
        "text_34",
        "text_35",
        "text_36",
        "text_37",
        "text_38",
        "text_39",
        "text_40",
        "text_41",
        "text_42",
        "text_43",
        "text_44",
        "text_45",
        "text_46",
        "text_47",
        "text_48",
        "text_49",
        "text_50"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_LoopTexts",
    "display_name": "♻ Loop (Texts)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_RandomTexts": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 30,
            "step": 1
          }
        ],
        "number_of_random": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 30,
            "step": 1
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0
          }
        ]
      },
      "hidden": {
        "text_1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_2": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_3": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_4": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_5": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_6": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_7": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_8": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_9": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_10": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_11": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_12": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_13": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_14": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_15": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_16": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_17": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_18": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_19": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_20": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_21": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_22": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_23": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_24": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_25": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_26": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_27": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_28": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_29": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_30": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs",
        "number_of_random",
        "seed"
      ],
      "hidden": [
        "text_1",
        "text_2",
        "text_3",
        "text_4",
        "text_5",
        "text_6",
        "text_7",
        "text_8",
        "text_9",
        "text_10",
        "text_11",
        "text_12",
        "text_13",
        "text_14",
        "text_15",
        "text_16",
        "text_17",
        "text_18",
        "text_19",
        "text_20",
        "text_21",
        "text_22",
        "text_23",
        "text_24",
        "text_25",
        "text_26",
        "text_27",
        "text_28",
        "text_29",
        "text_30"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Bjornulf_RandomTexts",
    "display_name": "🎲 Random (Texts)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_RandomModelClipVae": {
    "input": {
      "required": {
        "number_of_inputs": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 10,
            "step": 1
          }
        ],
        "model_1": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_1": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_1": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "model_2": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_2": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_2": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0
          }
        ]
      },
      "hidden": {
        "model_3": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_4": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_5": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_6": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_7": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_8": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_9": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "model_10": [
          "MODEL",
          {
            "forceInput": true
          }
        ],
        "clip_3": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_4": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_5": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_6": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_7": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_8": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_9": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "clip_10": [
          "CLIP",
          {
            "forceInput": true
          }
        ],
        "vae_3": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_4": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_5": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_6": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_7": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_8": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_9": [
          "VAE",
          {
            "forceInput": true
          }
        ],
        "vae_10": [
          "VAE",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number_of_inputs",
        "model_1",
        "clip_1",
        "vae_1",
        "model_2",
        "clip_2",
        "vae_2",
        "seed"
      ],
      "hidden": [
        "model_3",
        "model_4",
        "model_5",
        "model_6",
        "model_7",
        "model_8",
        "model_9",
        "model_10",
        "clip_3",
        "clip_4",
        "clip_5",
        "clip_6",
        "clip_7",
        "clip_8",
        "clip_9",
        "clip_10",
        "vae_3",
        "vae_4",
        "vae_5",
        "vae_6",
        "vae_7",
        "vae_8",
        "vae_9",
        "vae_10"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "Bjornulf_RandomModelClipVae",
    "display_name": "🎲 Random (Model+Clip+Vae)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_imagesToVideo": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24,
            "min": 1,
            "max": 120
          }
        ],
        "name_prefix": [
          "STRING",
          {
            "default": "imgs2video/me"
          }
        ],
        "use_python_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "audio": [
          "AUDIO"
        ],
        "audio_path": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "FFMPEG_CONFIG_JSON": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "fps",
        "name_prefix",
        "use_python_ffmpeg"
      ],
      "optional": [
        "audio",
        "audio_path",
        "FFMPEG_CONFIG_JSON"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "comment",
      "ffmpeg_command",
      "video_path"
    ],
    "name": "Bjornulf_imagesToVideo",
    "display_name": "🖼➜📹 images to video (FFMPEG Save Video)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": true
  },
  "Bjornulf_VideoPingPong": {
    "input": {
      "optional": {
        "images": [
          "IMAGE"
        ],
        "video_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "use_python_ffmpeg": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "images",
        "video_path",
        "use_python_ffmpeg"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGES"
    ],
    "name": "Bjornulf_VideoPingPong",
    "display_name": "📹 video PingPong",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopFloat": {
    "input": {
      "required": {
        "from_this": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "to_that": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "jump": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "from_this",
        "to_that",
        "jump"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "Bjornulf_LoopFloat",
    "display_name": "♻ Loop (Float)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopInteger": {
    "input": {
      "required": {
        "from_this": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "to_that": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "jump": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "from_this",
        "to_that",
        "jump"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Bjornulf_LoopInteger",
    "display_name": "♻ Loop (Integer)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopBasicBatch": {
    "input": {
      "required": {
        "nb_loops": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "default_text": [
          "STRING",
          {
            "default": "Default input"
          }
        ]
      },
      "optional": {
        "input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "nb_loops",
        "default_text"
      ],
      "optional": [
        "input"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "output"
    ],
    "name": "Bjornulf_LoopBasicBatch",
    "display_name": "♻ Loop",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopSamplers": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "ALL SAMPLERS",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ]
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "sampler_name"
    ],
    "name": "Bjornulf_LoopSamplers",
    "display_name": "♻ Loop (All Samplers)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopSchedulers": {
    "input": {
      "required": {
        "scheduler": [
          [
            "ALL SCHEDULERS",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scheduler"
      ]
    },
    "output": [
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "scheduler"
    ],
    "name": "Bjornulf_LoopSchedulers",
    "display_name": "♻ Loop (All Schedulers)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "Bjornulf_LoopCombosSamplersSchedulers": {
    "input": {
      "required": {
        "combination": [
          [
            "ALL 6 COMBINATIONS (sgm_uniform)",
            "ALL 5 COMBINATIONS (normal)",
            "ALL 5 COMBINATIONS (ddim_uniform)",
            "ALL 7 COMBINATIONS (simple)",
            "sgm_uniform/euler",
            "sgm_uniform/dpm_2",
            "sgm_uniform/dpmpp_2m",
            "sgm_uniform/lcm",
            "sgm_uniform/ddim",
            "sgm_uniform/uni_pc",
            "normal/ddim",
            "normal/uni_pc",
            "normal/euler",
            "normal/heunpp2",
            "normal/dpm_2",
            "ddim_uniform/euler",
            "ddim_uniform/dpm_2",
            "ddim_uniform/lcm",
            "ddim_uniform/uni_pc",
            "simple/euler",
            "simple/heun",
            "simple/heunpp2",
            "simple/dpmpp_2m",
            "simple/lcm",
            "simple/ipndm",
            "simple/uni_pc",
            "exponential/dpm_adaptive"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "combination"
      ]
    },
    "output": [
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [
      true,
      false
    ],
    "output_name": [
      "sampler_name",
      "scheduler"
    ],
    "name": "Bjornulf_LoopCombosSamplersSchedulers",
    "display_name": "♻ Loop (My combos Sampler⚔Scheduler)",
    "description": "",
    "python_module": "custom_nodes.bjornulf_custom_nodes",
    "category": "Bjornulf",
    "output_node": false
  },
  "WD14Tagger|pysssss": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          [
            "wd-vit-tagger-v3",
            "wd-swinv2-tagger-v3",
            "wd-convnext-tagger-v3",
            "wd-v1-4-moat-tagger-v2",
            "wd-v1-4-convnextv2-tagger-v2",
            "wd-v1-4-convnext-tagger-v2",
            "wd-v1-4-convnext-tagger",
            "wd-v1-4-vit-tagger-v2",
            "wd-v1-4-swinv2-tagger-v2",
            "wd-v1-4-vit-tagger"
          ],
          {
            "default": "wd-v1-4-moat-tagger-v2"
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "character_threshold": [
          "FLOAT",
          {
            "default": 0.85,
            "min": 0.0,
            "max": 1,
            "step": 0.05
          }
        ],
        "replace_underscore": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "trailing_comma": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "exclude_tags": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "threshold",
        "character_threshold",
        "replace_underscore",
        "trailing_comma",
        "exclude_tags"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "WD14Tagger|pysssss",
    "display_name": "WD14 Tagger 🐍",
    "description": "",
    "python_module": "custom_nodes.comfyui-wd14-tagger",
    "category": "image",
    "output_node": true
  },
  "DF_Float": {
    "input": {
      "required": {
        "Value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Float",
    "display_name": "Float",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Variables",
    "output_node": false
  },
  "DF_Integer": {
    "input": {
      "required": {
        "Value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 1,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "DF_Integer",
    "display_name": "Integer",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Variables",
    "output_node": false
  },
  "DF_Text": {
    "input": {
      "required": {
        "Text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "DF_Text",
    "display_name": "Text",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Variables",
    "output_node": false
  },
  "DF_Text_Box": {
    "input": {
      "required": {
        "Text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "DF_Text_Box",
    "display_name": "Text Box",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Variables",
    "output_node": false
  },
  "DF_DynamicPrompts_Text_Box": {
    "input": {
      "required": {
        "Text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": false,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "DF_DynamicPrompts_Text_Box",
    "display_name": "DynamicPrompts Text Box",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Variables",
    "output_node": false
  },
  "DF_String_Concatenate": {
    "input": {
      "required": {
        "Prepend": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ],
        "Append": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ],
        "Delimiter": [
          "STRING",
          {
            "default": ", ",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Prepend",
        "Append",
        "Delimiter"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "TEXT"
    ],
    "name": "DF_String_Concatenate",
    "display_name": "String Concatenate",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions/String Operations",
    "output_node": false
  },
  "DF_String_Replace": {
    "input": {
      "required": {
        "Text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ],
        "Pattern": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ],
        "Replace_With": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ],
        "Mode": [
          [
            "Strict",
            "RegEx"
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Text",
        "Pattern",
        "Replace_With",
        "Mode"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "TEXT"
    ],
    "name": "DF_String_Replace",
    "display_name": "String Replace",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions/String Operations",
    "output_node": false
  },
  "DF_Search_In_Text": {
    "input": {
      "required": {
        "Text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ],
        "Pattern": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": false,
            "dynamicPrompts": false
          }
        ],
        "ConsiderRegister": [
          "BOOLEAN",
          {
            "default": false,
            "force": false
          }
        ],
        "Mode": [
          [
            "Strict",
            "RegEx"
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Text",
        "Pattern",
        "ConsiderRegister",
        "Mode"
      ]
    },
    "output": [
      "BOOLEAN",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "BOOLEAN",
      "OCCURRENCES"
    ],
    "name": "DF_Search_In_Text",
    "display_name": "Search In Text",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions/String Operations",
    "output_node": false
  },
  "DF_To_text_(Debug)": {
    "input": {
      "required": {
        "ANY": [
          "*",
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ANY"
      ]
    },
    "output": [
      "*",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SAME AS INPUT",
      "STRING"
    ],
    "name": "DF_To_text_(Debug)",
    "display_name": "To text (Debug)",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Debug",
    "output_node": true
  },
  "DF_Random": {
    "input": {
      "required": {
        "Value_A": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "Value_B": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967295,
            "step": 1,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value_A",
        "Value_B",
        "seed"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Random",
    "display_name": "Random",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions",
    "output_node": false
  },
  "DF_Int_to_Float": {
    "input": {
      "required": {
        "Value": [
          "INT",
          {
            "default": 1,
            "min": -9223372036854775807,
            "max": 9223372036854775807,
            "step": 1,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Int_to_Float",
    "display_name": "Int to Float",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions/Converters",
    "output_node": false
  },
  "DF_Ceil": {
    "input": {
      "required": {
        "Value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "DF_Ceil",
    "display_name": "Ceil",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions/Converters",
    "output_node": false
  },
  "DF_Floor": {
    "input": {
      "required": {
        "Value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "DF_Floor",
    "display_name": "Floor",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions/Converters",
    "output_node": false
  },
  "DF_Absolute_value": {
    "input": {
      "required": {
        "Value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "negative_out": [
          [
            false,
            true
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "Value",
        "negative_out"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Absolute_value",
    "display_name": "Absolute value",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions/Converters",
    "output_node": false
  },
  "DF_Get_latent_size": {
    "input": {
      "required": {
        "latent": [
          "LATENT",
          {
            "forceInput": false
          }
        ],
        "original": [
          [
            false,
            true
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "original"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "WIDTH",
      "HEIGHT"
    ],
    "name": "DF_Get_latent_size",
    "display_name": "Get latent size",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions",
    "output_node": false
  },
  "DF_Get_image_size": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "WIDTH",
      "HEIGHT"
    ],
    "name": "DF_Get_image_size",
    "display_name": "Get image size",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions",
    "output_node": false
  },
  "DF_Sum": {
    "input": {
      "required": {
        "Value_A": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "Value_B": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value_A",
        "Value_B"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Sum",
    "display_name": "Sum",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math",
    "output_node": false
  },
  "DF_Subtract": {
    "input": {
      "required": {
        "Value_A": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "Value_B": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value_A",
        "Value_B"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Subtract",
    "display_name": "Subtract",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math",
    "output_node": false
  },
  "DF_Multiply": {
    "input": {
      "required": {
        "Value_A": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "Value_B": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value_A",
        "Value_B"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Multiply",
    "display_name": "Multiply",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math",
    "output_node": false
  },
  "DF_Divide": {
    "input": {
      "required": {
        "Numerator": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "Denominator": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Numerator",
        "Denominator"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Divide",
    "display_name": "Divide",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math",
    "output_node": false
  },
  "DF_Power": {
    "input": {
      "required": {
        "Value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "Exponent": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value",
        "Exponent"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Power",
    "display_name": "Power",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math",
    "output_node": false
  },
  "DF_Square_root": {
    "input": {
      "required": {
        "Value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Value"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "FLOAT"
    ],
    "name": "DF_Square_root",
    "display_name": "Square root",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math",
    "output_node": false
  },
  "DF_Sinus": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "type_": [
          [
            "RAD",
            "DEG"
          ],
          {
            "forceInput": false
          }
        ],
        "arcSin": [
          [
            false,
            true
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "type_",
        "arcSin"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Sinus",
    "display_name": "Sinus",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math/Trigonometry",
    "output_node": false
  },
  "DF_Cosines": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "type_": [
          [
            "RAD",
            "DEG"
          ],
          {
            "forceInput": false
          }
        ],
        "arcCos": [
          [
            false,
            true
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "type_",
        "arcCos"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Cosines",
    "display_name": "Cosines",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math/Trigonometry",
    "output_node": false
  },
  "DF_Tangent": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "type_": [
          [
            "RAD",
            "DEG"
          ],
          {
            "forceInput": false
          }
        ],
        "arcTan": [
          [
            false,
            true
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "type_",
        "arcTan"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "DF_Tangent",
    "display_name": "Tangent",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Math/Trigonometry",
    "output_node": false
  },
  "DF_Logic_node": {
    "input": {
      "required": {
        "Operation": [
          [
            "A > B",
            "A < B",
            "A = B",
            "A AND B",
            "A OR B",
            "A XOR B"
          ],
          {
            "forceInput": false
          }
        ],
        "CompareValue_A": [
          "*",
          {
            "forceInput": false
          }
        ]
      },
      "optional": {
        "CompareValue_B": [
          "*",
          {
            "forceInput": false
          }
        ],
        "OnTrue": [
          "*",
          {
            "forceInput": false
          }
        ],
        "OnFalse": [
          "*",
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "Operation",
        "CompareValue_A"
      ],
      "optional": [
        "CompareValue_B",
        "OnTrue",
        "OnFalse"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "DF_Logic_node",
    "display_name": "Logic node",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Functions",
    "output_node": false
  },
  "DF_Latent_Scale_by_ratio": {
    "input": {
      "required": {
        "latent": [
          "LATENT",
          {
            "forceInput": false
          }
        ],
        "modifier": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "bicubic",
            "bislerp",
            "area",
            "lanczos"
          ],
          {
            "forceInput": false
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "modifier",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "DF_Latent_Scale_by_ratio",
    "display_name": "Latent Scale by ratio",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Modded nodes/Latent",
    "output_node": false
  },
  "DF_Latent_Scale_to_side": {
    "input": {
      "required": {
        "latent": [
          "LATENT",
          {
            "forceInput": false
          }
        ],
        "side_length": [
          "INT",
          {
            "default": 512,
            "min": -9223372036854775807,
            "max": 9223372036854775807,
            "step": 1,
            "forceInput": false
          }
        ],
        "side": [
          [
            "Longest",
            "Shortest",
            "Width",
            "Height"
          ],
          {
            "forceInput": false
          }
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "bicubic",
            "bislerp",
            "area",
            "lanczos"
          ],
          {
            "forceInput": false
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "side_length",
        "side",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "DF_Latent_Scale_to_side",
    "display_name": "Latent Scale to side",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Modded nodes/Latent",
    "output_node": false
  },
  "DF_Image_scale_by_ratio": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "forceInput": false
          }
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "bicubic",
            "bislerp",
            "area",
            "lanczos"
          ],
          {
            "forceInput": false
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_by",
        "upscale_method",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DF_Image_scale_by_ratio",
    "display_name": "Image scale by ratio",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Modded nodes/Image",
    "output_node": false
  },
  "DF_Image_scale_to_side": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "forceInput": false
          }
        ],
        "side_length": [
          "INT",
          {
            "default": 1,
            "min": -9223372036854775807,
            "max": 9223372036854775807,
            "step": 1,
            "forceInput": false
          }
        ],
        "side": [
          [
            "Longest",
            "Shortest",
            "Width",
            "Height"
          ],
          {
            "forceInput": false
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "bicubic",
            "bislerp",
            "area",
            "lanczos"
          ],
          {
            "forceInput": false
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ],
          {
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "side_length",
        "side",
        "upscale_method",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DF_Image_scale_to_side",
    "display_name": "Image scale to side",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Modded nodes/Image",
    "output_node": false
  },
  "DF_Conditioning_area_scale_by_ratio": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING",
          {
            "forceInput": false
          }
        ],
        "modifier": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ],
        "strength_modifier": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01,
            "forceInput": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "modifier",
        "strength_modifier"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "DF_Conditioning_area_scale_by_ratio",
    "display_name": "Conditioning area scale by ratio",
    "description": "",
    "python_module": "custom_nodes.derfuu_comfyui_moddednodes",
    "category": "Derfuu_Nodes/Modded nodes/Conditions",
    "output_node": false
  },
  "InstantIDModelLoader": {
    "input": {
      "required": {
        "instantid_file": [
          [
            "ip-adapter.bin"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid_file"
      ]
    },
    "output": [
      "INSTANTID"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INSTANTID"
    ],
    "name": "InstantIDModelLoader",
    "display_name": "Load InstantID Model",
    "description": "",
    "python_module": "custom_nodes.comfyui_instantid",
    "category": "InstantID",
    "output_node": false
  },
  "InstantIDFaceAnalysis": {
    "input": {
      "required": {
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "provider"
      ]
    },
    "output": [
      "FACEANALYSIS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FACEANALYSIS"
    ],
    "name": "InstantIDFaceAnalysis",
    "display_name": "InstantID Face Analysis",
    "description": "",
    "python_module": "custom_nodes.comfyui_instantid",
    "category": "InstantID",
    "output_node": false
  },
  "ApplyInstantID": {
    "input": {
      "required": {
        "instantid": [
          "INSTANTID"
        ],
        "insightface": [
          "FACEANALYSIS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid",
        "insightface",
        "control_net",
        "image",
        "model",
        "positive",
        "negative",
        "weight",
        "start_at",
        "end_at"
      ],
      "optional": [
        "image_kps",
        "mask"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "positive",
      "negative"
    ],
    "name": "ApplyInstantID",
    "display_name": "Apply InstantID",
    "description": "",
    "python_module": "custom_nodes.comfyui_instantid",
    "category": "InstantID",
    "output_node": false
  },
  "ApplyInstantIDAdvanced": {
    "input": {
      "required": {
        "instantid": [
          "INSTANTID"
        ],
        "insightface": [
          "FACEANALYSIS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "ip_weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 3.0,
            "step": 0.01
          }
        ],
        "cn_strength": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "combine_embeds": [
          [
            "average",
            "norm average",
            "concat"
          ],
          {
            "default": "average"
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid",
        "insightface",
        "control_net",
        "image",
        "model",
        "positive",
        "negative",
        "ip_weight",
        "cn_strength",
        "start_at",
        "end_at",
        "noise",
        "combine_embeds"
      ],
      "optional": [
        "image_kps",
        "mask"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "positive",
      "negative"
    ],
    "name": "ApplyInstantIDAdvanced",
    "display_name": "Apply InstantID Advanced",
    "description": "",
    "python_module": "custom_nodes.comfyui_instantid",
    "category": "InstantID",
    "output_node": false
  },
  "FaceKeypointsPreprocessor": {
    "input": {
      "required": {
        "faceanalysis": [
          "FACEANALYSIS"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "faceanalysis",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FaceKeypointsPreprocessor",
    "display_name": "Face Keypoints Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_instantid",
    "category": "InstantID",
    "output_node": false
  },
  "InstantIDAttentionPatch": {
    "input": {
      "required": {
        "instantid": [
          "INSTANTID"
        ],
        "insightface": [
          "FACEANALYSIS"
        ],
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "instantid",
        "insightface",
        "image",
        "model",
        "weight",
        "start_at",
        "end_at",
        "noise"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "MODEL",
      "FACE_EMBEDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "FACE_EMBEDS"
    ],
    "name": "InstantIDAttentionPatch",
    "display_name": "InstantID Patch Attention",
    "description": "",
    "python_module": "custom_nodes.comfyui_instantid",
    "category": "InstantID",
    "output_node": false
  },
  "ApplyInstantIDControlNet": {
    "input": {
      "required": {
        "face_embeds": [
          "FACE_EMBEDS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image_kps": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "face_embeds",
        "control_net",
        "image_kps",
        "positive",
        "negative",
        "strength",
        "start_at",
        "end_at"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ApplyInstantIDControlNet",
    "display_name": "InstantID Apply ControlNet",
    "description": "",
    "python_module": "custom_nodes.comfyui_instantid",
    "category": "InstantID",
    "output_node": false
  }
}